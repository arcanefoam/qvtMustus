import SimpleUML: '../../model/SimpleUML.ecore'::simpleuml;
import SimpleRDBMS: '../../model/SimpleRDBMS.ecore'::simplerdbms;
import UMLtoRDBMS: '../../model/UMLtoRDBMS.ecore'::umltordbms;

/* Enforce uml to rdbms */
transformation umlRdbms {
    uml imports SimpleUML;
    rdbms imports SimpleRDBMS;
    middle imports UMLtoRDBMS;
}

map packageToSchema_LM in umlRdbms {
    uml (p:Package |) {
    }
    enforce middle () {
        realize p2s:PackageToSchema |
    }
    where () {
        p2s.umlPackage := p;
        p2s.name := p.name;
    }
}

map packageToSchema_MR in umlRdbms {
    check middle (p2s:PackageToSchema |) { }
    enforce rdbms () {
        realize s:Schema |
    }
    where () {
        p2s.schema := s;
        s.name := p2s.name;
    }
}

map integerToNumber_LM in umlRdbms {
    uml (p:Package, prim:PrimitiveDataType |) { }
    enforce middle (p2s:PackageToSchema |) {
        realize p2n:IntegerToNumber |
    }
    where (p2s.umlPackage = p;
           prim.namespace = p;
           prim.name = 'Integer';) {
        p2n.owner := p2s;
        p2n.primitive := prim;
        p2n.name := prim.name + '2' + 'NUMBER';
    }
}

map integerToNumber_MR in umlRdbms {
    middle (p2s:PackageToSchema, p2n:IntegerToNumber |) { }
    enforce rdbms () {
        realize sqlType:String |
    }
    where (p2n.owner = p2s;) {
        sqlType := 'NUMBER';
        p2n.typeName := sqlType;
    }
}

map booleanToBoolean_LM in umlRdbms {
    uml (p:Package, prim:PrimitiveDataType |) { }
    enforce middle (p2s:PackageToSchema |) {
    }
    where (p2s.umlPackage = p;
           prim.namespace = p;
           prim.name = 'Boolean';) {
        realize p2n:BooleanToBoolean |
        p2n.owner := p2s;
        p2n.primitive := prim;
        p2n.name := prim.name + '2' + 'BOOLEAN';
    }
}

map booleanToBoolean_MR in umlRdbms {
    middle (p2s:PackageToSchema, p2n:BooleanToBoolean |) { }
    enforce rdbms () {
        realize sqlType:String |
    }
    where (p2n.owner = p2s;) {
        sqlType := 'BOOLEAN';
        p2n.typeName := sqlType;
    }
}

map stringToVarchar_LM in umlRdbms {
    uml (p:Package, prim:PrimitiveDataType |) { }
    enforce middle (p2s:PackageToSchema |) {
        realize p2n:StringToVarchar |
    }
    where (p2s.umlPackage = p;
           prim.namespace = p;
           prim.name = 'String';) {
        p2n.owner := p2s;
        p2n.primitive := prim;
        p2n.name := prim.name + '2' + 'VARCHAR';
    }
}

map stringToVarchar_MR in umlRdbms {
    middle (p2s:PackageToSchema, p2n:StringToVarchar |) { }
    enforce rdbms () {
        realize sqlType:String |
    }
    where (p2n.owner = p2s;) {
        sqlType := 'VARCHAR';
        p2n.typeName := sqlType;
    }
}

query umlRdbms::getAllSupers(cls : SimpleUML::Class) : Set(SimpleUML::Class) {
    cls.general->collect(gen | getAllSupers(gen))->including(cls)->asSet()
}

query umlRdbms::getAllAttributes(cls :  SimpleUML::Class) : Set( SimpleUML::Attribute) {
    getAllSupers(cls)->collect(c | c.attributes)
}

query umlRdbms::getAllForwards(cls :  SimpleUML::Class) : Set( SimpleUML::Association) {
    getAllSupers(cls)->collect(c | true)
}


map classToTable_LM in umlRdbms {
    uml (p:Package, c:Class |) {
    }
    enforce middle (p2s:PackageToSchema ) {
        realize c2t:ClassToTable |
    }
    where (p2s.umlPackage = p;
           c.kind = 'persistent';
           c.namespace = p;) {
        c2t.owner := p2s;
        c2t.umlClass := c;
        c2t.name := c.name;
    }
}

map classToTable_MR in umlRdbms {
    middle (p2s:PackageToSchema, c2t:ClassToTable |) { }
    enforce rdbms (s:Schema |) {
        realize t:Table,
        realize pk:Key,
        realize pc:Column |
    }
    where (p2s.schema = s;
           c2t.owner = p2s;) {
        c2t.table := t;
        c2t.primaryKey := pk;
        c2t.column := pc;
        t.kind := 'base';
        t.schema := s;
        t.name := c2t.name;
        pk.owner := t;
        pk.kind := 'primary';
        pc.owner := t;
        pc.key := Set(Key){pk};
        pc.type := 'NUMBER';
        pc.name := t.name+'_tid';
        pk.name := t.name+'_pk';
    }
}

map associationToForeignKey_LM in umlRdbms {
    uml (p:Package, sc:Class, dc:Class, a:Association |) { }
    enforce middle (p2s:PackageToSchema, sc2t:ClassToTable, dc2t:ClassToTable |) {
        realize a2f:AssociationToForeignKey |
        }
    where (sc2t.owner = p2s;
           p2s.umlPackage = p;
           sc2t.umlClass = sc;
           dc2t.umlClass = dc;
           -- getAllForwards(sc)->includes(a);
           a.source = sc;
           -- getAllSupers(dc)->includes(a.destination);
           a.destination = dc;
           a.namespace = p;
           sc.namespace = p;
           ) {
        a2f.owner := sc2t;
        a2f.referenced := dc2t;
        a2f.association := a;
        a2f.name := if a.destination=dc and a.source=sc
                        then a.name
                        else if a.destination<>dc and a.source=sc
                        then dc.name+'_'+a.name
                        else if a.destination=dc and a.source<>sc
                        then a.name+'_'+sc.name
                        else dc.name+'_'+a.name+'_'+sc.name
                        endif endif endif;
    }
}

map associationToForeignKey_MR in umlRdbms {
    middle (p2s:PackageToSchema,
            sc2t:ClassToTable,
            dc2t:ClassToTable,
            a2f:AssociationToForeignKey |) { }
    enforce rdbms (s:Schema, st:Table, dt:Table, rk:Key |
            st.schema = s;
            rk.owner = dt;
            rk.kind = 'primary';) {
        realize fk:ForeignKey,
        realize fc:Column |
    }
    where (sc2t.table = st;
           dc2t.table = dt;
           sc2t.owner = p2s;
           p2s.schema = s;
           a2f.owner = sc2t;
           a2f.referenced = dc2t;
        ) {
        fk.owner := st;
        fc.owner := st;
        fk.refersTo := rk;
        fc.foreignKeys := Set(ForeignKey){fk};
        fc.type := rk.column->first().type;
        a2f.foreignKey := fk;
        a2f.column := fc;
        fk.name := a2f.name;
        fc.name := a2f.name +'_tid';
    }
}

map classPrimitiveAttributes_LM in umlRdbms {
    uml (c:Class, t:PrimitiveDataType, a:Attribute |) { }
    enforce middle(fao:ClassToTable, p2n:PrimitiveToName |) { }
    where (fao.umlClass=c;
           p2n.primitive=t;
           a.owner = c;
        -- getAllAttributes(c)->includes(a);
           a.type = t;) {
        realize fa:AttributeToColumn |
        fa.attribute := a;
        fa.owner := fao;
        fa.type := p2n;
        fa.kind := a.kind;
        fa.name := a.name;
        fa.leafs := Set(AttributeToColumn) {fa};
    }
}

map classComplexAttributes_LM in umlRdbms {
    uml (c:Class, t:Class, a:Attribute |) { }
    enforce middle (fao:ClassToTable |) { }
    where (fao.umlClass=c;
           a.owner = c;
        -- getAllAttributes(c)->includes(a);
           a.type = t;) {
        realize fa:NonLeafAttribute |
        fa.attribute := a;
        fa.owner := fao;
        fa.kind := a.kind;
        fa.name := a.name;
        fa.leafs := fao.fromAttributes.leafs;
    }
}


map complexAttributePrimitiveAttributes_LM in umlRdbms {
    uml (c:Class, ca:Attribute, t:PrimitiveDataType, a:Attribute |) { }
    enforce middle (fao:NonLeafAttribute, p2n:PrimitiveToName |) { }
    where (fao.attribute=ca;
           p2n.primitive=t;
           a.owner = c;
        -- getAllAttributes(c)->includes(a);
           a.type = t;
           ca.type=c;) {
        realize fa:AttributeToColumn |
        fa.attribute := a;
        fa.owner := fao;
        fa.type := p2n;
        fa.kind := a.kind;
        fa.name := ca.name + '_' + a.name;
        fa.leafs := Set(AttributeToColumn) {fa};
    }
}

map complexAttributeComplexAttributes_LM in umlRdbms {
    uml (c:Class, ca:Attribute, t:Class, a:Attribute |) { }
    enforce middle (fao:NonLeafAttribute |) { }
    where (fao.attribute=ca;
           a.owner = c;
        -- getAllAttributes(c)->includes(a);
           a.type = t;
           ca.type = c;) {
        realize fa:NonLeafAttribute |
        fa.attribute := a;
        fa.owner := fao;
        fa.kind := a.kind;
        fa.name := ca.name + '_' + a.name;
        fa.leafs := fao.fromAttributes.leafs;
    }
}

map attributeColumns_MR in umlRdbms {
    middle (c2t:ClassToTable, p2n:PrimitiveToName, a2c:AttributeToColumn) {
    }
    enforce rdbms (t:Table, ct:String |) {
        realize c:Column |
    }
    where (c2t.table = t;
           c2t.fromAttributes.leafs->includes(a2c);
           a2c.owner = c2t;
           p2n.typeName = ct;
           a2c.type := p2n;) {
        a2c.column := c;
        c.name := a2c.name;
        c.kind := a2c.kind;
        c.owner := t;
        c.type := ct;
    }
}