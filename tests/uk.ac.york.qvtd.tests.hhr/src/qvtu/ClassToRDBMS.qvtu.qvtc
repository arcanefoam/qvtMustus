import SimpleUML: '../../model/SimpleUML.ecore'::simpleuml;
import SimpleRDBMS: '../../model/SimpleRDBMS.ecore'::simplerdbms;
import UMLtoRDBMS: '../../model/UMLtoRDBMS.ecore'::umltordbms;


/*
 * QVTu refactoring, RDBMS chosen as target direction and with create.
 */
transformation umlRdbms {
    uml imports SimpleUML;
    rdbms imports SimpleRDBMS;
    imports UMLtoRDBMS;
}

map packageToSchema in umlRdbms {
    uml () {
        p:Package |
    }
    enforce rdbms () {
        realize s:Schema |
    }
    where () {
        realize p2s:PackageToSchema |
        p2s.umlPackage := p;
        p2s.schema := s;
    }
    map {
        where () {
            p2s.name := p.name;
            s.name := p2s.name;
        }
    }
}

map primitiveToName in umlRdbms {
    uml (p:Package |) {
        prim:PrimitiveDataType |
        prim.namespace = p;
    }
    enforce rdbms () {
        sqlType:String |
    }
    where (p2s:PackageToSchema| p2s.umlPackage=p;) {
        realize p2n:PrimitiveToName |
        p2n.owner := p2s;
        p2n.primitive := prim;
    }
    map {
        where () {
            p2n.name := prim.name + '2' + sqlType;		-- What to do when a predicate in M uses L and R?
        }
    }
}

map integerToNumber in umlRdbms refines primitiveToName {
    uml () {
        prim.name = 'Integer';
    }
    enforce rdbms () {
        sqlType := 'NUMBER';
    }
}

map booleanToBoolean in umlRdbms refines primitiveToName {
    uml () {
        prim.name = 'Boolean';
    }
    enforce rdbms () {
        sqlType := 'BOOLEAN';
    }
}

map stringToVarchar in umlRdbms refines primitiveToName {
    uml () {
        prim.name = 'String';
    }
    enforce rdbms () {
        sqlType := 'VARCHAR';
    }
}

-- utility functions for flattening   
map flattening in umlRdbms {
}

query umlRdbms::getAllSupers(cls : SimpleUML::Class) : Set(SimpleUML::Class) {
	cls.general->collect(gen | getAllSupers(gen))->including(cls)->asSet()
}

query umlRdbms::getAllAttributes(cls :  SimpleUML::Class) : Set( SimpleUML::Attribute) {
    getAllSupers(cls)->collect(c | c.attributes)
}
    
query umlRdbms::getAllForwards(cls :  SimpleUML::Class) : Set( SimpleUML::Association) {
    getAllSupers(cls)->collect(c | true)
}

 map classToTable in umlRdbms {
    uml (p:Package |) {
        c:Class |
        c.kind = 'persistent';
        c.namespace = p;
    }
    enforce rdbms (s:Schema |) {
        realize t:Table |
        t.kind := 'base';
        t.schema := s;
    }
    where (p2s:PackageToSchema | p2s.umlPackage=p; p2s.schema=s;) {
        realize c2t:ClassToTable |
        c2t.owner := p2s;
        c2t.umlClass := c;
        c2t.table := t;
    }
    map {
        where () {
            c2t.name := c.name;
            t.name := c2t.name;
        }
    }
    map {
        enforce rdbms () {
            realize pk:Key,
            realize pc:Column |
            pk.owner := t;
            pk.kind := 'primary';
            pc.owner := t;
            pc.key := Set(Key){pk};
            pc.type := 'NUMBER';
        }
        where () {
            c2t.primaryKey := pk;
            c2t.column := pc;
        }
        map {
            check enforce rdbms () {
                pc.name := t.name+'_tid';
                pk.name := t.name+'_pk';
            }
        }
    }
}

map associationToForeignKey in umlRdbms refines flattening {
    uml (p:Package, sc:Class, dc:Class | sc.namespace = p;) {
        a:Association |
        -- getAllForwards(sc)->includes(a);
        a.source = sc;
        -- getAllSupers(dc)->includes(a.destination);
        a.destination = dc;
        a.namespace = p;
    }
    enforce rdbms (s:Schema, st:Table, dt:Table, rk:Key |
	        st.schema = s;
	        rk.owner = dt;
	        rk.kind = 'primary';) {
        realize fk:ForeignKey,
        realize fc:Column |
        fk.owner := st;
        fc.owner := st;
        fk.refersTo := rk;
        fc.foreignKeys := Set(ForeignKey){fk};
    }
    where (p2s:PackageToSchema, sc2t:ClassToTable, dc2t:ClassToTable |
	        sc2t.owner = p2s;
	        p2s.umlPackage = p;
	        p2s.schema = s;
	        sc2t.table = st;
	        dc2t.table = dt;
	        sc2t.umlClass = sc;
	        dc2t.umlClass = dc; ) {
        realize a2f:AssociationToForeignKey|
        a2f.owner := sc2t;
        a2f.referenced := dc2t;
        a2f.association := a;
        a2f.foreignKey := fk;
        a2f.column := fc;
    }
    map {
        where () {
            a2f.name := if a.destination=dc and a.source=sc
                        then a.name
                        else if a.destination<>dc and a.source=sc
                        then dc.name+'_'+a.name
                        else if a.destination=dc and a.source<>sc
                        then a.name+'_'+sc.name
                        else dc.name+'_'+a.name+'_'+sc.name
                        endif endif endif;
            fk.name := a2f.name;
            fc.name := a2f.name +'_tid';
        }
    }
    map {
        where () {
            fc.type := rk.column->first().type;
        }
    }
}

map attributes in umlRdbms refines flattening {
    uml (c:Class |) {
        a:Attribute |
        a.owner = c;
        --getAllAttributes(c)->includes(a);
    }
    where (fao:FromAttributeOwner |) {
        realize fa : FromAttribute |
        fa.attribute := a;
        fa.owner := fao;
    }
    map {
        where () {
            fa.kind := a.kind;
        }
    }
}

map classAttributes in umlRdbms refines attributes {
    where (fao:ClassToTable | fao.umlClass = c;) {}
    map {
        where () {
            fa.name := a.name;
        }
    }
}

map primitiveAttribute in umlRdbms refines attributes {
    uml (t:PrimitiveDataType |) {
        a.type = t;
    }
    where (p2n:PrimitiveToName | p2n.primitive = t;) {
        realize fa:AttributeToColumn |
        fa.type := p2n;
    }
    map {
        where () {
            fa.leafs := Set(AttributeToColumn) {fa};
        }
    }
}

map complexAttributeAttributes in umlRdbms refines attributes {
    uml (ca:Attribute | ca.type = c;) {}
    where (fao:NonLeafAttribute | fao.attribute=ca;) {}
    map {
        where () {
            fa.name := ca.name + '_' + a.name;
        }
    }
}

map complexAttribute in umlRdbms refines attributes {
    uml (t:Class |) {
        a.type = t;
    }
    where () {
        realize fa:NonLeafAttribute |
    }
    map {           
    	where () {
    		fa.leafs := fao.fromAttributes.leafs; 
        }
    }
}

map classPrimitiveAttributes in umlRdbms refines classAttributes, primitiveAttribute {}
map classComplexAttributes in umlRdbms refines classAttributes, complexAttribute {}
map complexAttributePrimitiveAttributes in umlRdbms refines complexAttributeAttributes, primitiveAttribute {}
map complexAttributeComplexAttributes in umlRdbms refines complexAttributeAttributes, complexAttribute {}

map attributeColumns in umlRdbms {
    enforce rdbms (t:Table |) {
        realize c:Column |
        c.owner := t;
    }
    where (c2t:ClassToTable | c2t.table=t;) {
        realize a2c:AttributeToColumn |
        a2c.column := c;
        c2t.fromAttributes.leafs->includes(a2c);
        a2c.owner := c2t;
    }
    map {
        enforce rdbms (ct:String |) {
            c.type := ct;
        }
        where (p2n:PrimitiveToName |) {
            a2c.type := p2n;
            p2n.typeName := ct;
        }
    }
    map {
        where () {
            c.name := a2c.name;
        }
    }
    map {
        where () {
            a2c.kind := c.kind;
        }
    }
}
