import SimpleUML: '../../model/SimpleUML.ecore'::simpleuml;
import SimpleRDBMS: '../../model/SimpleRDBMS.ecore'::simplerdbms;
import UMLtoRDBMS: '../../model/UMLtoRDBMS.ecore'::umltordbms;


transformation umlRdbms {
    uml imports SimpleUML;
    rdbms imports SimpleRDBMS;
    imports UMLtoRDBMS;
}

map packageToSchemaLM in umlRdbms {
    uml (p:Package |) {
    }
    where () {
        realize p2s:PackageToSchema |
        p2s.umlPackage := p;
        p2s.name := p.name;
    }
    -- A package has Classifiers and Associations, classifiers can be Classes or PrmitiveDataTypes
    -- PrmitiveDataTypes
    map integerToNumberLM {
    	ns := p;
    	prim := p.elements;		-- Filter by PrmitiveDataTypes type?
    }
    map booleanToBooleanLM {
    	ns := p;
    	prim := p.elements;
    }
    map stringToVarcharLM {
    	ns := p;
    	prim := p.elements;
    }
    -- Classes
    map classToTableLM {
    	ns := p;
    	c := p.elements;		-- Filter by Class type? p.elements->select(e | e.oclIsTypeOf(SimpleUML::Class))
    	owner := p2s;
    }
    -- Associations
    map associationToForeignKeyLM {
    	a := p.elements;
    	ns := p; 
    	sc := ??;
    	dc := ??;
    	p2s := ??;
    	sc2t := ??;
    	dc2t := ??;
    }
}

map packageToSchemaMR in umlRdbms {
    enforce rdbms () {
        realize s:Schema |
    }
    where (p2s:PackageToSchema |) {
        p2s.schema := s;
    }
    map packageToSchemaMR_1 {
    	s2 := s;
    	p2s2 := p2s;
    }
}

map packageToSchemaMR_1 in umlRdbms {
	rdbms (s2:Schema |) {}
    where (p2s2:PackageToSchema |) {
        s2.name := p2s2.name;
    }
}

map integerToNumberLM in umlRdbms {
    uml (ns:Package, prim:PrimitiveDataType |
    	prim.namespace = ns;
        prim.name = 'Integer';) {}
    where (p2s:PackageToSchema | p2s.umlPackage=ns;) {
        realize p2n:PrimitiveToName |
        p2n.owner := p2s;
        p2n.primitive := prim;
        p2n.name := prim.name + '2' + 'NUMBER';		
    }
}

map integerToNumberMR in umlRdbms {
    enforce rdbms () {
    	sqlType:String |
        sqlType := 'NUMBER';
    }
    where (p2s:PackageToSchema, p2n:PrimitiveToName |
    	p2n.owner = p2s;
        p2n.name = 'Integer' + '2' + 'NUMBER';) { }
}

map booleanToBooleanLM in umlRdbms {
     uml (ns:Package, prim:PrimitiveDataType |
        prim.namespace = ns;
        prim.name = 'Boolean';) {}
    where (p2s:PackageToSchema | p2s.umlPackage=ns;) {
        realize p2n:PrimitiveToName |
        p2n.owner := p2s;
        p2n.primitive := prim;
        p2n.name := prim.name + '2' + 'BOOLEAN';
    }
}

map booleanToBooleanMR in umlRdbms {
    enforce rdbms () {
    	sqlType:String |
        sqlType := 'BOOLEAN';
    }
    where (p2s:PackageToSchema, p2n:PrimitiveToName |
        p2n.owner = p2s;
        p2n.name = 'Boolean' + '2' + 'BOOLEAN';) { }
}

map stringToVarcharLM in umlRdbms {
     uml (ns:Package, prim:PrimitiveDataType |
        prim.namespace = ns;
        prim.name = 'String';) { }
    where (p2s:PackageToSchema | p2s.umlPackage=ns;) {
        realize p2n:PrimitiveToName |
        p2n.owner := p2s;
        p2n.primitive := prim;
        p2n.name := prim.name + '2' + 'VARCHAR';
    }
}

map stringToVarcharMR in umlRdbms {
    enforce rdbms () {
    	sqlType:String |
        sqlType := 'VARCHAR';
    }
    where (p2s:PackageToSchema, p2n:PrimitiveToName |
        p2n.owner = p2s;
        p2n.name = 'String' + '2' + 'VARCHAR';  ) { }
}

query umlRdbms::getAllSupers(cls : SimpleUML::Class) : Set(SimpleUML::Class) {
	cls.general->collect(gen | getAllSupers(gen))->including(cls)->asSet()
}

query umlRdbms::getAllAttributes(cls :  SimpleUML::Class) : Set( SimpleUML::Attribute) {
    getAllSupers(cls)->collect(c | c.attribute)
}
    
query umlRdbms::getAllForwards(cls :  SimpleUML::Class) : Set( SimpleUML::Association) {
    getAllSupers(cls)->collect(c | true)
}


map classToTableLM in umlRdbms {
    uml (ns:Package, c:Class |
        c.kind = 'persistent';
        c.namespace = ns; ) { }
    where (owner:PackageToSchema | owner.umlPackage=ns;) {
        realize c2t:ClassToTable |
        c2t.owner := owner;
        c2t.umlClass := c;
        c2t.name := c.name;
    }
}

map classToTableMR in umlRdbms {
    enforce rdbms (s:Schema |) {
        realize t:Table |
        t.kind <> 'meta';
        t.kind := 'base';
        t.schema := s;
    }
    where (p2s:PackageToSchema | p2s.schema=s;) {
        c2t:ClassToTable |
        c2t.owner = p2s;
    }
   	map classToTableMR_1 {
    	c2t2 := c2t;
    	t2 := t;
    }
    map classToTableMR_2 {
        c2t2 := c2t;
    	t2 := t;
    }
    map classToTableMR_3 {
    	t3 := t;
    	c2t3 := c2t;
    }
}

map classToTableMR_1  in umlRdbms {
	rdbms (t2:Table |) {}
    where (c2t2:ClassToTable |) {
        c2t2.table := t2;
    }
}

map classToTableMR_2 in umlRdbms  {
	rdbms (t2:Table |) {}
    where (c2t2:ClassToTable |) {
        t2.name := c2t2.name;
    }
}

map classToTableMR_3 in umlRdbms  {
    enforce rdbms (t3:Table |) {
        realize pk:Key,
        realize pc:Column |
        pk.owner := t3;
        pk.kind := 'primary';
        pc.owner := t3;
        pc.key->includes(pk);
        pc.key := Set(Key){pk};
        pc.type := 'NUMBER';
    }
    where (c2t3:ClassToTable |) {
        -- c2t.column := pc; // TODO Check this
    }
    map classToTableMR_3_1 {
		c2t2 := c2t3;
		pk2 := pk;
    }
    map classToTableMR_3_2 {
    	t2 := t3;
    	pk2 := pk;
    	pc2 := pc;
    }
}

map classToTableMR_3_1 in umlRdbms  {
	rdbms (pk2:Key |) {}
	where (c2t2:ClassToTable |) {
		c2t2.primaryKey := pk2;
	}
}

map classToTableMR_3_2 in umlRdbms  {
    check enforce rdbms (t2:Table, pk2:Key, pc2:Column |) {
        pc2.name := t2.name+'_tid';
        pk2.name := t2.name+'_pk';
    }
}


map associationToForeignKeyLM in umlRdbms {
    uml (ns:Package, sc:Class, dc:Class, a:Association |
    	sc.namespace = ns;
        -- getAllForwards(sc)->includes(a);
        a.source = sc;
        -- getAllSupers(dc)->includes(a.destination);
        a.destination = dc;
        a.namespace = p;) { }
    where (p2s:PackageToSchema, sc2t:ClassToTable, dc2t:ClassToTable |
	        sc2t.owner = p2s;
	        p2s.umlPackage = ns;
	        sc2t.umlClass = sc;
	        dc2t.umlClass = dc; ) {
        realize a2f:AssociationToForeignKey|
        a2f.owner := sc2t;
        a2f.referenced := dc2t;
        a2f.association := a;
        -- a2f.column := fc;	// TODO Check this
        a2f.name := if a.destination=dc and a.source=sc
                        then a.name
                        else if a.destination<>dc and a.source=sc
                        then dc.name+'_'+a.name
                        else if a.destination=dc and a.source<>sc
                        then a.name+'_'+sc.name
                        else dc.name+'_'+a.name+'_'+sc.name
                        endif endif endif;
    }
}

map associationToForeignKeyMR in umlRdbms {
    enforce rdbms (s:Schema, st:Table, dt:Table, rk:Key |
	        st.schema = s;
	        rk.owner = dt;
	        rk.kind = 'primary';) {
        realize fk:ForeignKey,
        realize fc:Column |
        fk.owner := st;
        fc.owner := st;
        fk.refersTo := rk;
        fc.foreignKeys->includes(fk);
        fc.foreignKeys := Set(ForeignKey){fk};
        fc.type := rk.column->first().type;
    }
    where (p2s:PackageToSchema, sc2t:ClassToTable, dc2t:ClassToTable |
	        sc2t.owner = p2s;
	        p2s.schema = s;
	        sc2t.table = st;
	        dc2t.table = dt; ) {
        a2f:AssociationToForeignKey |
        a2f.owner = sc2t;
        a2f.referenced = dc2t;
        -- a2f.column := fc;	// TODO Check this
    }
    map associationToForeignKeyMR_1 {
    	a2f2 := a2f;
    	fk2 := fk;
    }
    map associationToForeignKeyMR_2 {
        fk2 := fk;
        fc2 := fc.name;
        a2f2 := a2f;
    }
}

map associationToForeignKeyMR_1 in umlRdbms  {
	rdbms (fk2:ForeignKey |) {}
	where (a2f2:AssociationToForeignKey |) {
		 a2f2.foreignKey := fk2;
	}
}

map associationToForeignKeyMR_2 in umlRdbms  {
	rdbms (fk2:ForeignKey, fc2:Column |) {}
    where (a2f2:AssociationToForeignKey |) {
        fk2.name := a2f2.name;
        fc2.name := a2f2.name +'_tid';
    }
}


map classPrimitiveAttributesLM in umlRdbms {
	uml (c:Class, t:PrimitiveDataType |) {
        a:Attribute |
        a.owner = c;
        --getAllAttributes(c)->includes(a);
        a.type = t;
    }
    where (ctt:ClassToTable, p2n:PrimitiveToName |
    		ctt.umlClass=c;
    		p2n.primitive=t ;) {
        realize atc:AttributeToColumn |
        atc.attribute := a;
        atc.owner := ctt;
        atc.type := p2n;
        atc.kind := a.kind;
        atc.name := a.name;
        atc.leafs := Set(AttributeToColumn) {atc};
    }
}


map classComplexAttributesLM in umlRdbms {
	uml (c:Class, t:Class |) {
        a:Attribute |
        a.owner = c;
        --getAllAttributes(c)->includes(a);
         a.type = t;
    }
    where (ctt:ClassToTable | ctt.umlClass=c;) {
        realize la:NonLeafAttribute |
        la.attribute := a;
        la.owner := ctt;
        la.kind := a.kind;
        la.name := a.name;
        la.attribute = t;	-- TODO check the whole attribute rules
        -- la.leafs := fromAttributes.leafs; // TODO check this OCL?
    }
}


map complexAttributePrimitiveAttributesLM in umlRdbms {
	uml (c:Class, ca:Attribute, t:PrimitiveDataType |
			ca.type=c;) {
    	a:Attribute |
    	a.owner = c;
        --getAllAttributes(c)->includes(a);
         a.type = t;
    }
    where (nla:NonLeafAttribute, p2n:PrimitiveToName |
    		nla.attribute=ca;
    		p2n.primitive=t ;) {
    	realize atc:AttributeToColumn |
        atc.attribute := a;
        atc.owner := nla;	
        atc.type := p2n;
        atc.kind := a.kind;
        atc.name := ca.name + '_' + a.name;
        atc.leafs := Set(AttributeToColumn) {atc};
    }
}

map complexAttributeComplexAttributesLM in umlRdbms {
	uml (c:Class, ca:Attribute, t:Class | ca.type=c;) {
    	a:Attribute |
    	a.owner = c;
        --getAllAttributes(c)->includes(a);
        a.type = t;
    }
    where (nla:NonLeafAttribute |
    		nla.attribute=ca;) {
    	realize la:NonLeafAttribute |
        la.attribute := a;
        la.owner := nla;	
        la.kind := a.kind;
        la.name := ca.name + '_' + a.name;
        la.attribute = t;	-- TODO check the whole attribute rules
        -- la.leafs := fromAttributes.leafs; // TODO check this OCL?
    }
}


map attributeColumnsMR in umlRdbms {
    enforce rdbms (t:Table |) {
        realize c:Column |
        c.owner := t;
        c.key->size()=0;
        c.foreignKeys->size()=0;
    }
    where (c2t:ClassToTable | c2t.table=t;) {
        a2c:AttributeToColumn |
        c2t.fromAttributes.leafs->includes(a2c);
        a2c.owner = c2t;
    }
    map attributeColumnsMR_1 {
    	a2c2 := a2c;
    	c2 := c;
    }
    map attributeColumnsMR_2 {
    	--ct2 := ct;			-- Where is ct?
    	--p2n2 := p2n;		-- Where is p2n?
    	c2 := c;
    	a2c2 := a2c;
    }
    map attributeColumnsMR_3 {
       	a2c2 := a2c;
    	c2 := c;
    }
    map attributeColumnsMR_4 {
        a2c2 := a2c;
    	c2 := c;
    }
}

map attributeColumnsMR_1 in umlRdbms  {
	rdbms (c2:Column |) {}
	where (a2c2:AttributeToColumn |) {
		a2c2.column := c2;
	}
}

map attributeColumnsMR_2 in umlRdbms  {
    enforce rdbms (ct2:String, c2:Column |) {
        c2.type := ct2;
    }
    where (p2n2:PrimitiveToName, a2c2:AttributeToColumn |
    		a2c2.type = p2n2;) {
    	p2n2.typeName := ct2;
    }
}

map attributeColumnsMR_3 in umlRdbms  {
	rdbms (c2:Column |) {}
    where (a2c2:AttributeToColumn | ) {
        c2.name := a2c2.name;
    }
}

map attributeColumnsMR_4 in umlRdbms  {
	rdbms (c2:Column |) {}
    where (a2c2:AttributeToColumn |) {
        c2.kind := a2c2.kind;
    }
}
