import Family : 			'../../model/Family.ecore'::family;
import FamilyTree : 		'../../model/FamilyTree.ecore'::familyTree;
import FamilyToPedigree : 	'../../model/FamilyToPedigree.ecore'::familyToPedigree;

transformation pedigreeChart {
	family imports Family;
	familyTree imports FamilyTree;
	imports familyToPedigree;
}

map familyToTree in pedigreeChart {
	family () {
		f:Family |
	}
	familyTree() {
		t:FamilyTree |
	}
	where () {
		realize faToTree:FamilyToTree |
		faToTree.family = f;
		faToTree.familyTree = t;
	}
}

map FatherToMale in pedigreeChart {
	check enforce family (f:Family |) {
		realize member:Member |
		member.familyFather = f;
	}
	check enforce familyTree(t:FamilyTree |) {
		realize male:Male |
		male.tree := t;
 	}
 	where (faToTree:FamilyToTree | faToTree.family = f; faToTree.familyTree = t;) {
 		realize f2m:MemberToMale |
 		f2m.owner := faToTree;
 		f2m.member := member;
 		f2m.male = male;
 	}
 	map {
 		where () {
 			f2m.lastName := f.lastName;
 			f2m.lastName := male.lastName;
 			f.lastName := f2m.lastName;
 			male.lastName := f2m.lastName;
 			f2m.name := member.name;
 			f2m.name := male.name;
 			member.name := f2m.name;
 			male.name := f2m.name;
 		}
 	}
 	map {
 		check family () {
			mother:Member |
			mother.familyMother = f;
		}
 		check familyTree () {
			wife:Female |
		}
		where () {
			mToFem:MemberToFemale |
			mToFem.owner = faToTree;
			mToFem.member = mother;
			mToFem.female = wife;
		}
		map {
			where () {
				mToFem.husband := male;
				f2m.wife := male.wife;
				male.wife := f2m.wife;
			}
		}
 	}
}
