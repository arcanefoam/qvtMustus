/**
* Essential OCL Lexer
* <copyright>
*
* Copyright (c) 2005, 2009 IBM Corporation and others.
* All rights reserved.   This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*   IBM - Initial API and implementation
*   E.D.Willink - Lexer and Parser refactoring to support extensibility and flexible error handling
*   Borland - Bug 242880
*   E.D.Willink - Bug 292112
* </copyright>
*
* $Id: QVTrLexerprs.java,v 1.12 2009/10/21 07:49:02 ewillink Exp $
*/

package org.eclipse.qvt.declarative.parser.qvtrelation;

public class QVTrLexerprs implements lpg.lpgjavaruntime.ParseTable, QVTrLexersym {

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static byte baseCheck[] = {0,
            1,1,3,3,3,1,2,2,1,1,
            5,1,1,1,1,1,1,1,1,1,
            1,2,2,2,1,1,1,1,2,1,
            1,1,2,1,1,1,1,2,1,1,
            2,2,3,2,2,0,1,2,2,2,
            1,2,3,2,3,3,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            2,1,2,2,2,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,2,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,2,
            2,1,2,1,2,0,1,3,2,2
        };
    };
    public final static byte baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static byte rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            23,23,23,23,23,23,23,23,23,23,
            23,23,23,23,23,23,23,23,23,23,
            23,23,23,23,23,23,23,23,23,23,
            23,23,23,23,23,23,14,23,15,25,
            26,26,26,28,28,28,28,29,29,27,
            27,7,7,31,16,16,16,11,11,11,
            11,11,2,2,2,2,3,3,3,3,
            3,3,3,3,3,3,3,3,3,3,
            3,3,3,3,3,3,3,3,3,3,
            3,3,4,4,4,4,4,4,4,4,
            4,4,4,4,4,4,4,4,4,4,
            4,4,4,4,4,4,4,4,1,1,
            1,1,1,1,1,1,1,1,18,18,
            30,30,24,24,24,24,24,34,34,34,
            34,34,34,34,34,34,34,34,34,34,
            34,34,34,34,34,34,34,34,34,34,
            34,34,34,34,34,34,34,19,19,19,
            19,19,19,19,19,19,19,19,19,19,
            19,19,19,19,19,19,19,19,19,19,
            19,19,19,19,19,19,5,5,5,5,
            5,5,5,5,5,5,5,5,5,5,
            5,5,5,5,5,5,5,5,5,5,
            5,5,5,5,20,20,8,8,35,35,
            35,35,9,17,17,17,17,32,32,32,
            32,32,32,32,32,36,36,36,36,21,
            21,21,21,21,10,10,10,10,10,10,
            6,22,37,37,12,12,13,13,33,23,
            27,988,408,403,403,403,1196,2,364,1236,
            52,1296,415,1066,304,35,37,1091,134,133,
            133,133,1185,279,276,287,402,9,422,279,
            1087,435,418,1294,420,309,428,428,428,428,
            428,428,390,428,428,428,1298,352,340,309,
            428,428,428,428,428,428,1292,428,428,428,
            1183,352,359,406,369,369,369,369,369,369,
            100,369,369,369,1300,369,891,384,384,384,
            384,384,600,265,265,265,265,265,265,1197,
            265,265,265,1301,1170,52,384,384,384,697,
            265,265,265,265,265,265,1302,265,265,265,
            42,1303,292,384,794,263,263,263,263,263,
            1,45,45,45,45,503,232,232,232,232,
            232,45,1297,1306,263,263,263,45,1307,45,
            103,43,43,43,43,1308,7,8,1293,410,
            1309,43,205,50,50,50,50,43,1315,43,
            232,232,1203,442,41,1291,292,1214,448,442,
            1225,450,1247,52,448,459,131,450,1258,52,
            1269,52,459,459,50,459,50,459,459
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,1,2,3,4,5,6,7,8,9,
            10,11,12,13,14,15,16,17,18,19,
            20,21,22,23,24,25,26,27,28,29,
            30,31,32,33,34,35,36,37,38,39,
            40,41,42,43,44,45,46,47,48,49,
            50,51,52,53,54,55,56,57,58,59,
            60,61,62,63,64,65,66,67,68,69,
            70,71,72,73,74,75,76,77,78,79,
            80,81,82,83,84,85,86,87,88,89,
            90,91,92,93,94,95,96,97,98,0,
            100,101,0,1,2,3,4,5,6,7,
            8,9,10,11,12,13,14,15,16,17,
            18,19,20,21,22,23,24,25,26,27,
            28,29,30,31,32,33,34,35,36,37,
            38,39,40,41,42,43,44,45,46,47,
            48,49,50,51,52,53,54,55,56,57,
            58,59,60,61,62,63,64,65,66,67,
            68,69,70,71,72,73,74,75,76,77,
            78,79,80,81,82,83,84,85,86,87,
            88,89,90,91,92,93,94,95,96,97,
            98,102,100,101,0,1,2,3,4,5,
            6,7,8,9,10,11,12,13,14,15,
            16,17,18,19,20,21,22,23,24,25,
            26,27,28,29,30,31,32,33,34,35,
            36,37,38,39,40,41,42,43,44,45,
            46,47,48,49,50,51,52,53,54,55,
            56,57,58,59,60,61,62,63,64,65,
            66,67,68,69,70,71,72,73,74,75,
            76,77,78,79,80,81,82,83,84,85,
            86,87,88,89,90,91,92,93,94,95,
            96,97,98,0,0,0,0,103,0,1,
            2,3,4,5,6,7,8,9,10,11,
            12,13,14,15,16,17,18,19,20,21,
            22,23,24,25,26,27,28,29,30,31,
            32,33,34,35,36,37,38,39,40,41,
            42,43,44,45,46,47,48,49,50,51,
            52,53,54,55,56,57,58,59,60,61,
            62,63,64,65,66,67,68,69,70,71,
            72,73,74,75,76,77,78,79,80,81,
            82,83,84,85,86,87,88,89,90,91,
            92,93,94,95,96,0,1,2,3,4,
            5,6,7,8,9,10,11,12,13,14,
            15,16,17,18,19,20,21,22,23,24,
            25,26,27,28,29,30,31,32,33,34,
            35,36,37,38,39,40,41,42,43,44,
            45,46,47,48,49,50,51,52,53,54,
            55,56,57,58,59,60,61,62,63,64,
            65,66,67,68,69,70,71,72,73,74,
            75,76,77,78,79,80,81,82,83,84,
            85,86,87,88,89,90,91,92,93,94,
            95,96,0,1,2,3,4,5,6,7,
            8,9,10,11,12,13,14,15,16,17,
            18,19,20,21,22,23,24,25,26,27,
            28,29,30,31,32,33,34,35,36,37,
            38,39,40,41,42,43,44,45,46,47,
            48,49,50,51,52,53,54,55,56,57,
            58,59,60,61,62,63,64,65,66,67,
            68,69,70,71,72,73,74,75,76,77,
            78,79,80,81,82,83,84,85,86,87,
            88,89,90,91,92,93,94,95,96,0,
            1,2,3,4,5,6,7,8,9,10,
            11,12,13,14,15,16,17,18,19,20,
            21,22,23,24,25,26,27,28,29,30,
            31,32,33,34,35,36,37,38,39,40,
            41,42,43,44,45,46,47,48,49,50,
            51,52,53,54,55,56,57,58,59,60,
            61,62,63,64,65,66,67,68,69,70,
            71,72,73,74,75,76,77,78,79,80,
            81,82,83,84,85,86,87,88,89,90,
            91,92,93,94,95,96,0,1,2,3,
            4,5,6,7,8,9,10,11,12,13,
            14,15,16,17,18,19,20,21,22,23,
            24,25,26,27,28,29,30,31,32,33,
            34,35,36,37,38,39,40,41,42,43,
            44,45,46,47,48,49,50,51,52,53,
            54,55,56,57,58,59,60,61,62,63,
            64,65,66,67,68,69,70,71,72,73,
            74,75,76,77,78,79,80,81,82,83,
            84,85,86,87,88,89,90,91,92,93,
            94,95,96,0,1,2,3,4,5,6,
            7,8,9,10,11,12,13,14,15,16,
            17,18,19,20,21,22,23,24,25,26,
            27,28,29,30,31,32,33,34,35,36,
            37,38,39,40,41,42,43,44,45,46,
            47,48,49,50,51,52,53,54,55,56,
            57,58,59,60,61,62,63,64,65,66,
            67,68,69,70,71,72,73,74,75,76,
            77,78,79,80,81,82,83,84,85,86,
            87,88,89,90,91,92,93,94,95,96,
            0,1,2,3,4,5,6,7,8,9,
            10,11,12,13,14,15,16,17,18,19,
            20,21,22,23,24,25,26,27,28,29,
            30,31,32,33,34,35,36,37,38,39,
            40,41,42,43,44,45,46,47,48,49,
            50,51,52,53,54,55,56,57,58,59,
            60,61,62,63,64,65,66,67,68,69,
            70,71,72,73,74,0,76,77,78,79,
            80,81,82,83,84,85,86,87,88,89,
            90,91,92,93,94,95,96,0,1,2,
            3,4,5,6,7,8,9,10,11,12,
            13,14,15,16,17,18,19,20,21,22,
            23,24,25,26,27,28,29,30,31,32,
            33,34,35,36,37,38,39,40,41,42,
            43,44,45,46,47,48,49,50,51,52,
            53,54,55,56,57,58,59,60,61,62,
            63,64,65,66,67,68,69,70,71,72,
            73,74,75,76,77,0,79,80,81,82,
            83,84,85,86,87,0,0,0,0,0,
            15,0,0,18,97,98,0,100,101,102,
            0,1,2,3,4,5,6,7,8,9,
            10,11,12,0,18,0,0,0,0,19,
            20,21,22,23,24,25,26,27,28,29,
            30,31,32,33,34,35,36,37,38,39,
            40,41,42,43,44,45,46,47,48,49,
            50,51,52,53,54,55,56,57,58,59,
            60,61,62,63,64,65,66,67,68,69,
            70,0,0,0,0,0,0,0,78,0,
            1,2,3,4,5,6,7,8,9,10,
            11,12,0,14,0,1,2,3,4,5,
            6,7,8,9,10,0,0,15,0,17,
            16,17,0,1,2,3,4,5,6,7,
            8,9,10,0,1,2,3,4,5,6,
            7,8,9,10,0,1,2,3,4,5,
            6,7,8,9,10,0,1,2,3,4,
            5,6,7,8,9,10,0,1,2,3,
            4,5,6,7,8,9,10,0,1,2,
            3,4,5,6,7,8,9,10,0,1,
            2,3,4,5,6,7,8,9,10,0,
            1,2,3,4,5,6,7,8,9,10,
            0,0,0,0,99,0,0,0,102,0,
            0,0,0,11,12,0,0,0,0,16,
            14,14,13,13,0,13,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,71,0,0,73,74,0,72,0,0,
            0,0,0,0,0,0,75,0,0,0,
            0,0,0,0,0,0,0,97,98,0,
            100,101,0,0,0,0,0,0,0,0,
            0,0,0,0,99,99,99,99,0,0,
            0,0,0,0,0,0,102,0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            459,504,504,504,504,504,504,504,504,504,
            504,504,504,504,504,504,504,504,504,504,
            504,504,504,504,504,504,504,504,504,504,
            504,504,504,504,504,504,504,504,504,504,
            504,504,504,504,504,504,504,504,504,504,
            504,504,504,504,504,504,504,504,504,504,
            504,504,504,504,504,504,504,504,504,504,
            504,504,504,503,410,504,504,504,504,504,
            504,504,504,504,504,504,504,504,504,504,
            504,504,504,504,504,504,504,504,504,459,
            504,504,459,502,502,502,502,502,502,502,
            502,502,502,502,502,502,502,502,502,502,
            502,502,502,502,502,502,502,502,502,502,
            502,502,502,502,502,502,502,502,502,502,
            502,502,502,502,502,502,502,502,502,502,
            502,502,502,502,502,502,502,502,502,502,
            502,502,502,502,502,502,502,502,502,502,
            502,502,502,502,502,470,507,502,502,502,
            502,502,502,502,502,502,502,502,502,502,
            502,502,502,502,502,502,502,502,502,502,
            502,464,502,502,10,509,509,509,509,509,
            509,509,509,509,509,509,509,509,509,509,
            509,509,509,509,509,509,509,509,509,509,
            509,509,509,509,509,509,509,509,509,509,
            509,509,509,509,509,509,509,509,509,509,
            509,509,509,509,509,509,509,509,509,509,
            509,509,509,509,509,509,509,509,509,509,
            509,509,509,509,509,509,509,509,509,509,
            509,509,509,509,509,509,509,509,509,509,
            509,509,509,509,509,509,509,509,509,509,
            509,509,509,46,459,459,459,509,266,428,
            428,428,428,428,428,428,428,428,428,428,
            428,344,428,428,428,428,428,428,428,428,
            428,428,428,428,428,428,428,428,428,428,
            428,428,428,428,428,428,428,428,428,428,
            428,428,428,428,428,428,428,428,428,428,
            428,428,428,428,428,428,428,428,428,428,
            428,428,428,428,428,428,428,428,428,428,
            428,428,428,428,428,428,428,428,428,428,
            428,428,428,428,428,428,428,428,428,428,
            428,428,428,395,428,459,369,369,369,369,
            369,369,369,369,369,369,369,369,363,369,
            369,369,369,369,369,369,369,369,369,369,
            369,369,369,369,369,369,369,369,369,369,
            369,369,369,369,369,369,369,369,369,369,
            369,369,369,369,369,369,369,369,369,369,
            369,369,369,369,369,369,369,369,369,369,
            369,369,369,369,369,369,369,369,369,369,
            369,369,369,369,369,369,369,369,369,369,
            369,369,369,369,369,369,369,369,369,369,
            395,369,459,691,691,691,691,691,691,691,
            691,691,691,691,691,691,691,691,691,691,
            691,691,691,691,691,691,691,691,691,691,
            691,691,691,691,691,691,691,691,691,691,
            691,691,691,691,691,691,691,691,691,691,
            691,691,691,691,691,691,691,691,691,691,
            691,691,691,691,691,691,691,691,691,691,
            691,691,691,691,691,691,691,691,691,691,
            691,691,691,691,691,691,691,691,691,691,
            691,691,691,691,691,691,691,691,691,267,
            724,724,724,724,724,724,724,724,724,724,
            724,724,344,724,724,724,724,724,724,724,
            724,724,724,724,724,724,724,724,724,724,
            724,724,724,724,724,724,724,724,724,724,
            724,724,724,724,724,724,724,724,724,724,
            724,724,724,724,724,724,724,724,724,724,
            724,724,724,724,724,724,724,724,724,724,
            724,724,724,724,724,724,724,724,724,724,
            724,724,724,724,724,724,724,724,724,724,
            724,724,724,724,395,724,459,724,724,724,
            724,724,724,724,724,724,724,724,724,381,
            724,724,724,724,724,724,724,724,724,724,
            724,724,724,724,724,724,724,724,724,724,
            724,724,724,724,724,724,724,724,724,724,
            724,724,724,724,724,724,724,724,724,724,
            724,724,724,724,724,724,724,724,724,724,
            724,724,724,724,724,724,724,724,724,724,
            724,724,724,724,724,724,724,724,724,724,
            724,724,724,724,724,724,724,724,724,724,
            724,395,724,459,722,722,722,722,722,722,
            722,722,722,722,722,722,722,722,722,722,
            722,722,722,722,722,722,722,722,722,722,
            722,722,722,722,722,722,722,722,722,722,
            722,722,722,722,722,722,722,722,722,722,
            722,722,722,722,722,722,722,722,722,722,
            722,722,722,722,722,722,722,722,722,722,
            722,722,722,722,722,722,722,722,727,722,
            722,722,722,722,722,722,722,722,722,722,
            722,722,722,722,722,722,722,722,376,722,
            459,384,384,384,384,384,384,384,384,384,
            384,384,384,384,384,384,384,384,384,384,
            384,384,384,384,384,384,384,384,384,384,
            384,384,384,384,384,384,384,384,384,384,
            384,384,384,384,384,384,384,384,384,384,
            384,384,384,384,384,384,384,384,384,384,
            384,384,384,384,384,384,384,384,384,384,
            384,384,384,384,384,459,384,384,384,384,
            384,384,384,384,384,384,384,384,384,384,
            384,384,384,384,384,376,384,459,408,408,
            408,408,408,408,408,408,408,408,403,403,
            333,316,300,303,330,480,403,403,403,403,
            403,403,403,403,403,403,403,403,403,403,
            403,403,403,403,403,403,403,403,403,403,
            403,403,403,403,403,403,403,403,403,403,
            403,403,403,403,403,403,403,403,403,403,
            403,403,403,403,403,403,403,403,415,281,
            326,474,346,489,305,20,493,486,487,484,
            485,490,283,476,477,459,459,459,459,459,
            483,459,459,482,415,415,19,415,415,319,
            1,593,593,593,593,593,593,593,593,593,
            593,592,592,459,481,459,459,459,459,592,
            592,592,592,592,592,592,592,592,592,592,
            592,592,592,592,592,592,592,592,592,592,
            592,592,592,592,592,592,592,592,592,592,
            592,592,592,592,592,592,592,592,592,592,
            592,592,592,592,592,592,592,592,592,592,
            592,459,459,459,459,459,459,459,594,39,
            511,511,511,511,511,511,511,511,511,511,
            292,292,14,2009,459,279,279,279,279,279,
            279,279,279,279,279,459,459,488,459,508,
            437,440,459,442,442,442,442,442,442,442,
            442,442,442,459,448,448,448,448,448,448,
            448,448,448,448,459,450,450,450,450,450,
            450,450,450,450,450,54,511,511,511,511,
            511,511,511,511,511,511,53,511,511,511,
            511,511,511,511,511,511,511,56,511,511,
            511,511,511,511,511,511,511,511,55,511,
            511,511,511,511,511,511,511,511,511,39,
            432,432,432,432,432,432,432,432,432,432,
            12,16,9,13,458,32,6,36,463,459,
            260,459,3,292,292,132,51,130,136,728,
            316,497,719,719,264,719,459,459,459,459,
            459,459,459,459,459,459,459,459,459,459,
            459,459,459,459,459,459,459,459,459,459,
            459,459,459,459,459,459,459,459,459,459,
            459,459,459,459,459,459,459,459,459,459,
            459,590,459,459,729,284,459,492,459,459,
            459,459,459,459,459,459,720,459,459,459,
            459,459,459,459,459,459,459,590,590,459,
            590,590,459,459,459,459,459,459,459,459,
            459,459,459,459,1,39,12,1,459,459,
            459,459,459,459,459,459,267
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }
    public final int asb(int index) { return 0; }
    public final int asr(int index) { return 0; }
    public final int nasb(int index) { return 0; }
    public final int nasr(int index) { return 0; }
    public final int terminalIndex(int index) { return 0; }
    public final int nonterminalIndex(int index) { return 0; }
    public final int scopePrefix(int index) { return 0;}
    public final int scopeSuffix(int index) { return 0;}
    public final int scopeLhs(int index) { return 0;}
    public final int scopeLa(int index) { return 0;}
    public final int scopeStateSet(int index) { return 0;}
    public final int scopeRhs(int index) { return 0;}
    public final int scopeState(int index) { return 0;}
    public final int inSymb(int index) { return 0;}
    public final String name(int index) { return null; }
    public final int getErrorSymbol() { return 0; }
    public final int getScopeUbound() { return 0; }
    public final int getScopeSize() { return 0; }
    public final int getMaxNameLength() { return 0; }

    public final static int
           NUM_STATES        = 45,
           NT_OFFSET         = 103,
           LA_STATE_OFFSET   = 729,
           MAX_LA            = 2,
           NUM_RULES         = 270,
           NUM_NONTERMINALS  = 38,
           NUM_SYMBOLS       = 141,
           SEGMENT_SIZE      = 8192,
           START_STATE       = 271,
           IDENTIFIER_SYMBOL = 0,
           EOFT_SYMBOL       = 99,
           EOLT_SYMBOL       = 104,
           ACCEPT_ACTION     = 458,
           ERROR_ACTION      = 459;

    public final static boolean BACKTRACK = false;

    public final int getNumStates() { return NUM_STATES; }
    public final int getNtOffset() { return NT_OFFSET; }
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }
    public final int getMaxLa() { return MAX_LA; }
    public final int getNumRules() { return NUM_RULES; }
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }
    public final int getNumSymbols() { return NUM_SYMBOLS; }
    public final int getSegmentSize() { return SEGMENT_SIZE; }
    public final int getStartState() { return START_STATE; }
    public final int getStartSymbol() { return lhs[0]; }
    public final int getIdentifierSymbol() { return IDENTIFIER_SYMBOL; }
    public final int getEoftSymbol() { return EOFT_SYMBOL; }
    public final int getEoltSymbol() { return EOLT_SYMBOL; }
    public final int getAcceptAction() { return ACCEPT_ACTION; }
    public final int getErrorAction() { return ERROR_ACTION; }
    public final boolean isValidForParser() { return isValidForParser; }
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int originalState(int state) { return 0; }
    public final int asi(int state) { return 0; }
    public final int nasi(int state) { return 0; }
    public final int inSymbol(int state) { return 0; }

    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
