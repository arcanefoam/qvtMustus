/**
* Essential OCL Lexer
* <copyright>
*
* Copyright (c) 2005, 2010 IBM Corporation and others.
* All rights reserved.   This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*   IBM - Initial API and implementation
*   E.D.Willink - Lexer and Parser refactoring to support extensibility and flexible error handling
*   Borland - Bug 242880
*   E.D.Willink - Bug 292112, 295166
*   Adolfo Sanchez-Barbudo Herrera (Open Canarias) - LPG v 2.0.17 adoption (242153)
*   Adolfo Sanchez-Barbudo Herrera (Open Canarias) - Introducing new LPG templates (299396)
*   E.D.Willink - Extended API and implementation for QVTr
*
* </copyright>
*
* $Id: QVTrLexerprs.java,v 1.17 2010/07/10 09:34:46 ewillink Exp $
*/

package org.eclipse.qvt.declarative.parser.qvtrelation;

public class QVTrLexerprs implements lpg.runtime.ParseTable, QVTrLexersym {
    public final static int ERROR_SYMBOL = 0;
    public final int getErrorSymbol() { return ERROR_SYMBOL; }

    public final static int SCOPE_UBOUND = 0;
    public final int getScopeUbound() { return SCOPE_UBOUND; }

    public final static int SCOPE_SIZE = 0;
    public final int getScopeSize() { return SCOPE_SIZE; }

    public final static int MAX_NAME_LENGTH = 0;
    public final int getMaxNameLength() { return MAX_NAME_LENGTH; }

    public final static int NUM_STATES = 43;
    public final int getNumStates() { return NUM_STATES; }

    public final static int NT_OFFSET = 103;
    public final int getNtOffset() { return NT_OFFSET; }

    public final static int LA_STATE_OFFSET = 722;
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }

    public final static int MAX_LA = 2;
    public final int getMaxLa() { return MAX_LA; }

    public final static int NUM_RULES = 266;
    public final int getNumRules() { return NUM_RULES; }

    public final static int NUM_NONTERMINALS = 35;
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }

    public final static int NUM_SYMBOLS = 138;
    public final int getNumSymbols() { return NUM_SYMBOLS; }

    public final static int SEGMENT_SIZE = 8192;
    public final int getSegmentSize() { return SEGMENT_SIZE; }

    public final static int START_STATE = 267;
    public final int getStartState() { return START_STATE; }

    public final static int IDENTIFIER_SYMBOL = 0;
    public final int getIdentifier_SYMBOL() { return IDENTIFIER_SYMBOL; }

    public final static int EOFT_SYMBOL = 99;
    public final int getEoftSymbol() { return EOFT_SYMBOL; }

    public final static int EOLT_SYMBOL = 104;
    public final int getEoltSymbol() { return EOLT_SYMBOL; }

    public final static int ACCEPT_ACTION = 455;
    public final int getAcceptAction() { return ACCEPT_ACTION; }

    public final static int ERROR_ACTION = 456;
    public final int getErrorAction() { return ERROR_ACTION; }

    public final static boolean BACKTRACK = false;
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int getStartSymbol() { return lhs(0); }
    public final boolean isValidForParser() { return QVTrLexersym.isValidForParser; }


    public interface IsNullable {
        public final static byte isNullable[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,1,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,1,
            0,0,0,0,0,0,0,0
        };
    };
    public final static byte isNullable[] = IsNullable.isNullable;
    public final boolean isNullable(int index) { return isNullable[index] != 0; }

    public interface ProsthesesIndex {
        public final static byte prosthesesIndex[] = {0,
            19,22,23,24,27,32,14,29,34,5,
            21,35,7,8,16,17,20,26,28,33,
            2,3,4,6,9,10,11,12,13,15,
            18,25,30,31,1
        };
    };
    public final static byte prosthesesIndex[] = ProsthesesIndex.prosthesesIndex;
    public final int prosthesesIndex(int index) { return prosthesesIndex[index]; }

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static byte baseCheck[] = {0,
            1,3,4,3,3,3,1,2,2,1,
            1,5,1,1,1,1,1,1,1,1,
            1,1,2,2,2,1,1,1,1,2,
            1,1,1,2,1,1,1,1,2,1,
            1,2,2,3,2,2,0,1,2,2,
            2,1,2,3,2,3,3,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,2,1,2,2,2,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,2,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,2,
            1,2,0,1,2,2
        };
    };
    public final static byte baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static byte rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            21,21,21,21,21,21,21,21,21,21,
            21,21,21,21,21,21,21,21,21,21,
            21,21,21,21,21,21,21,21,21,21,
            21,21,21,21,21,21,21,13,21,14,
            24,25,25,25,27,27,27,27,28,28,
            26,26,7,7,30,15,15,15,11,11,
            11,11,11,2,2,2,2,3,3,3,
            3,3,3,3,3,3,3,3,3,3,
            3,3,3,3,3,3,3,3,3,3,
            3,3,3,4,4,4,4,4,4,4,
            4,4,4,4,4,4,4,4,4,4,
            4,4,4,4,4,4,4,4,4,1,
            1,1,1,1,1,1,1,1,1,17,
            17,29,29,22,22,22,22,32,32,32,
            32,32,32,32,32,32,32,32,32,32,
            32,32,32,32,32,32,32,32,32,32,
            32,32,32,32,32,32,32,18,18,18,
            18,18,18,18,18,18,18,18,18,18,
            18,18,18,18,18,18,18,18,18,18,
            18,18,18,18,18,18,5,5,5,5,
            5,5,5,5,5,5,5,5,5,5,
            5,5,5,5,5,5,5,5,5,5,
            5,5,5,5,19,19,8,8,33,33,
            33,33,6,16,16,16,16,31,31,31,
            31,31,31,31,31,34,34,34,34,20,
            20,20,20,20,9,9,9,9,9,23,
            23,12,12,10,10,21,26,891,417,415,
            415,415,1086,367,395,1099,1191,1199,428,367,
            36,38,994,135,134,134,134,132,275,282,
            968,413,10,421,990,304,276,414,503,430,
            430,430,430,430,430,1195,430,430,344,1201,
            357,503,430,430,430,430,430,430,1192,430,
            430,348,381,357,503,430,430,430,430,430,
            430,1193,430,430,364,1196,357,794,430,430,
            430,430,430,430,100,430,430,398,1100,357,
            600,374,374,374,374,374,374,697,262,262,
            262,262,262,262,1203,262,262,1136,53,374,
            374,1147,53,374,406,260,260,260,260,260,
            260,1,46,46,46,46,309,232,232,232,
            232,232,46,260,260,1072,53,46,1204,46,
            103,44,44,44,44,1158,53,1169,53,400,
            43,44,272,1200,1194,1208,44,1211,44,232,
            232,205,51,51,51,51,8,9,1212,42,
            1197,272,1103,371,1114,405,1125,407,456,371,
            456,405,456,407,456,456,456,456,456,456,
            456,456,51,51,456,456
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,1,2,3,4,5,6,7,8,9,
            10,11,12,13,14,15,16,17,18,19,
            20,21,22,23,24,25,26,27,28,29,
            30,31,32,33,34,35,36,37,38,39,
            40,41,42,43,44,45,46,47,48,49,
            50,51,52,53,54,55,56,57,58,59,
            60,61,62,63,64,65,66,67,68,69,
            70,71,72,73,74,75,76,77,78,79,
            80,81,82,83,84,85,86,87,88,89,
            90,91,92,93,94,95,96,97,98,0,
            100,101,0,1,2,3,4,5,6,7,
            8,9,10,11,12,13,14,15,16,17,
            18,19,20,21,22,23,24,25,26,27,
            28,29,30,31,32,33,34,35,36,37,
            38,39,40,41,42,43,44,45,46,47,
            48,49,50,51,52,53,54,55,56,57,
            58,59,60,61,62,63,64,65,66,67,
            68,69,70,71,72,73,74,75,76,77,
            78,79,80,81,82,83,84,85,86,87,
            88,89,90,91,92,93,94,95,96,97,
            98,102,100,101,0,1,2,3,4,5,
            6,7,8,9,10,11,12,13,14,15,
            16,17,18,19,20,21,22,23,24,25,
            26,27,28,29,30,31,32,33,34,35,
            36,37,38,39,40,41,42,43,44,45,
            46,47,48,49,50,51,52,53,54,55,
            56,57,58,59,60,61,62,63,64,65,
            66,67,68,69,70,71,72,73,74,75,
            76,77,78,79,80,81,82,83,84,85,
            86,87,88,89,90,91,92,93,94,95,
            96,97,98,0,0,0,0,103,0,1,
            2,3,4,5,6,7,8,9,10,11,
            12,13,14,15,16,17,18,19,20,21,
            22,23,24,25,26,27,28,29,30,31,
            32,33,34,35,36,37,38,39,40,41,
            42,43,44,45,46,47,48,49,50,51,
            52,53,54,55,56,57,58,59,60,61,
            62,63,64,65,66,67,68,69,70,71,
            72,73,74,75,76,77,78,79,80,81,
            82,83,84,85,86,87,88,89,90,91,
            92,93,94,95,96,0,1,2,3,4,
            5,6,7,8,9,10,11,12,13,14,
            15,16,17,18,19,20,21,22,23,24,
            25,26,27,28,29,30,31,32,33,34,
            35,36,37,38,39,40,41,42,43,44,
            45,46,47,48,49,50,51,52,53,54,
            55,56,57,58,59,60,61,62,63,64,
            65,66,67,68,69,70,71,72,73,74,
            75,76,77,78,79,80,81,82,83,84,
            85,86,87,88,89,90,91,92,93,94,
            95,96,0,1,2,3,4,5,6,7,
            8,9,10,11,12,13,14,15,16,17,
            18,19,20,21,22,23,24,25,26,27,
            28,29,30,31,32,33,34,35,36,37,
            38,39,40,41,42,43,44,45,46,47,
            48,49,50,51,52,53,54,55,56,57,
            58,59,60,61,62,63,64,65,66,67,
            68,69,70,0,72,73,74,75,76,77,
            78,79,80,81,82,83,84,85,86,87,
            88,89,90,91,92,93,94,95,96,0,
            1,2,3,4,5,6,7,8,9,10,
            11,12,13,14,15,16,17,18,19,20,
            21,22,23,24,25,26,27,28,29,30,
            31,32,33,34,35,36,37,38,39,40,
            41,42,43,44,45,46,47,48,49,50,
            51,52,53,54,55,56,57,58,59,60,
            61,62,63,64,65,66,67,68,69,70,
            71,72,73,74,75,76,77,78,79,80,
            81,82,83,84,85,86,0,88,89,90,
            91,92,93,94,95,96,0,1,2,3,
            4,5,6,7,8,9,10,11,12,13,
            14,15,16,17,18,19,20,21,22,23,
            24,25,26,27,28,29,30,31,32,33,
            34,35,36,37,38,39,40,41,42,43,
            44,45,46,47,48,49,50,51,52,53,
            54,55,56,57,58,59,60,61,62,63,
            64,65,66,67,68,69,70,0,72,73,
            74,75,76,77,78,79,80,81,82,83,
            84,85,86,87,88,89,90,91,92,93,
            94,95,96,0,1,2,3,4,5,6,
            7,8,9,10,11,12,13,14,15,16,
            17,18,19,20,21,22,23,24,25,26,
            27,28,29,30,31,32,33,34,35,36,
            37,38,39,40,41,42,43,44,45,46,
            47,48,49,50,51,52,53,54,55,56,
            57,58,59,60,61,62,63,64,65,66,
            67,68,69,70,0,72,73,74,75,76,
            77,78,79,80,81,82,83,84,85,86,
            87,88,89,90,91,92,93,94,95,96,
            0,1,2,3,4,5,6,7,8,9,
            10,11,12,13,14,15,16,17,18,19,
            20,21,22,23,24,25,26,27,28,29,
            30,31,32,33,34,35,36,37,38,39,
            40,41,42,43,44,45,46,47,48,49,
            50,51,52,53,54,55,56,57,58,59,
            60,61,62,63,64,65,66,67,68,69,
            70,71,72,73,74,75,76,0,78,79,
            80,81,82,83,84,85,86,87,0,0,
            0,14,0,0,17,0,0,97,98,0,
            100,101,102,0,1,2,3,4,5,6,
            7,8,9,10,11,12,17,0,0,0,
            0,18,19,20,21,22,23,24,25,26,
            27,28,29,30,31,32,33,34,35,36,
            37,38,39,40,41,42,43,44,45,46,
            47,48,49,50,51,52,53,54,55,56,
            57,58,59,60,61,62,63,64,65,66,
            67,68,69,0,0,0,0,0,0,0,
            77,0,1,2,3,4,5,6,7,8,
            9,10,11,12,13,0,1,2,3,4,
            5,6,7,8,9,10,0,0,0,0,
            15,16,0,1,2,3,4,5,6,7,
            8,9,10,0,1,2,3,4,5,6,
            7,8,9,10,0,1,2,3,4,5,
            6,7,8,9,10,0,1,2,3,4,
            5,6,7,8,9,10,0,1,2,3,
            4,5,6,7,8,9,10,0,1,2,
            3,4,5,6,7,8,9,10,0,1,
            2,3,4,5,6,7,8,9,10,0,
            1,2,3,4,5,6,7,8,9,10,
            0,0,0,0,0,0,0,99,0,0,
            0,102,0,0,11,12,14,0,16,15,
            0,0,13,13,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            70,0,0,0,73,74,71,71,0,0,
            72,0,0,71,71,0,0,0,0,0,
            0,0,0,0,0,0,0,97,98,0,
            100,101,0,0,99,0,0,0,102,0,
            0,0,0,0,0,0,99,0,0,99,
            99,0,0,0,0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            456,502,502,502,502,502,502,502,502,502,
            502,502,502,502,502,502,502,502,502,502,
            502,502,502,502,502,502,502,502,502,502,
            502,502,502,502,502,502,502,502,502,502,
            502,502,502,502,502,502,502,502,502,502,
            502,502,502,502,502,502,502,502,502,502,
            502,502,502,502,502,502,502,502,502,502,
            502,502,502,501,400,502,502,502,502,502,
            502,502,502,502,502,502,502,502,502,502,
            502,502,502,502,502,502,502,502,502,456,
            502,502,456,500,500,500,500,500,500,500,
            500,500,500,500,500,500,500,500,500,500,
            500,500,500,500,500,500,500,500,500,500,
            500,500,500,500,500,500,500,500,500,500,
            500,500,500,500,500,500,500,500,500,500,
            500,500,500,500,500,500,500,500,500,500,
            500,500,500,500,500,500,500,500,500,500,
            500,500,500,500,500,468,505,500,500,500,
            500,500,500,500,500,500,500,500,500,500,
            500,500,500,500,500,500,500,500,500,500,
            500,462,500,500,11,507,507,507,507,507,
            507,507,507,507,507,507,507,507,507,507,
            507,507,507,507,507,507,507,507,507,507,
            507,507,507,507,507,507,507,507,507,507,
            507,507,507,507,507,507,507,507,507,507,
            507,507,507,507,507,507,507,507,507,507,
            507,507,507,507,507,507,507,507,507,507,
            507,507,507,507,507,507,507,507,507,507,
            507,507,507,507,507,507,507,507,507,507,
            507,507,507,507,507,507,507,507,507,507,
            507,507,507,47,456,456,456,507,456,688,
            688,688,688,688,688,688,688,688,688,688,
            688,688,688,688,688,688,688,688,688,688,
            688,688,688,688,688,688,688,688,688,688,
            688,688,688,688,688,688,688,688,688,688,
            688,688,688,688,688,688,688,688,688,688,
            688,688,688,688,688,688,688,688,688,688,
            688,688,688,688,688,688,688,688,688,688,
            688,688,688,688,688,688,688,688,688,688,
            688,688,688,688,688,688,688,688,688,688,
            688,688,688,688,688,456,716,716,716,716,
            716,716,716,716,716,716,716,716,716,716,
            716,716,716,716,716,716,716,716,716,716,
            716,716,716,716,716,716,716,716,716,716,
            716,716,716,716,716,716,716,716,716,716,
            716,716,716,716,716,716,716,716,716,716,
            716,716,716,716,716,716,716,716,716,716,
            716,716,716,716,716,716,716,716,716,716,
            716,716,716,716,716,716,716,716,716,716,
            716,716,458,716,716,716,716,716,716,716,
            386,716,263,430,430,430,430,430,430,430,
            430,430,430,430,430,430,430,430,430,430,
            430,430,430,430,430,430,430,430,430,430,
            430,430,430,430,430,430,430,430,430,430,
            430,430,430,430,430,430,430,430,430,430,
            430,430,430,430,430,430,430,430,430,430,
            430,430,430,430,430,430,430,430,430,430,
            430,430,430,456,430,430,430,430,430,430,
            430,430,430,430,430,430,430,430,430,430,
            430,430,430,430,430,430,430,386,430,456,
            374,374,374,374,374,374,374,374,374,374,
            374,374,374,374,374,374,374,374,374,374,
            374,374,374,374,374,374,374,374,374,374,
            374,374,374,374,374,374,374,374,374,374,
            374,374,374,374,374,374,374,374,374,374,
            374,374,374,374,374,374,374,374,374,374,
            374,374,374,374,374,374,374,374,374,374,
            374,374,374,374,374,374,374,374,374,374,
            374,374,374,374,374,374,456,374,374,374,
            374,374,374,374,386,374,264,718,718,718,
            718,718,718,718,718,718,718,718,718,718,
            718,718,718,718,718,718,718,718,718,718,
            718,718,718,718,718,718,718,718,718,718,
            718,718,718,718,718,718,718,718,718,718,
            718,718,718,718,718,718,718,718,718,718,
            718,718,718,718,718,718,718,718,718,718,
            718,718,718,718,718,718,718,456,718,718,
            718,718,718,718,718,718,718,718,718,718,
            718,718,718,718,718,718,718,718,718,718,
            718,386,718,263,430,430,430,430,430,430,
            430,430,430,430,430,430,430,430,430,430,
            430,430,430,430,430,430,430,430,430,430,
            430,430,430,430,430,430,430,430,430,430,
            430,430,430,430,430,430,430,430,430,430,
            430,430,430,430,430,430,430,430,430,430,
            430,430,430,430,430,430,430,430,430,430,
            430,430,430,430,456,430,430,430,430,430,
            430,430,430,430,430,430,430,430,430,430,
            430,430,430,430,430,430,430,430,386,430,
            456,417,417,417,417,417,417,417,417,417,
            417,415,415,309,294,305,331,478,415,415,
            415,415,415,415,415,415,415,415,415,415,
            415,415,415,415,415,415,415,415,415,415,
            415,415,415,335,415,415,415,415,415,415,
            415,415,415,415,415,415,415,415,415,415,
            415,415,415,415,415,415,415,415,415,415,
            428,324,277,318,472,487,298,21,491,484,
            485,482,483,488,290,474,475,350,456,456,
            456,481,456,456,480,456,456,428,428,20,
            428,428,311,1,591,591,591,591,591,591,
            591,591,591,591,590,590,479,456,456,456,
            456,590,590,590,590,590,590,590,590,590,
            590,590,590,590,590,590,590,590,590,590,
            590,590,590,590,590,590,590,590,590,590,
            590,590,590,590,590,590,590,590,590,590,
            590,590,590,590,590,590,590,590,590,590,
            590,590,590,456,456,456,456,456,456,456,
            592,40,509,509,509,509,509,509,509,509,
            509,509,272,272,1902,456,367,367,367,367,
            367,367,367,367,367,367,456,456,456,456,
            434,436,456,371,371,371,371,371,371,371,
            371,371,371,456,405,405,405,405,405,405,
            405,405,405,405,456,407,407,407,407,407,
            407,407,407,407,407,55,509,509,509,509,
            509,509,509,509,509,509,54,509,509,509,
            509,509,509,509,509,509,509,57,509,509,
            509,509,509,509,509,509,509,509,56,509,
            509,509,509,509,509,509,509,509,509,40,
            432,432,432,432,432,432,432,432,432,432,
            13,17,15,10,14,133,261,455,33,7,
            37,461,456,456,272,272,486,133,506,721,
            52,131,309,495,456,456,456,456,456,456,
            456,456,456,456,456,456,456,456,456,456,
            456,456,456,456,456,456,456,456,456,456,
            456,456,456,456,456,456,456,456,456,456,
            456,456,456,456,456,456,456,456,456,456,
            588,456,456,456,722,295,337,264,456,456,
            490,456,456,460,459,456,456,456,456,456,
            456,456,456,456,456,456,456,588,588,456,
            588,588,456,456,1,456,456,456,264,456,
            456,456,456,456,456,456,1,456,456,40,
            13
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }
    public final int asb(int index) { return 0; }
    public final int asr(int index) { return 0; }
    public final int nasb(int index) { return 0; }
    public final int nasr(int index) { return 0; }
    public final int terminalIndex(int index) { return 0; }
    public final int nonterminalIndex(int index) { return 0; }
    public final int scopePrefix(int index) { return 0;}
    public final int scopeSuffix(int index) { return 0;}
    public final int scopeLhs(int index) { return 0;}
    public final int scopeLa(int index) { return 0;}
    public final int scopeStateSet(int index) { return 0;}
    public final int scopeRhs(int index) { return 0;}
    public final int scopeState(int index) { return 0;}
    public final int inSymb(int index) { return 0;}
    public final String name(int index) { return null; }
    public final int originalState(int state) { return 0; }
    public final int asi(int state) { return 0; }
    public final int nasi(int state) { return 0; }
    public final int inSymbol(int state) { return 0; }

    /**
     * assert(! goto_default);
     */
    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    /**
     * assert(! shift_default);
     */
    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
