/**
* <copyright>
*
* Copyright (c) 2005, 2009 IBM Corporation, Borland Software Corp.,  and others.
* All rights reserved.   This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*   IBM - Initial API and implementation
*   E.D.Willink - Lexer and Parser refactoring to support extensibility and flexible error handling
*   Borland - Bug 242880
*   E.D.Willink - Extended API and implementation for QVTr
*
* </copyright>
*
* $Id: QVTrLexerprs.java,v 1.11 2009/08/16 10:08:48 ewillink Exp $
*/

package org.eclipse.qvt.declarative.parser.qvtrelation;

public class QVTrLexerprs implements lpg.lpgjavaruntime.ParseTable, QVTrLexersym {

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static byte baseCheck[] = {0,
            1,1,3,3,3,1,1,1,1,1,
            5,1,1,1,1,1,1,1,1,1,
            1,2,2,2,1,1,1,1,2,1,
            1,1,2,1,1,2,4,1,2,1,
            1,1,2,2,3,2,2,0,1,2,
            2,2,1,2,1,2,3,2,3,3,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,2,3,1,1,1,1,
            1,2,1,2,2,2,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,2,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            2,2,1,2,1,2,0,1,3,3,
            3,3,3,3,3,4,4,3,3,2,
            2
        };
    };
    public final static byte baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static byte rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            23,23,23,23,23,23,23,23,23,23,
            23,23,23,23,23,23,23,23,23,23,
            23,23,23,23,23,23,23,23,23,23,
            23,23,23,23,23,23,23,23,23,23,
            23,24,25,25,25,29,29,29,29,30,
            30,28,28,7,7,39,39,32,15,15,
            15,11,11,11,11,11,2,2,2,2,
            3,3,3,3,3,3,3,3,3,3,
            3,3,3,3,3,3,3,3,3,3,
            3,3,3,3,3,3,4,4,4,4,
            4,4,4,4,4,4,4,4,4,4,
            4,4,4,4,4,4,4,4,4,4,
            4,4,1,1,1,1,1,1,1,1,
            1,1,41,41,41,41,41,41,41,41,
            42,42,42,42,42,42,42,42,42,42,
            42,42,40,40,43,43,43,17,17,44,
            44,31,31,13,13,13,13,13,34,34,
            34,34,34,34,34,34,34,34,34,34,
            34,34,34,34,34,34,34,34,34,34,
            34,34,34,34,34,34,34,34,19,19,
            19,19,19,19,19,19,19,19,19,19,
            19,19,19,19,19,19,19,19,19,19,
            19,19,19,19,19,19,19,5,5,5,
            5,5,5,5,5,5,5,5,5,5,
            5,5,5,5,5,5,5,5,5,5,
            5,5,5,5,5,20,20,8,8,35,
            35,35,35,9,16,16,16,16,33,33,
            33,33,33,33,33,33,36,36,36,36,
            21,21,21,21,21,10,10,10,10,10,
            10,6,22,37,37,12,12,14,14,18,
            26,26,26,26,26,26,26,26,26,27,
            23,28,988,489,488,488,488,1428,2,341,
            1335,328,1379,490,1382,495,1081,328,1368,54,
            492,1429,43,162,320,324,6,7,8,9,
            480,1322,54,322,317,309,493,493,493,493,
            493,493,1313,493,493,493,44,394,320,418,
            309,493,493,493,493,493,493,1087,493,493,
            493,1386,394,1387,445,406,411,411,411,411,
            411,411,1167,411,411,411,1166,411,891,426,
            426,426,426,426,600,296,296,296,296,296,
            296,1244,296,296,296,1390,54,1430,426,426,
            426,697,296,296,296,296,296,296,100,296,
            296,296,304,1406,54,426,794,294,294,294,
            294,294,1315,1,47,47,47,47,503,263,
            263,263,263,263,47,1083,294,294,294,47,
            1317,433,47,1091,405,500,500,500,1346,423,
            405,1357,469,475,1168,423,500,1432,469,1417,
            54,500,1388,263,263,103,45,45,45,45,
            205,52,52,52,52,1431,45,1318,1385,1433,
            1434,45,1435,1436,45,1170,165,164,164,164,
            1246,165,164,164,164,517,517,517,517,517,
            517,517,517,52,52,517,517
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,1,2,3,4,5,6,7,8,9,
            10,11,12,13,14,15,16,17,18,19,
            20,21,22,23,24,25,26,27,28,29,
            30,31,32,33,34,35,36,37,38,39,
            40,41,42,43,44,45,46,47,48,49,
            50,51,52,53,54,55,56,57,58,59,
            60,61,62,63,64,65,66,67,68,69,
            70,71,72,73,74,75,76,77,78,79,
            80,81,82,83,84,85,86,87,88,89,
            90,91,92,93,94,95,96,97,98,0,
            100,101,0,1,2,3,4,5,6,7,
            8,9,10,11,12,13,14,15,16,17,
            18,19,20,21,22,23,24,25,26,27,
            28,29,30,31,32,33,34,35,36,37,
            38,39,40,41,42,43,44,45,46,47,
            48,49,50,51,52,53,54,55,56,57,
            58,59,60,61,62,63,64,65,66,67,
            68,69,70,71,72,73,74,75,76,77,
            78,79,80,81,82,83,84,85,86,87,
            88,89,90,91,92,93,94,95,96,97,
            98,102,100,101,0,1,2,3,4,5,
            6,7,8,9,10,11,12,13,14,15,
            16,17,18,19,20,21,22,23,24,25,
            26,27,28,29,30,31,32,33,34,35,
            36,37,38,39,40,41,42,43,44,45,
            46,47,48,49,50,51,52,53,54,55,
            56,57,58,59,60,61,62,63,64,65,
            66,67,68,69,70,71,72,73,74,75,
            76,77,78,79,80,81,82,83,84,85,
            86,87,88,89,90,91,92,93,94,95,
            96,97,98,0,0,0,0,103,0,1,
            2,3,4,5,6,7,8,9,10,11,
            12,13,14,15,16,17,18,19,20,21,
            22,23,24,25,26,27,28,29,30,31,
            32,33,34,35,36,37,38,39,40,41,
            42,43,44,45,46,47,48,49,50,51,
            52,53,54,55,56,57,58,59,60,61,
            62,63,64,65,66,67,68,69,70,71,
            72,73,74,75,76,77,78,79,80,81,
            82,83,84,85,86,87,88,89,90,91,
            92,93,94,95,96,0,1,2,3,4,
            5,6,7,8,9,10,11,12,13,14,
            15,16,17,18,19,20,21,22,23,24,
            25,26,27,28,29,30,31,32,33,34,
            35,36,37,38,39,40,41,42,43,44,
            45,46,47,48,49,50,51,52,53,54,
            55,56,57,58,59,60,61,62,63,64,
            65,66,67,68,69,70,71,72,73,74,
            75,76,77,78,79,80,81,82,83,84,
            85,86,87,88,89,90,91,92,93,94,
            95,96,0,1,2,3,4,5,6,7,
            8,9,10,11,12,13,14,15,16,17,
            18,19,20,21,22,23,24,25,26,27,
            28,29,30,31,32,33,34,35,36,37,
            38,39,40,41,42,43,44,45,46,47,
            48,49,50,51,52,53,54,55,56,57,
            58,59,60,61,62,63,64,65,66,67,
            68,69,70,71,72,73,74,75,76,77,
            78,79,80,81,82,83,84,85,86,87,
            88,89,90,91,92,93,94,95,96,0,
            1,2,3,4,5,6,7,8,9,10,
            11,12,13,14,15,16,17,18,19,20,
            21,22,23,24,25,26,27,28,29,30,
            31,32,33,34,35,36,37,38,39,40,
            41,42,43,44,45,46,47,48,49,50,
            51,52,53,54,55,56,57,58,59,60,
            61,62,63,64,65,66,67,68,69,70,
            71,72,73,74,75,76,77,78,79,80,
            81,82,83,84,85,86,87,88,89,90,
            91,92,93,94,95,96,0,1,2,3,
            4,5,6,7,8,9,10,11,12,13,
            14,15,16,17,18,19,20,21,22,23,
            24,25,26,27,28,29,30,31,32,33,
            34,35,36,37,38,39,40,41,42,43,
            44,45,46,47,48,49,50,51,52,53,
            54,55,56,57,58,59,60,61,62,63,
            64,65,66,67,68,69,70,71,72,73,
            74,75,76,77,78,79,80,81,82,83,
            84,85,86,87,88,89,90,91,92,93,
            94,95,96,0,1,2,3,4,5,6,
            7,8,9,10,11,12,13,14,15,16,
            17,18,19,20,21,22,23,24,25,26,
            27,28,29,30,31,32,33,34,35,36,
            37,38,39,40,41,42,43,44,45,46,
            47,48,49,50,51,52,53,54,55,56,
            57,58,59,60,61,62,63,64,65,66,
            67,68,69,70,71,72,73,74,75,76,
            77,78,79,80,81,82,83,84,85,86,
            87,88,89,90,91,92,93,94,95,96,
            0,1,2,3,4,5,6,7,8,9,
            10,11,12,13,14,15,16,17,18,19,
            20,21,22,23,24,25,26,27,28,29,
            30,31,32,33,34,35,36,37,38,39,
            40,41,42,43,44,45,46,47,48,49,
            50,51,52,53,54,55,56,57,58,59,
            60,61,62,63,64,65,66,67,68,69,
            70,71,72,73,0,75,76,77,78,79,
            80,81,82,83,84,85,86,87,88,89,
            90,91,92,93,94,95,96,0,1,2,
            3,4,5,6,7,8,9,10,11,12,
            13,14,15,16,17,18,19,20,21,22,
            23,24,25,26,27,28,29,30,31,32,
            33,34,35,36,37,38,39,40,41,42,
            43,44,45,46,47,48,49,50,51,52,
            53,54,55,56,57,58,59,60,61,62,
            63,64,65,66,67,68,69,70,71,72,
            73,74,0,76,77,78,79,80,81,82,
            83,84,85,86,87,88,89,90,0,0,
            0,0,0,0,97,98,0,100,101,102,
            0,1,2,3,4,5,6,7,8,9,
            10,11,12,13,14,0,16,17,18,19,
            20,21,22,23,24,25,26,27,28,29,
            30,31,32,33,34,35,36,37,38,39,
            40,41,42,43,44,45,46,47,48,49,
            50,51,52,53,54,55,56,57,58,59,
            60,61,62,63,64,65,76,67,68,69,
            70,71,72,77,74,0,0,0,78,0,
            1,2,3,4,5,6,7,8,9,10,
            11,12,13,14,102,16,17,18,19,20,
            21,22,23,24,25,26,27,28,29,30,
            31,32,33,34,35,36,37,38,39,40,
            41,42,43,44,45,46,47,48,49,50,
            51,52,53,54,55,56,57,58,59,60,
            61,62,63,64,65,69,71,72,0,0,
            0,74,0,0,75,0,1,2,3,4,
            5,6,7,8,9,10,11,12,13,14,
            0,16,17,18,19,20,21,22,23,24,
            25,26,27,28,29,30,31,32,33,34,
            35,36,37,38,39,40,41,42,43,44,
            45,46,47,48,49,50,51,52,53,54,
            55,56,57,58,59,60,61,62,63,64,
            65,68,0,70,0,0,0,0,0,0,
            75,0,1,2,3,4,5,6,7,8,
            9,10,11,12,0,1,2,3,4,5,
            6,7,8,9,10,0,1,2,3,4,
            5,6,7,8,9,10,0,1,2,3,
            4,5,6,7,8,9,10,0,1,2,
            3,4,5,6,7,8,9,10,0,67,
            66,0,66,66,0,0,0,0,67,0,
            1,2,3,4,5,6,7,8,9,10,
            15,15,15,69,70,0,1,2,3,4,
            5,6,7,8,9,10,0,1,2,3,
            4,5,6,7,8,9,10,0,0,0,
            0,0,0,0,0,0,0,0,11,12,
            0,13,11,14,0,15,0,0,0,0,
            0,73,0,68,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,97,98,0,100,101,
            99,0,0,99,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,99,99,99,0,0,0,102,0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            517,564,564,564,564,564,564,564,564,564,
            564,564,564,564,564,564,564,564,564,564,
            564,564,564,564,564,564,564,564,564,564,
            564,564,564,564,564,564,564,564,564,564,
            564,564,564,564,564,564,564,564,564,564,
            564,564,564,564,564,564,564,564,564,564,
            564,564,564,564,564,564,564,564,564,564,
            564,563,475,564,564,564,564,564,564,564,
            564,564,564,564,564,564,564,564,564,564,
            564,564,564,564,564,564,564,564,564,517,
            564,564,517,562,562,562,562,562,562,562,
            562,562,562,562,562,562,562,562,562,562,
            562,562,562,562,562,562,562,562,562,562,
            562,562,562,562,562,562,562,562,562,562,
            562,562,562,562,562,562,562,562,562,562,
            562,562,562,562,562,562,562,562,562,562,
            562,562,562,562,562,562,562,562,562,562,
            562,562,562,528,567,562,562,562,562,562,
            562,562,562,562,562,562,562,562,562,562,
            562,562,562,562,562,562,562,562,562,562,
            562,522,562,562,10,569,569,569,569,569,
            569,569,569,569,569,569,569,569,569,569,
            569,569,569,569,569,569,569,569,569,569,
            569,569,569,569,569,569,569,569,569,569,
            569,569,569,569,569,569,569,569,569,569,
            569,569,569,569,569,569,569,569,569,569,
            569,569,569,569,569,569,569,569,569,569,
            569,569,569,569,569,569,569,569,569,569,
            569,569,569,569,569,569,569,569,569,569,
            569,569,569,569,569,569,569,569,569,569,
            569,569,569,48,517,517,517,569,297,493,
            493,493,493,493,493,493,493,493,493,493,
            493,493,493,493,493,493,493,493,493,493,
            493,493,493,493,493,493,493,493,493,493,
            493,493,493,493,493,493,493,493,493,493,
            493,493,493,493,493,493,493,493,493,493,
            493,493,493,493,493,493,493,493,493,493,
            493,493,493,493,432,493,493,493,493,493,
            493,493,493,493,493,493,493,493,493,493,
            493,493,493,493,493,493,493,493,493,493,
            493,493,493,493,438,517,411,411,411,411,
            411,411,411,411,411,411,411,411,411,411,
            411,411,411,411,411,411,411,411,411,411,
            411,411,411,411,411,411,411,411,411,411,
            411,411,411,411,411,411,411,411,411,411,
            411,411,411,411,411,411,411,411,411,411,
            411,411,411,411,411,411,411,411,411,411,
            411,450,411,411,411,411,411,411,411,411,
            411,411,411,411,411,411,411,411,411,411,
            411,411,411,411,411,411,411,411,411,411,
            411,438,517,780,780,780,780,780,780,780,
            780,780,780,780,780,780,780,780,780,780,
            780,780,780,780,780,780,780,780,780,780,
            780,780,780,780,780,780,780,780,780,780,
            780,780,780,780,780,780,780,780,780,780,
            780,780,780,780,780,780,780,780,780,780,
            780,780,780,780,780,780,780,780,780,780,
            780,780,780,780,780,780,780,780,780,780,
            780,780,780,780,780,780,780,780,780,780,
            780,780,780,780,780,780,780,780,780,298,
            813,813,813,813,813,813,813,813,813,813,
            813,813,813,813,813,813,813,813,813,813,
            813,813,813,813,813,813,813,813,813,813,
            813,813,813,813,813,813,813,813,813,813,
            813,813,813,813,813,813,813,813,813,813,
            813,813,813,813,813,813,813,813,813,813,
            813,813,813,813,813,432,813,813,813,813,
            813,813,813,813,813,813,813,813,813,813,
            813,813,813,813,813,813,813,813,813,813,
            813,813,813,813,813,438,517,813,813,813,
            813,813,813,813,813,813,813,813,813,813,
            813,813,813,813,813,813,813,813,813,813,
            813,813,813,813,813,813,813,813,813,813,
            813,813,813,813,813,813,813,813,813,813,
            813,813,813,813,813,813,813,813,813,813,
            813,813,813,813,813,813,813,813,813,813,
            813,813,487,813,813,813,813,813,813,813,
            813,813,813,813,813,813,813,813,813,813,
            813,813,813,813,813,813,813,813,813,813,
            813,813,438,517,811,811,811,811,811,811,
            811,811,811,811,811,811,811,811,811,811,
            811,811,811,811,811,811,811,811,811,811,
            811,811,811,811,811,811,811,811,811,811,
            811,811,811,811,811,811,811,811,811,811,
            811,811,811,811,811,811,811,811,811,811,
            811,811,811,811,811,811,811,811,811,811,
            811,811,811,811,811,811,811,816,811,811,
            811,811,811,811,811,811,811,811,811,811,
            811,811,811,811,811,811,811,811,811,464,
            517,426,426,426,426,426,426,426,426,426,
            426,426,426,426,426,426,426,426,426,426,
            426,426,426,426,426,426,426,426,426,426,
            426,426,426,426,426,426,426,426,426,426,
            426,426,426,426,426,426,426,426,426,426,
            426,426,426,426,426,426,426,426,426,426,
            426,426,426,426,426,426,426,426,426,426,
            426,426,426,426,517,426,426,426,426,426,
            426,426,426,426,426,426,426,426,426,426,
            426,426,426,426,426,426,464,517,489,489,
            489,489,489,489,489,489,489,489,488,488,
            488,488,538,488,488,488,488,488,488,488,
            488,488,488,488,488,488,488,488,488,488,
            488,488,488,488,488,488,488,488,488,488,
            488,488,488,488,488,488,488,488,488,488,
            488,488,488,488,488,488,488,488,488,488,
            488,488,488,375,352,373,382,401,386,532,
            490,388,517,326,367,371,547,331,345,551,
            544,545,542,543,557,548,534,535,517,517,
            38,517,517,517,490,490,32,490,490,360,
            517,405,405,405,405,405,405,405,405,405,
            405,500,500,500,500,517,500,500,500,500,
            500,500,500,500,500,500,500,500,500,500,
            500,500,500,500,500,500,500,500,500,500,
            500,500,500,500,500,500,500,500,500,500,
            500,500,500,500,500,500,500,500,500,500,
            500,500,500,500,500,500,556,826,472,818,
            819,821,820,550,388,16,13,517,485,1,
            682,682,682,682,682,682,682,682,682,682,
            681,681,681,681,521,681,681,681,681,681,
            681,681,681,681,681,681,681,681,681,681,
            681,681,681,681,681,681,681,681,681,681,
            681,681,681,681,681,681,681,681,681,681,
            681,681,681,681,681,681,681,681,681,681,
            681,681,681,681,681,827,828,422,517,517,
            517,809,517,14,683,300,682,682,682,682,
            682,682,682,682,682,682,681,681,681,681,
            517,681,681,681,681,681,681,681,681,681,
            681,681,681,681,681,681,681,681,681,681,
            681,681,681,681,681,681,681,681,681,681,
            681,681,681,681,681,681,681,681,681,681,
            681,681,681,681,681,681,681,681,681,681,
            681,546,35,568,517,517,291,3,517,517,
            683,6,571,571,571,571,571,571,571,571,
            571,571,320,320,517,328,328,328,328,328,
            328,328,328,328,328,517,423,423,423,423,
            423,423,423,423,423,423,517,469,469,469,
            469,469,469,469,469,469,469,58,571,571,
            571,571,571,571,571,571,571,571,12,553,
            808,517,808,808,163,20,19,308,453,57,
            571,571,571,571,571,571,571,571,571,571,
            540,539,824,458,461,60,571,571,571,571,
            571,571,571,571,571,571,59,571,571,571,
            571,571,571,571,571,571,571,7,517,517,
            305,517,53,161,167,295,517,517,320,320,
            517,407,554,467,517,823,517,517,517,517,
            517,679,517,541,517,517,517,517,517,517,
            517,517,517,517,517,517,517,517,517,517,
            517,517,517,517,517,679,679,517,679,679,
            516,517,517,1,517,517,517,517,517,517,
            517,517,517,517,517,517,517,517,517,517,
            517,517,517,517,517,517,517,517,517,517,
            517,517,517,517,517,517,517,517,517,517,
            517,517,517,517,517,517,517,517,517,517,
            517,6,12,1,517,517,517,298
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }
    public final int asb(int index) { return 0; }
    public final int asr(int index) { return 0; }
    public final int nasb(int index) { return 0; }
    public final int nasr(int index) { return 0; }
    public final int terminalIndex(int index) { return 0; }
    public final int nonterminalIndex(int index) { return 0; }
    public final int scopePrefix(int index) { return 0;}
    public final int scopeSuffix(int index) { return 0;}
    public final int scopeLhs(int index) { return 0;}
    public final int scopeLa(int index) { return 0;}
    public final int scopeStateSet(int index) { return 0;}
    public final int scopeRhs(int index) { return 0;}
    public final int scopeState(int index) { return 0;}
    public final int inSymb(int index) { return 0;}
    public final String name(int index) { return null; }
    public final int getErrorSymbol() { return 0; }
    public final int getScopeUbound() { return 0; }
    public final int getScopeSize() { return 0; }
    public final int getMaxNameLength() { return 0; }

    public final static int
           NUM_STATES        = 51,
           NT_OFFSET         = 103,
           LA_STATE_OFFSET   = 828,
           MAX_LA            = 1,
           NUM_RULES         = 311,
           NUM_NONTERMINALS  = 44,
           NUM_SYMBOLS       = 147,
           SEGMENT_SIZE      = 8192,
           START_STATE       = 312,
           IDENTIFIER_SYMBOL = 0,
           EOFT_SYMBOL       = 99,
           EOLT_SYMBOL       = 104,
           ACCEPT_ACTION     = 516,
           ERROR_ACTION      = 517;

    public final static boolean BACKTRACK = false;

    public final int getNumStates() { return NUM_STATES; }
    public final int getNtOffset() { return NT_OFFSET; }
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }
    public final int getMaxLa() { return MAX_LA; }
    public final int getNumRules() { return NUM_RULES; }
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }
    public final int getNumSymbols() { return NUM_SYMBOLS; }
    public final int getSegmentSize() { return SEGMENT_SIZE; }
    public final int getStartState() { return START_STATE; }
    public final int getStartSymbol() { return lhs[0]; }
    public final int getIdentifierSymbol() { return IDENTIFIER_SYMBOL; }
    public final int getEoftSymbol() { return EOFT_SYMBOL; }
    public final int getEoltSymbol() { return EOLT_SYMBOL; }
    public final int getAcceptAction() { return ACCEPT_ACTION; }
    public final int getErrorAction() { return ERROR_ACTION; }
    public final boolean isValidForParser() { return isValidForParser; }
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int originalState(int state) { return 0; }
    public final int asi(int state) { return 0; }
    public final int nasi(int state) { return 0; }
    public final int inSymbol(int state) { return 0; }

    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
