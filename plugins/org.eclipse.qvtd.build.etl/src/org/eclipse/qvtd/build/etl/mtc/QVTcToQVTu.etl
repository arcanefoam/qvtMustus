pre {
  "QVTc to QVTu".println();
  // The user must define a direction and a mode
  var inputDomain : new String = "uml";
  //var outputDomain : new String = "rdbms";
  var isUpdate = new Boolean = false;
  var isCreate = new Boolean = true;
  
  if (isUpdate == isCreate) {
    // ERROR
  }
}

rule CoreModels 
    transform cm : Core!CoreModel
    to um : Core!CoreModel {
    
        um.name = cm.name;
        um.nestedPackage = cm.nestedPackage;
    }

rule Transformation
    transform ct : Core!Transformation
    to ut : Core!Transformation {
        
        ut.name = ct.name;
        ut.`extends` := ct.`extends`;
        ut.modelParameter := ct.modelParameter;
        ut.`rule` := ct.`rule`; 
    }
    
rule TypedModel
    transform ctp : Core!TypedModel    
    to utp : Core!TypedModel {
    
        utp.name = ctp.name;
        utp.dependsOn := ctp.dependsOn;
    }

rule Rule
    transform cr : Core!Rule
    to ur : Core!Rule {
    
        ur.overrides := cr.overrides;
        ur.domain := cr.domain;    
    }


rule InputDomain 
    transform cd : Core!Domain
    to ud : Core!Domain {
    
	    guard : cd.name == inputDomain
	    
	    ud.name = cd.name;
	    ud.isCheckable = false;
	    ud.isEnforceable = false;
    }
    

rule OutputDomain 
    transform cd : Core!Domain
    to ud : Core!Domain {
    
        guard : cd.name <> inputDomain
        
        ud.name = cd.name;
	    // If the write mode is create, remove all check keywords from output domains. If the write mode is update, keep them
	    if (isCreate) {
	        ud.isCheckable = false;
	    } else {
	        // Is update?
	        ud.isCheckable = cd.isCheckable;
	    }
    }    
        