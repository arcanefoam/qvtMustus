### Eclipse Workspace Patch 1.0
#P org.eclipse.ocl
Index: src/org/eclipse/ocl/parser/OCLKWLexer.java
===================================================================
RCS file: /cvsroot/modeling/org.eclipse.mdt/org.eclipse.ocl/plugins/org.eclipse.ocl/src/org/eclipse/ocl/parser/OCLKWLexer.java,v
retrieving revision 1.1
diff -u -r1.1 OCLKWLexer.java
--- src/org/eclipse/ocl/parser/OCLKWLexer.java	11 Oct 2007 23:05:00 -0000	1.1
+++ src/org/eclipse/ocl/parser/OCLKWLexer.java	19 Nov 2008 21:05:44 -0000
@@ -1,7 +1,7 @@
 /**
 * <copyright>
 *
-* Copyright (c) 2005, 2007 IBM Corporation and others.
+* Copyright (c) 2005, 2008 IBM Corporation and others.
 * All rights reserved.   This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
@@ -13,7 +13,7 @@
 *
 * </copyright>
 *
-* $Id: OCL_v200811051638.patch,v 1.1 2008/11/19 21:26:34 ewillink Exp $
+* $Id: OCL_v200811051638.patch,v 1.1 2008/11/19 21:26:34 ewillink Exp $
 */
 
 package org.eclipse.ocl.parser;
Index: src/org/eclipse/ocl/parser/AbstractOCLParser.java
===================================================================
RCS file: /cvsroot/modeling/org.eclipse.mdt/org.eclipse.ocl/plugins/org.eclipse.ocl/src/org/eclipse/ocl/parser/AbstractOCLParser.java,v
retrieving revision 1.2
diff -u -r1.2 AbstractOCLParser.java
--- src/org/eclipse/ocl/parser/AbstractOCLParser.java	4 Oct 2008 00:54:10 -0000	1.2
+++ src/org/eclipse/ocl/parser/AbstractOCLParser.java	19 Nov 2008 21:05:42 -0000
@@ -437,6 +437,7 @@
 		return result;
 	}
 
+	@Deprecated // use createEnumLiteralExpCS(PathNameCS,SimpleNameCS)
 	protected EnumLiteralExpCS createEnumLiteralExpCS(
 			PathNameCS pathNameCS,
 			String simpleName) {
Index: src/org/eclipse/ocl/parser/AbstractOCLAnalyzer.java
===================================================================
RCS file: /cvsroot/modeling/org.eclipse.mdt/org.eclipse.ocl/plugins/org.eclipse.ocl/src/org/eclipse/ocl/parser/AbstractOCLAnalyzer.java,v
retrieving revision 1.17
diff -u -r1.17 AbstractOCLAnalyzer.java
--- src/org/eclipse/ocl/parser/AbstractOCLAnalyzer.java	4 Oct 2008 00:54:10 -0000	1.17
+++ src/org/eclipse/ocl/parser/AbstractOCLAnalyzer.java	19 Nov 2008 21:05:42 -0000
@@ -125,7 +125,7 @@
 import org.eclipse.ocl.expressions.VariableExp;
 import org.eclipse.ocl.internal.l10n.OCLMessages;
 import org.eclipse.ocl.lpg.AbstractAnalyzer;
-import org.eclipse.ocl.lpg.BasicEnvironment;
+import org.eclipse.ocl.lpg.BasicEnvironment2;
 import org.eclipse.ocl.lpg.ProblemHandler;
 import org.eclipse.ocl.options.ParsingOptions;
 import org.eclipse.ocl.options.ProblemOption;
@@ -204,9 +204,16 @@
 		return getEnvironment().getAdapter(Environment.class);
 	}
     
+	/**
+	 * @since 1.3
+	 */
+	public AbstractOCLParser getAbstractParser() {
+		return (AbstractOCLParser) super.getParser();
+	}
+    
 	@Override
 	public AbstractOCLParser getParser() {
-		return (AbstractOCLParser) super.getParser();
+		return getAbstractParser();
 	}
 
 	protected C getBoolean() {
@@ -433,7 +440,7 @@
 							CollectionKind kind = getCollectionKind(
 							        getOCLType(env, property));
 							if (kind != null) {
-								acc.setType(getCollectionType(env, kind, assocClass));
+								acc.setType(getCollectionType(null, env, kind, assocClass));	// FIXME associate a CSTNode with the collection
 							} else {
 								acc.setType(assocClass);
 							}
@@ -566,7 +573,7 @@
 		result.setSource(source);	   
 		
 		// Performs method signature checking		
-		O oper = lookupOperation(operationCallExpCS, env, ownerType, operName, args);
+		O oper = lookupOperation(operationCallExpCS.getSimpleNameCS(), env, ownerType, operName, args);
 		
 		// sometimes we use the resolved name in case the environment's look-up
 		// supports aliasing
@@ -642,16 +649,22 @@
 			List<CT> constraints) {
 		
         PathNameCS pathNameCS = packageDeclarationCS.getPathNameCS();
-		EList<String> pathname = (pathNameCS == null)? null : pathNameCS.getSequenceOfNames();
-		
+		EList<String> pathname;
 		Environment<PK, C, O, P, EL, PM, S, COA, SSA, CT, CLS, E> env;
         
-        if (pathname == null) {
+        if (pathNameCS == null) {
             env = getOCLEnvironment();
             pathname = ECollections.emptyEList();
+			initASTMapping(env, createDummyPackage(env, packageDeclarationCS), packageDeclarationCS);
         } else {
+    		pathname = pathNameCS.getSequenceOfNames();
             try {
 				env = createPackageContext(getOCLEnvironment(), pathname);
+				if (env != null) {
+					PK contextPackage = env.getContextPackage();
+					initASTMapping(env, contextPackage, packageDeclarationCS);
+					pathNameCS.setAst(contextPackage);
+				}
 			} catch (LookupException e) {
     			ERROR(pathNameCS, "packageDeclarationCS", //$NON-NLS-1$
     					e.getMessage());
@@ -740,36 +753,38 @@
 		
 		O operation = null;
 		C classifier = null;
-		EList<String> operationName = new BasicEList<String>();
-		operationName.addAll(operationCS.getPathNameCS().getSequenceOfNames());
-		operationName.add(operationCS.getSimpleNameCS().getValue());
-
-		if (operationName.size() > 1) {
-			int lastName = operationName.size() - 1;
-			List<String> className = new java.util.ArrayList<String>(
-				operationName.subList(0, lastName));
-			classifier = lookupClassifier(operationCS, env, className);
+		EList<String> className = operationCS.getPathNameCS().getSequenceOfNames();
+		String operationName = operationCS.getSimpleNameCS().getValue();
+		EList<String> qualifiedOperationName = new BasicEList<String>();
+		qualifiedOperationName.addAll(className);
+		qualifiedOperationName.add(operationName);
+
+		EList<VariableCS> parameterCSs = operationCS.getParameters();
+		if (className.size() > 0) {
+			classifier = lookupClassifier(operationCS.getPathNameCS(), env, className);
 			
 			if (classifier != null) {
 				// create the classifier context as parent for the operation context
 				env = environmentFactory.createClassifierContext(env, classifier);
 				
 				// ensure that the classifier context has a 'self' variable
-				if (env.lookupLocal(SELF_VARIABLE_NAME) == null) {
-					genVariableDeclaration(operationCS, "operationCS", env,//$NON-NLS-1$
-						SELF_VARIABLE_NAME, classifier, null, true, true, true);
-				}
+				assert (env.getSelfVariable() != null) && (env.getSelfVariable() == env.lookupLocal(SELF_VARIABLE_NAME));
+//				if (env.lookupLocal(SELF_VARIABLE_NAME) == null) {
+//					genVariableDeclaration(operationCS, "operationCS", env,//$NON-NLS-1$
+//						SELF_VARIABLE_NAME, classifier, null, true, true, true);
+//				}
 				
 				// find the context operation
 				List<Variable<C, PM>> contextParms =
-					parametersCS(operationCS.getParameters(), env);
+					parametersCS(parameterCSs, env);
 				operation = lookupOperation(operationCS, env, 
-					classifier, operationName.get(lastName), contextParms);
+					classifier, operationName, contextParms);
+				operationCS.getSimpleNameCS().setAst(operation);
 
 				if (operation == null) {
 					String message = OCLMessages.bind(
 						OCLMessages.UnrecognizedContext_ERROR_,
-						makeString(operationName));
+						makeString(qualifiedOperationName));
 					ERROR(operationCS, "operationContextDeclCS", message);//$NON-NLS-1$
 					return null;
 				}
@@ -779,12 +794,22 @@
 		if (operation == null) {
 			String message = OCLMessages.bind(
 				OCLMessages.UnrecognizedContext_ERROR_,
-				makeString(operationName));
+				makeString(qualifiedOperationName));
+			ERROR(operationCS, "operationContextDeclCS", message);//$NON-NLS-1$
+			return null;
+		}
+		TypeCS operationTypeCS = operationCS.getTypeCS();
+		C opType1 = operationTypeCS != null ? typeCS(operationTypeCS, env) : getOclVoid();
+		C opType2 = uml.getOCLType(operation);
+		if (!TypeUtil.compatibleTypeMatch(env, opType1, opType2)) {
+			String message = OCLMessages.bind(
+				OCLMessages.TypeConformanceOperation_ERROR_,
+				makeString(qualifiedOperationName));
 			ERROR(operationCS, "operationContextDeclCS", message);//$NON-NLS-1$
 			return null;
 		}
 		
-		TRACE("operationCS", "context", operationName);//$NON-NLS-2$//$NON-NLS-1$
+		TRACE("operationCS", "context", qualifiedOperationName);//$NON-NLS-2$//$NON-NLS-1$
 
 		// this ensures that parameters are correctly renamed according to the
 		//   context declaration (thus ensuring that they do not mask attributes
@@ -801,6 +826,8 @@
 			OperationContextDeclCS operationContextCS,
 			O operation) {
 		
+		if (operationContextCS != null)
+			operationContextCS.setAst(operation);
 		// create the operation context
 		Environment<PK, C, O, P, EL, PM, S, COA, SSA, CT, CLS, E> result =
 			environmentFactory.createOperationContext(env, operation);
@@ -866,7 +893,8 @@
 			Environment<PK, C, O, P, EL, PM, S, COA, SSA, CT, CLS, E> env,
 			PrePostOrBodyDeclCS prePostOrBodyDeclCS) {
 
-		Variable<C, PM> resultVar = null;
+		ExpressionInOCL<C, PM> spec = createExpressionInOCL();
+		initASTMapping(env, spec, prePostOrBodyDeclCS, null);
 		
 		O operation = env.getContextOperation();
 		
@@ -874,7 +902,9 @@
 		    (OperationContextDeclCS) prePostOrBodyDeclCS.eContainer();
 		
 		// create a disposable child operation context for this environment
-		env = createOperationContext(env, operationContext, operation);
+		env = createOperationContext(env, operationContext, operation);		
+		Variable<C, PM> selfVar = env.getSelfVariable();
+		spec.setContextVariable(selfVar);
 		
 		C operationType = getOCLType(env, operation);
         if (operationType instanceof VoidType) {
@@ -882,7 +912,7 @@
         }
         
 		String stereotype = null;
-		
+		Variable<C, PM> resultVar = null;
 		switch (prePostOrBodyDeclCS.getKind().getValue()) {
 			case PrePostOrBodyEnum.PRE:
 				stereotype = UMLReflection.PRECONDITION;
@@ -895,8 +925,10 @@
 				// same type as the operation
 				if ((operationType != null) && (env.lookupLocal(Environment.RESULT_VARIABLE_NAME) == null)) {
 					resultVar = genVariableDeclaration(
-						prePostOrBodyDeclCS, "prePostOrBodyDeclCS0", env, //$NON-NLS-1$
+						null, "prePostOrBodyDeclCS0", env, //$NON-NLS-1$
 						Environment.RESULT_VARIABLE_NAME, operationType, null, true, true, false);
+					initASTMapping(env, resultVar, prePostOrBodyDeclCS, null);
+					spec.setResultVariable(resultVar);
 				}
 
 				break;
@@ -909,8 +941,10 @@
 				// condition constraint
 				if ((operationType != null) && (env.lookupLocal(Environment.RESULT_VARIABLE_NAME) == null)) {
 					resultVar = genVariableDeclaration(
-						prePostOrBodyDeclCS, "prePostOrBodyDeclCS", env, //$NON-NLS-1$
+						null, "prePostOrBodyDeclCS", env, //$NON-NLS-1$
 						Environment.RESULT_VARIABLE_NAME, operationType, null, true, true, false);
+					initASTMapping(env, resultVar, prePostOrBodyDeclCS, null);
+					spec.setResultVariable(resultVar);
 				}
 
 				break;
@@ -931,15 +965,17 @@
 			SimpleNameCS simpleNameCS = prePostOrBodyDeclCS.getSimpleNameCS();
 			if (simpleNameCS != null) {
                 uml.setConstraintName(astNode, simpleNameCS.getValue());
+                simpleNameCS.setAst(astNode);
 			}
 			
 			List<EObject> constrainedElement = uml.getConstrainedElements(astNode);
 			constrainedElement.add((EObject) operation);
 			
 			C owner = uml.getOwningClassifier(operation);
-			if (owner != env.getSelfVariable().getType()) {
+			C selfVarType = selfVar.getType();
+			if (owner != selfVarType) {
 				// implicitly redefining the operation in a specializing classifier
-				constrainedElement.add((EObject) env.getSelfVariable().getType());
+				constrainedElement.add((EObject) selfVarType);
 				
 				if (operationContext != null) {
     	            // check settings for using inherited feature context in
@@ -958,19 +994,15 @@
 				}
 			}
 			
-			ExpressionInOCL<C, PM> spec = createExpressionInOCL();
-			initASTMapping(env, spec, prePostOrBodyDeclCS);
 			spec.setBodyExpression(oclExpression);
 			
-			spec.setContextVariable(env.getSelfVariable());
-			spec.setResultVariable(resultVar);
-			
 			// compute the parameter variables
 			List<PM> parameters = uml.getParameters(operation);
 			Collection<Variable<C, PM>> vars = env.getVariables();
 			for (Variable<C, PM> var : vars) {
 				if (parameters.contains(var.getRepresentedParameter())) {
 					spec.getParameterVariable().add(var);
+					initASTMapping(env, var, prePostOrBodyDeclCS);
 				}
 			}
 			
@@ -1007,7 +1039,7 @@
 			List<CT> constraints) {
 
 		EList<String> pathName = propertyContextCS.getPathNameCS().getSequenceOfNames();
-		C owner = lookupClassifier(propertyContextCS, env, pathName);
+		C owner = lookupClassifier(propertyContextCS.getPathNameCS(), env, pathName);
 		
 		if (owner == null) {
 			String message = OCLMessages.bind(
@@ -1025,7 +1057,7 @@
 		SimpleNameCS simplenameCS = propertyContextCS.getSimpleNameCS();
 		String simpleName = simplenameCS.getValue();
 		P property = lookupProperty(simplenameCS, env, owner, simpleName);
-		
+		propertyContextCS.setAst(property);
 		EList<String> propertyName = new BasicEList<String>();
 		propertyName.addAll(pathName);
 		propertyName.add(simpleName);
@@ -1039,7 +1071,7 @@
 		}
 		
 		C type = typeCS(propertyContextCS.getTypeCS(), env);
-		C propertyType = TypeUtil.getPropertyType(env, owner, property);
+		C propertyType = getPropertyType(simplenameCS, env, owner, property);
 		if ((type == null) || !TypeUtil.exactTypeMatch(env, propertyType, type)) {
 			String message = OCLMessages.bind(
 				OCLMessages.UnrecognizedContext_ERROR_,
@@ -1166,7 +1198,7 @@
 		}
 		
 		ExpressionInOCL<C, PM> spec = createExpressionInOCL();
-		initASTMapping(env, spec, initOrDerValueCS);
+		initASTMapping(env, spec, initOrDerValueCS, null);
 		spec.setBodyExpression(oclExpression);
 		
 		spec.setContextVariable(env.getSelfVariable());
@@ -1203,7 +1235,7 @@
 		Environment<PK, C, O, P, EL, PM, S, COA, SSA, CT, CLS, E> result = null;
 		
 		EList<String> pathName = classifierContextDeclCS.getPathNameCS().getSequenceOfNames();
-		C type = lookupClassifier(classifierContextDeclCS, env, pathName);
+		C type = lookupClassifier(classifierContextDeclCS.getPathNameCS(), env, pathName);
 		
 		if (type == null) {
 			String message = OCLMessages.bind(
@@ -1216,7 +1248,7 @@
 		type = uml.asOCLType(type);
 
 		result = environmentFactory.createClassifierContext(env, type);
-		
+		classifierContextDeclCS.setAst(type);
         if (result.getSelfVariable() == null) {
             // ensure that the classifier context has a "self" variable
     		genVariableDeclaration(classifierContextDeclCS, "classifierContextDeclCS", result, //$NON-NLS-1$
@@ -1300,7 +1332,6 @@
 			oclExpressionCS(invCS.getExpressionCS(), env);
 
 		CT astNode = createConstraint();
-		initASTMapping(env, astNode, invCS);
 		
 		SimpleNameCS simpleNameCS = invCS.getSimpleNameCS();
 
@@ -1313,10 +1344,14 @@
 		constrainedElement.add((EObject) type);
 		
 		ExpressionInOCL<C, PM> spec = createExpressionInOCL();
-		initASTMapping(env, spec, invCS);
+		initASTMapping(env, astNode, invCS);
+		initASTMapping(env, env.getSelfVariable(), invCS, null);
+		initASTMapping(env, spec, invCS.getExpressionCS(), null);
 		spec.setBodyExpression(oclExpression);
 		
 		spec.setContextVariable(env.getSelfVariable());
+		if (simpleNameCS != null)
+			 simpleNameCS.setAst(spec.getContextVariable());
 		
         uml.setSpecification(astNode, spec);
         uml.setStereotype(astNode, UMLReflection.INVARIANT);
@@ -1343,7 +1378,6 @@
 		OCLExpression<C> expression = null;
 		
 		CT astNode = createConstraint();
-		initASTMapping(env, astNode, defCS);
 		
 		Variable<C, PM> variable = null;
 		C operType = null;
@@ -1359,7 +1393,11 @@
 		constrainedElement.add((EObject) contextClassifier);
 		
 		ExpressionInOCL<C, PM> spec = createExpressionInOCL();
-		initASTMapping(env, spec, defCS);
+		initASTMapping(env, astNode, defCS);
+		initASTMapping(env, env.getSelfVariable(), defCS, null);
+		initASTMapping(env, spec, defExpr);
+		if (simpleNameCS != null)
+			 simpleNameCS.setAst(spec.getContextVariable());
         uml.setSpecification(astNode, spec);
         uml.setStereotype(astNode, UMLReflection.DEFINITION);
 		
@@ -1369,8 +1407,8 @@
 				contextEnv = env;
 				
 				variable = variableDeclarationCS(defExpr.getVariableCS(), contextEnv, false);
-				
-				P existing = lookupProperty(defExpr.getVariableCS(),
+				spec.setResultVariable(variable);
+				P existing = lookupProperty(null,
 				        env,
 						contextClassifier,
 						variable.getName());
@@ -1406,7 +1444,7 @@
 				
 				String operName = operCS.getSimpleNameCS().getValue();
 				
-				O existing = lookupOperation(operCS, env, contextClassifier, operName, params);
+				O existing = lookupOperation(null, env, contextClassifier, operName, params);
 				if (existing != null) {
 					ERROR(defCS, "defCS", //$NON-NLS-1$
 						OCLMessages.bind(OCLMessages.DuplicateOperation_ERROR_,
@@ -1421,10 +1459,14 @@
 				//    it will resolve correctly
 				feature = (EObject) env.defineOperation(
 						contextClassifier,
-						defExpr.getOperationCS().getSimpleNameCS().getValue(),
+						operName,
 						operType,
 						params,
 						astNode);
+				operCS.setAst(feature);
+				operCS.getSimpleNameCS().setAst(feature);
+				if (operCS.getPathNameCS() != null)
+					operCS.getPathNameCS().setAst(contextClassifier);
                 if (getEnvironment().getValue(ParsingOptions.DEFINITION_CONSTRAINS_FEATURE)) {
                     constrainedElement.add(feature);
                 }
@@ -1576,6 +1618,7 @@
 
 		if (typeCS instanceof PrimitiveTypeCS) {
 			astNode = primitiveTypeCS(((PrimitiveTypeCS)typeCS).getType(), env);
+			typeCS.setAst(astNode);
 		} else if (typeCS instanceof PathNameCS) {
 			astNode = lookupClassifier(typeCS, env, ((PathNameCS)typeCS).getSequenceOfNames());
 			if (astNode == null) {
@@ -1583,7 +1626,7 @@
 						OCLMessages.UnrecognizedType_ERROR_,
 						formatPath(((PathNameCS)typeCS).getSequenceOfNames()));
 				ERROR(typeCS, "typeCS", message);//$NON-NLS-1$
-				astNode = getOclVoid();
+				astNode = createDummyInvalidType(env, typeCS, message);
 			}
 		} else if (typeCS instanceof CollectionTypeCS ||
 				typeCS instanceof TupleTypeCS) {
@@ -1662,7 +1705,7 @@
 		CollectionKind kind = collectionTypeIdentifierCS(collectionTypeCS.getCollectionTypeIdentifier());
 		C type = typeCS(collectionTypeCS.getTypeCS(), env);
 	
-		C result = getCollectionType(env, kind, type);
+		C result = getCollectionType(collectionTypeCS, env, kind, type);
 		
 		@SuppressWarnings("unchecked")
 		CollectionType<C, O> astNode = (CollectionType<C, O>) result;
@@ -1835,6 +1878,7 @@
 
 		SimpleNameCS simpleNameCS = variableExpCS.getSimpleNameCS();
 		OCLExpression<C> astNode = simpleNameCS(simpleNameCS, env, null);
+		variableExpCS.setAst(astNode);
 		List<OCLExpression<C>> qualifiers = qualifiersCS(variableExpCS.getArguments(), env, astNode);
 
 		if (variableExpCS.getIsMarkedPreCS().isPre()) {
@@ -1880,13 +1924,14 @@
 	 * @param var the referred variable
 	 * 
 	 * @return the variable expression
+	 * @since 1.3
 	 */
-	private VariableExp<C, PM> createVariableExp(
+	protected VariableExp<C, PM> createVariableExp(
 			Environment<PK, C, O, P, EL, PM, S, COA, SSA, CT, CLS, E> env,
 			CSTNode cst, Variable<C, PM> var) {
 		VariableExp<C, PM> result = oclFactory.createVariableExp();
 
-		initASTMapping(env, result, cst);
+		initASTMapping(env, result, cst, var);
 
 		if (var != null) {
 			result.setType(var.getType());
@@ -1954,7 +1999,7 @@
 					PropertyCallExp<C, P> ref = oclFactory.createPropertyCallExp();
 					initASTMapping(env, ref, arg);
 					ref.setReferredProperty(property);
-					ref.setType(TypeUtil.getPropertyType(env, sourceType, property));
+					ref.setType(getPropertyType(qualifier, env, sourceType, property));
 					
 					if (source == null) {
 						Variable<C, PM> implicitSource = env.lookupImplicitSourceForProperty(simpleName);
@@ -2293,7 +2338,7 @@
 
 					CollectionKind kind = getCollectionKind(getOCLType(env, end));
 					if (kind != null) {
-						acrefType = getCollectionType(env, kind, assocClass);
+						acrefType = getCollectionType(simpleNameCS, env, kind, assocClass);
 					} else {
 						acrefType = assocClass;
 					}
@@ -2338,7 +2383,9 @@
 			SimpleNameCS simpleNameCS,
 			Environment<PK, C, O, P, EL, PM, S, COA, SSA, CT, CLS, E> env,
 			OCLExpression<C> source, C owner, String simpleName) {
-
+		if (simpleName == null) {
+			return null;
+		}
 		PropertyCallExp<C, P> result = null;
 
 		P property = lookupProperty(simpleNameCS, env, owner, simpleName);
@@ -2346,9 +2393,9 @@
 			TRACE("variableExpCS", "Property: " + simpleName);//$NON-NLS-2$//$NON-NLS-1$
 
 			result = oclFactory.createPropertyCallExp();
-			initASTMapping(env, result, simpleNameCS);
+			initASTMapping(env, result, simpleNameCS, null);
 			result.setReferredProperty(property);
-			result.setType(TypeUtil.getPropertyType(env, owner, property));
+			result.setType(getPropertyType(simpleNameCS, env, owner, property));
 
 			if (source != null) {
 				result.setSource(source);
@@ -2396,15 +2443,14 @@
 	protected TypeExp<C> simpleTypeName(SimpleNameCS simpleNameCS,
 			Environment<PK, C, O, P, EL, PM, S, COA, SSA, CT, CLS, E> env,
 			OCLExpression<C> source, C classifier, String simpleName) {
+		if (simpleNameCS.getAst() != null)		// Non-null when invoked from variableExpCS, so there is
+			return null;						//  no point trying to turn the variable name into a type
 
 		TypeExp<C> result = null;
 
 		// if we have a source, then this is a feature call
 		if ((classifier == null) && (source == null)) {
-			List<String> names = new java.util.ArrayList<String>(1);
-			names.add(simpleName);
-
-			classifier = lookupClassifier(simpleNameCS, env, names);
+			classifier = lookupClassifier(simpleNameCS, env, Collections.singletonList(simpleName));
 		}
 
 		if (classifier != null) {
@@ -2497,7 +2543,7 @@
 			ERROR(simpleNameCS, "variableExpCS", message);//$NON-NLS-1$
 		}
 
-		return createDummyInvalidLiteralExp();
+		return createDummyInvalidLiteralExp(env, simpleNameCS);
 	}
 
 	/**
@@ -2521,7 +2567,7 @@
 			.getElementType();
 		
 		IteratorExp<C, PM> result = oclFactory.createIteratorExp();
-		initASTMapping(env, result, cstNode);		
+		initASTMapping(env, result, cstNode, null);		
 		Variable<C, PM> itervar =
 			genVariableDeclaration(cstNode, "modelPropertyCallCS", env,//$NON-NLS-1$
 						null, sourceElementType, null, false, true, false);
@@ -2558,12 +2604,14 @@
 		if (source.getType() instanceof SequenceType ||
 				source.getType() instanceof OrderedSetType) {
 			C c = getCollectionType(
+					cstNode,
 					env,
 					CollectionKind.SEQUENCE_LITERAL,
 					bodyType);
 			result.setType(c);
 		} else {
 			C c = getCollectionType(
+					cstNode,
 					env,
 					CollectionKind.BAG_LITERAL,
 					bodyType);
@@ -3074,12 +3122,12 @@
 
 		EL literal = null;
         P attribute = null;
-		C enumType = lookupClassifier(enumLiteralExpCS, env, sequenceOfNames);
+		C enumType = lookupClassifier(enumLiteralExpCS.getPathNameCS(), env, sequenceOfNames);
 		if (enumType == null) {
 			
 			// Check to see whether the pathname corresponds to a type
 			sequenceOfNames.add(lastToken);
-			C type = lookupClassifier(enumLiteralExpCS, env, sequenceOfNames);
+			C type = lookupClassifier(enumLiteralExpCS.getSimpleNameCS(), env, sequenceOfNames);
 			if (type == null) {
 				String message = OCLMessages.bind(
 						OCLMessages.UnrecognizedType_ERROR_,
@@ -3087,6 +3135,7 @@
 				ERROR(enumLiteralExpCS, "enumerationOrClassLiteralExpCS", message);//$NON-NLS-1$
 			} else {
                 astNode = typeCS(enumLiteralExpCS, env, type);
+                enumLiteralExpCS.getPathNameCS().setAst(uml.getPackage(type));
 			}
 		} else {
             if (uml.isEnumeration(enumType)) {
@@ -3115,6 +3164,7 @@
     			litExp.setReferredEnumLiteral(literal);
     			astNode = litExp;
     			astNode.setType(enumType);
+                enumLiteralExpCS.getSimpleNameCS().setAst(literal);
             } else if (attribute != null) {
                 if (!uml.isStatic(attribute)) {
                     String message = OCLMessages.bind(
@@ -3127,20 +3177,21 @@
                 PropertyCallExp<C, P> pcExp = oclFactory.createPropertyCallExp();
         		initASTMapping(env, pcExp, enumLiteralExpCS);
                 astNode = pcExp;
-                
+                enumLiteralExpCS.getSimpleNameCS().setAst(attribute);
+                enumLiteralExpCS.getPathNameCS().setAst(enumType);
                 TypeExp<C> typeExp = typeCS(enumLiteralExpCS, env, enumType);
                 initStartEndPositions(typeExp, enumLiteralExpCS.getPathNameCS());
                 
                 pcExp.setSource(typeExp);
                 pcExp.setReferredProperty(attribute);
-                pcExp.setType(TypeUtil.getPropertyType(env, enumType, attribute));
+                pcExp.setType(getPropertyType(enumLiteralExpCS.getSimpleNameCS(), env, enumType, attribute));
                 
                 initPropertyPositions(pcExp, enumLiteralExpCS.getSimpleNameCS());
             } else {
                 // try looking for a nested classifier
                 sequenceOfNames.add(lastToken);
                 
-                C type = lookupClassifier(enumLiteralExpCS, env, sequenceOfNames);
+                C type = lookupClassifier(enumLiteralExpCS.getSimpleNameCS(), env, sequenceOfNames);
                 if (type == null) {
                     String message = OCLMessages.bind(
                         OCLMessages.UnrecognizedEnum_ERROR_,
@@ -3148,6 +3199,8 @@
                     ERROR(enumLiteralExpCS, "enumerationOrClassLiteralExpCS", message);//$NON-NLS-1$
                 } else {
                     astNode = typeCS(enumLiteralExpCS, env, type);
+                    enumLiteralExpCS.getSimpleNameCS().setAst(type);
+                    enumLiteralExpCS.getPathNameCS().setAst(uml.getPackage(type));
                 }
             }
 		}
@@ -3171,7 +3224,7 @@
         C type) {
         
         TypeExp<C> astNode = oclFactory.createTypeExp();
-		initASTMapping(env, astNode, cstNode);
+		initASTMapping(env, astNode, cstNode, null);
         astNode.setReferredType(type);
         astNode.setType(getTypeType(cstNode, env, type));
         
@@ -3239,10 +3292,10 @@
 		
 		if (collectionParts.isEmpty()) {
 			// absolute wildcard element type
-			resultType = getCollectionType(env, kind,
+			resultType = getCollectionType(collectionLiteralExpCS, env, kind,
 					env.getOCLStandardLibrary().getOclVoid());
 		} else {
-			resultType = getCollectionType(env, kind, type);
+			resultType = getCollectionType(collectionLiteralExpCS, env, kind, type);
 		}
 		
 		astNode.setType(resultType);
@@ -3384,16 +3437,16 @@
    	  	 */
 		if (!(astNode.getType() instanceof CollectionType)) {
 			CollectionLiteralExp<C> astNode1 = oclFactory.createCollectionLiteralExp();
-			initASTMapping(env, astNode1, oclExpressionCS);
+			initASTMapping(env, astNode1, oclExpressionCS, null);
 			astNode1.setKind(CollectionKind.SET_LITERAL);
 			List<CollectionLiteralPart<C>> collectionParts = astNode1.getPart();
 			CollectionItem<C> collItem = oclFactory.createCollectionItem();
-			initASTMapping(env, collItem, oclExpressionCS);
+			initASTMapping(env, collItem, oclExpressionCS, null);
 			collItem.setType(astNode.getType());
 			collItem.setItem(astNode);				
 			collectionParts.add(collItem);
 			
-			C type = getCollectionType(env, astNode1.getKind(), astNode.getType());
+			C type = getCollectionType(oclExpressionCS, env, astNode1.getKind(), astNode.getType());
 			
 			astNode1.setType(type);
 			
@@ -3420,25 +3473,25 @@
 			IteratorExpCS iteratorExpCS,
 			Environment<PK, C, O, P, EL, PM, S, COA, SSA, CT, CLS, E> env) {
 		
-		IteratorExp<C, PM> astNode;
-		
 		OCLExpression<C> source =
 			getCollectionSourceExpression(iteratorExpCS.getSource(), env);
+		if (source == null) {
+            return null;
+        }
 		String name = iteratorExpCS.getSimpleNameCS().getValue();
 
 		Variable<C, PM> vdcl = null;
 		Variable<C, PM> vdcl1 = null;
-		OCLExpression<C> expr = null;
-		List<Variable<C, PM>> iterators = null;
-	
+		
+		IteratorExp<C, PM> astNode = oclFactory.createIteratorExp();
+		initASTMapping(env, astNode, iteratorExpCS);
+		astNode.setName(name);
+		resolveIteratorOperation(iteratorExpCS.getSimpleNameCS(), env);
+		List<Variable<C, PM>> iterators = astNode.getIterator();	
 		
 		if (iteratorExpCS.getVariable1() != null) {
 			vdcl = variableDeclarationCS(iteratorExpCS.getVariable1(), env, true);
 				
-			astNode = oclFactory.createIteratorExp();
-			initASTMapping(env, astNode, iteratorExpCS);
-			astNode.setName(name);
-			iterators = astNode.getIterator();	
 			if (vdcl.getType() == null) {
 				C sourceType = source.getType();
 				if (sourceType instanceof CollectionType) {
@@ -3467,10 +3520,6 @@
 
 		} else  {
 
-			astNode = oclFactory.createIteratorExp();
-			initASTMapping(env, astNode, iteratorExpCS);
-			astNode.setName(name);
-			iterators = astNode.getIterator();	
 			// Synthesize the iterator expression.
 			@SuppressWarnings("unchecked")
 			CollectionType<C, O> ct = (CollectionType<C, O>) source.getType();
@@ -3481,8 +3530,9 @@
 		}
 		
 		OCLExpressionCS exprCS = iteratorExpCS.getBody();
+		OCLExpression<C> expr = null;
 
-		if ((source != null) && isErrorNode(source)) {
+		if (isErrorNode(source)) {
 			// don't attempt to parse iterator body for an unparseable source
 			expr = createDummyInvalidLiteralExp(env, iteratorExpCS);
 			// don't parse call expressions sourced on this result
@@ -3560,6 +3610,15 @@
 
 		return astNode;
 	}
+
+	/**
+	 * Assign the AST Operation target for an iterator reference from the CST.
+	 * @param simpleNameCS
+	 * @param env
+	 * @since 1.3
+	 */
+	protected void resolveIteratorOperation(SimpleNameCS simpleNameCS,
+			Environment<PK, C, O, P, EL, PM, S, COA, SSA, CT, CLS, E> env) {}
 	
 	/**
 	 * IterateExpCS
@@ -3618,8 +3677,9 @@
 		astNode = oclFactory.createIterateExp();
 		initASTMapping(env, astNode, iterateExpCS);
 		astNode.setName("iterate");			//$NON-NLS-1$
+		resolveIteratorOperation(iterateExpCS.getSimpleNameCS(), env);
 
-		if ((source != null) && isErrorNode(source)) {
+		if (isErrorNode(source)) {
 			// don't attempt to parse iterate body for an unparseable source
 			expr = createDummyInvalidLiteralExp(env, iterateExpCS);
 			// don't parse call expressions sourced on this result
@@ -3639,7 +3699,7 @@
 					OCLMessages.DeclarationType_ERROR_,
 					vdcl1.getName());
 			ERROR(vdcl, "iterateExpCS", message);//$NON-NLS-1$
-			vdcl1.setType(getOclVoid());
+			vdcl1.setType(createDummyInvalidType(env, iterateExpCS.getVariable1(), message));
 		}
 		
 		astNode.setType(vdcl1.getType());
@@ -3722,6 +3782,7 @@
 	            AssociationClassCallExp<C, P> callNode = (AssociationClassCallExp<C, P>) astNode;
 				checkNotReflexive(env, "modelPropertyCallExpCS", callNode);//$NON-NLS-1$
 			}
+			initASTMapping(env, astNode, modelPropertyCallExpCS);
 		}
 
 		return astNode;
@@ -3866,7 +3927,6 @@
         
 		astNode = genOperationCallExp(env, operationCallExpCS, "operationCallExpCS", operationName,//$NON-NLS-1$
 				source, operationSourceType, args);
-		
         if (isStatic) {
             @SuppressWarnings("unchecked")
             TypeType<C, O> typeType = (TypeType<C, O>) operationSourceType;
@@ -3894,7 +3954,7 @@
 			result = createImplicitCollect(source, astNode, env, operationCallExpCS);			
 	   	}
 
-		if ((source != null) && isErrorNode(source)) {
+		if (isErrorNode(source)) {
 			// don't attempt to parse navigation from an unparseable source
 			markAsErrorNode(result);
 		}
@@ -4021,30 +4081,48 @@
 			Environment<PK, C, O, P, EL, PM, S, COA, SSA, CT, CLS, E> env,
 			C elementType) {
 		
-		return TypeUtil.resolveSetType(env, elementType);
+		C setType = TypeUtil.resolveSetType(env, elementType);
+		initASTMapping(env, setType, cstNode);
+		return setType;
 	}
 	
 	protected C getOrderedSetType(CSTNode cstNode,
 			Environment<PK, C, O, P, EL, PM, S, COA, SSA, CT, CLS, E> env,
 			C elementType) {
 		
-		return TypeUtil.resolveOrderedSetType(env, elementType);
+		C orderedSetType = TypeUtil.resolveOrderedSetType(env, elementType);
+		initASTMapping(env, orderedSetType, cstNode);
+		return orderedSetType;
 	}
 	
 	protected C getBagType(CSTNode cstNode,
 			Environment<PK, C, O, P, EL, PM, S, COA, SSA, CT, CLS, E> env,
 			C elementType) {
 		
-		return TypeUtil.resolveBagType(env, elementType);
+		C bagType = TypeUtil.resolveBagType(env, elementType);
+		initASTMapping(env, bagType, cstNode);
+		return bagType;
 	}
 	
 	protected C getSequenceType(CSTNode cstNode,
 			Environment<PK, C, O, P, EL, PM, S, COA, SSA, CT, CLS, E> env,
 			C elementType) {
 		
-		return TypeUtil.resolveSequenceType(env, elementType);
+		C sequenceType = TypeUtil.resolveSequenceType(env, elementType);
+		initASTMapping(env, sequenceType, cstNode);
+		return sequenceType;
 	}
 	
+	protected C getCollectionType(CSTNode cstNode,
+			Environment<PK, C, O, P, EL, PM, S, COA, SSA, CT, CLS, E> env,
+			CollectionKind kind, C elementType) {		
+		@SuppressWarnings("deprecation")
+		C collectionType = getCollectionType(env, kind, elementType);
+		initASTMapping(env, collectionType, cstNode);
+		return collectionType;
+	}
+	
+	@Deprecated	// Use getCollectionType(cstNode, env, elementType)
 	protected C getCollectionType(
 			Environment<PK, C, O, P, EL, PM, S, COA, SSA, CT, CLS, E> env,
 			CollectionKind kind, C elementType) {
@@ -4055,25 +4133,44 @@
 	protected C getTupleType(CSTNode cstNode,
 			Environment<PK, C, O, P, EL, PM, S, COA, SSA, CT, CLS, E> env,
 			EList<? extends TypedElement<C>> parts) {
-		return TypeUtil.resolveTupleType(env, parts);
+		C tupleType = TypeUtil.resolveTupleType(env, parts);
+		initASTMapping(env, tupleType, cstNode);
+		return tupleType;
 	}
 	
 	protected C getTypeType(CSTNode cstNode,
 			Environment<PK, C, O, P, EL, PM, S, COA, SSA, CT, CLS, E> env,
 			C type) {
-		return TypeUtil.resolveTypeType(env, type);
+		C typeType = TypeUtil.resolveTypeType(env, type);
+		initASTMapping(env, typeType, cstNode);
+		return typeType;
 	}
 	
 	protected C getOperationMessageType(CSTNode cstNode,
 			Environment<PK, C, O, P, EL, PM, S, COA, SSA, CT, CLS, E> env,
 			O operation) {
-		return TypeUtil.resolveOperationMessageType(env, operation);
+		C operationMessageType = TypeUtil.resolveOperationMessageType(env, operation);
+		initASTMapping(env, operationMessageType, cstNode);
+		return operationMessageType;
 	}
 	
 	protected C getSignalMessageType(CSTNode cstNode,
 			Environment<PK, C, O, P, EL, PM, S, COA, SSA, CT, CLS, E> env,
 			C signal) {
-		return TypeUtil.resolveSignalMessageType(env, signal);
+		C signalMessageType = TypeUtil.resolveSignalMessageType(env, signal);
+		initASTMapping(env, signalMessageType, cstNode);
+		return signalMessageType;
+	}
+
+	/**
+	 * @since 1.3
+	 */
+	protected C getPropertyType(CSTNode cstNode,
+			Environment<PK, C, O, P, EL, PM, S, COA, SSA, CT, CLS, E> env,
+			C owner, P property) {
+		C propertyType = TypeUtil.getPropertyType(env, owner, property);
+		initASTMapping(env, propertyType, cstNode, property);
+		return propertyType;
 	}
 	
 	@SuppressWarnings("unchecked")
@@ -4104,6 +4201,7 @@
 	 * 
 	 * @see #markAsErrorNode(OCLExpression)
 	 */
+	@Deprecated // Use createDummyInvalidLiteralExp(Environment, CSTNode cstNode)
 	protected InvalidLiteralExp<C> createDummyInvalidLiteralExp() {
 		InvalidLiteralExp<C> result = oclFactory.createInvalidLiteralExp();
 		result.setType(getStandardLibrary().getInvalid());
@@ -4132,12 +4230,43 @@
 	protected InvalidLiteralExp<C> createDummyInvalidLiteralExp(
 			Environment<PK, C, O, P, EL, PM, S, COA, SSA, CT, CLS, E> env,
 			CSTNode cstNode) {
-		
+		@SuppressWarnings("deprecation")
 		InvalidLiteralExp<C> result = createDummyInvalidLiteralExp();
 		initASTMapping(env, result, cstNode);
 		
 		return result;
 	}
+
+	/**
+	 * Return the type used to terminate the AST reference from cstNode that
+	 * failed to be resolved due to message.
+	 * @param env
+	 * @param cstNode
+	 * @param message
+	 * @return
+	 * @since 1.3
+	 */
+	protected C createDummyInvalidType(
+			Environment<PK, C, O, P, EL, PM, S, COA, SSA, CT, CLS, E> env,
+			CSTNode cstNode,
+			String message) {
+		C astNode = getOclVoid();
+		cstNode.setAst(astNode);
+		return astNode;
+	}
+
+	/**
+	 * Return the package used to terminate the AST reference from an implicit PackageDeclarationCS.
+	 * @param env
+	 * @param packageDeclarationCS
+	 * @return
+	 * @since 1.3
+	 */
+	protected Object createDummyPackage(
+			Environment<PK, C, O, P, EL, PM, S, COA, SSA, CT, CLS, E> env,
+			PackageDeclarationCS packageDeclarationCS) {
+		return null;
+	}
 	
 	/**
 	 * <p>
@@ -4205,7 +4334,10 @@
 		try {
 			Environment.Lookup<PK, C, O, P> lookup = OCLUtil.getAdapter(env,
 			    Environment.Lookup.class);
-			return lookup.tryLookupClassifier(className);
+			C classifier = lookup.tryLookupClassifier(className);
+			if (cstNode != null)
+            	cstNode.setAst(classifier);
+			return classifier;
 		} catch (LookupException e) {
 			ERROR(cstNode, null, e.getMessage());
 			return e.getAmbiguousMatches().isEmpty() ? env
@@ -4227,7 +4359,10 @@
         try {
             Environment.Lookup<PK, C, O, P> lookup = OCLUtil.getAdapter(env,
                 Environment.Lookup.class);
-            return lookup.tryLookupOperation(owner, name, args);
+            O operation = lookup.tryLookupOperation(owner, name, args);
+            if (cstNode != null)
+            	cstNode.setAst(operation);
+			return operation;
         } catch (LookupException e) {
             ERROR(cstNode, null, e.getMessage());
             return e.getAmbiguousMatches().isEmpty() ? null
@@ -4242,7 +4377,10 @@
         try {
             Environment.Lookup<PK, C, O, P> lookup = OCLUtil.getAdapter(env,
                 Environment.Lookup.class);
-            return lookup.tryLookupProperty(owner, name);
+            P property = lookup.tryLookupProperty(owner, name);
+            if (cstNode != null)
+            	cstNode.setAst(property);
+			return property;
         } catch (LookupException e) {
             ERROR(cstNode, null, e.getMessage());
             return e.getAmbiguousMatches().isEmpty() ? null
@@ -4257,7 +4395,10 @@
         try {
             Environment.Lookup<PK, C, O, P> lookup = OCLUtil.getAdapter(env,
                 Environment.Lookup.class);
-            return lookup.tryLookupAssociationClassReference(owner, name);
+            C associationClassReference = lookup.tryLookupAssociationClassReference(owner, name);
+            if ((cstNode != null) && (associationClassReference != null))
+            	cstNode.setAst(associationClassReference);
+			return associationClassReference;
         } catch (LookupException e) {
             ERROR(cstNode, null, e.getMessage());
             return e.getAmbiguousMatches().isEmpty() ? null
@@ -4272,7 +4413,10 @@
         try {
             Environment.Lookup<PK, C, O, P> lookup = OCLUtil.getAdapter(env,
                 Environment.Lookup.class);
-            return lookup.tryLookupSignal(owner, name, args);
+            C signal = lookup.tryLookupSignal(owner, name, args);
+            if (cstNode != null)
+            	cstNode.setAst(signal);
+			return signal;
         } catch (LookupException e) {
             ERROR(cstNode, null, e.getMessage());
             return e.getAmbiguousMatches().isEmpty() ? null
@@ -4285,7 +4429,10 @@
 			Environment<PK, C, O, P, EL, PM, S, COA, SSA, CT, CLS, E> env,
 			C sourceType, List<String> statePath) {
 		try {
-			return env.lookupState(sourceType, statePath);
+			S state = env.lookupState(sourceType, statePath);
+            if (cstNode != null)
+            	cstNode.setAst(state);
+			return state;
         } catch (LookupException e) {
             ERROR(cstNode, null, e.getMessage());
             return e.getAmbiguousMatches().isEmpty() ? null
@@ -4316,18 +4463,37 @@
     }
 	
 	/**
-	 * Initialize the mapping of an object (typically an astNode) to its originating cstNode,
+	 * Initialize the symmetric mapping of an object (typically an astNode) to its originating cstNode,
 	 * so that AST-based analysis may report error messages exploiting the CST context, or
-	 * to support incremental AST/CST update.
+	 * to support incremental AST/CST update. Any pre-existing mapping is preserved. Mappings
+	 * involving a null object are ignored.
 	 * 
 	 * @param env
 	 * @param astNode
 	 * @param cstNode
 	 */
 	protected void initASTMapping(Environment<PK, C, O, P, EL, PM, S, COA, SSA, CT, CLS, E> env,
-			Object astNode, CSTNode cstNode) {
-		
-		OCLUtil.getAdapter(env, BasicEnvironment.class).initASTMapping(astNode, cstNode);
+			Object astNode, CSTNode cstNode) {		
+		initASTMapping(env, astNode, cstNode, astNode);
+	}
+
+	
+	/**
+	 * Initialize the asymmetric mapping of an object (typically an astNode) to its originating cstNode,
+	 * and of a cstNode to its consequent object (typically an astNode)
+	 * so that AST-based analysis may report error messages exploiting the CST context, or
+	 * to support incremental AST/CST update. Any pre-existing mapping is preserved. Each mapping
+	 * involving a null object is ignored, so that for instance the toAstNode may be set null to establish
+	 * only the fromAstNode to cstNode mapping.
+	 * 
+	 * @param env
+	 * @param fromAstNode
+	 * @param cstNode
+	 * @param toAstNode
+	 */
+	protected void initASTMapping(Environment<PK, C, O, P, EL, PM, S, COA, SSA, CT, CLS, E> env,
+			Object fromAstNode, CSTNode cstNode, Object toAstNode) {
+		OCLUtil.getAdapter(env, BasicEnvironment2.class).initASTMapping(fromAstNode, cstNode, toAstNode);
 	}
     
     /**
Index: src/org/eclipse/ocl/parser/OCLKWLexer.g
===================================================================
RCS file: /cvsroot/modeling/org.eclipse.mdt/org.eclipse.ocl/plugins/org.eclipse.ocl/src/org/eclipse/ocl/parser/OCLKWLexer.g,v
retrieving revision 1.1
diff -u -r1.1 OCLKWLexer.g
--- src/org/eclipse/ocl/parser/OCLKWLexer.g	11 Oct 2007 23:05:00 -0000	1.1
+++ src/org/eclipse/ocl/parser/OCLKWLexer.g	19 Nov 2008 21:05:44 -0000
@@ -1,7 +1,7 @@
 --/**
 -- * <copyright>
 -- *
--- * Copyright (c) 2005, 2007 IBM Corporation and others.
+-- * Copyright (c) 2005, 2008 IBM Corporation and others.
 -- * All rights reserved.   This program and the accompanying materials
 -- * are made available under the terms of the Eclipse Public License v1.0
 -- * which accompanies this distribution, and is available at
@@ -42,7 +42,7 @@
 	/./**
  * <copyright>
  *
- * Copyright (c) 2005, 2007 IBM Corporation and others.
+ * Copyright (c) 2005, 2008 IBM Corporation and others.
  * All rights reserved.   This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
Index: src/org/eclipse/ocl/parser/OCLParserprs.java
===================================================================
RCS file: /cvsroot/modeling/org.eclipse.mdt/org.eclipse.ocl/plugins/org.eclipse.ocl/src/org/eclipse/ocl/parser/OCLParserprs.java,v
retrieving revision 1.2
diff -u -r1.2 OCLParserprs.java
--- src/org/eclipse/ocl/parser/OCLParserprs.java	4 Oct 2008 00:54:10 -0000	1.2
+++ src/org/eclipse/ocl/parser/OCLParserprs.java	19 Nov 2008 21:05:48 -0000
@@ -16,7 +16,7 @@
 *
 * </copyright>
 *
-* $Id: OCL_v200811051638.patch,v 1.1 2008/11/19 21:26:34 ewillink Exp $
+* $Id: OCL_v200811051638.patch,v 1.1 2008/11/19 21:26:34 ewillink Exp $
 */
 
 package org.eclipse.ocl.parser;
@@ -32,8 +32,8 @@
             1,1,1,0,0,0,1,1,1,1,
             1,1,1,1,1,1,1,1,1,1,
             1,1,1,1,1,1,1,1,1,0,
-            0,0,0,1,1,1,0,1,0,1,
-            0,0,1,0,1,1,1,1,0,0,
+            0,0,0,1,1,1,0,1,0,0,
+            1,0,1,0,1,1,1,1,0,0,
             0,0,0,0,0,0,0,0,0,1,
             1,1,1,1,1,1,1,1,0
         };
@@ -45,414 +45,314 @@
         public final static short baseCheck[] = {0,
             1,1,1,1,1,1,1,1,1,1,
             1,1,1,1,1,1,1,1,1,1,
-            1,1,1,1,1,6,8,0,1,1,
-            3,0,1,1,1,1,1,3,3,1,
-            1,3,3,3,3,3,3,1,1,3,
-            3,3,3,1,1,3,3,3,3,3,
-            3,3,3,1,1,1,1,3,3,3,
-            3,1,1,3,3,3,3,1,1,2,
-            2,1,2,2,4,6,1,1,1,1,
-            3,2,2,5,5,1,1,1,1,1,
-            1,1,1,1,1,1,1,1,3,0,
-            1,1,1,1,1,1,1,3,3,4,
-            1,1,1,1,1,0,1,1,3,1,
-            1,3,2,3,1,1,1,1,1,4,
-            1,1,1,1,1,1,1,1,2,2,
-            2,2,1,1,4,4,4,4,4,4,
-            4,4,4,4,4,1,3,5,6,8,
-            1,3,5,3,0,1,1,1,1,1,
-            4,4,0,1,1,3,1,1,3,3,
-            1,1,5,5,5,5,5,5,5,5,
-            5,5,5,5,5,5,5,5,5,5,
-            5,5,5,5,5,2,2,5,0,1,
-            0,1,1,3,5,0,1,2,3,7,
-            5,5,0,1,1,3,1,1,3,1,
-            1,1,1,1,1,0,1,2,4,1,
-            0,1,1,2,1,1,1,7,4,4,
-            0,1,3,1,2,4,4,5,3,3,
-            1,2,4,4,4,-118,0,0,0,0,
-            0,0,0,0,0,0,0,0,0,0,
-            0,0,0,0,0,0,0,0,0,0,
-            0,0,0,0,0,0,0,0,0,0,
-            0,0,0,0,0,0,0,-124,0,0,
-            -2,-3,0,0,-38,0,0,-13,-4,-5,
-            0,-41,0,0,-16,-11,0,0,0,-83,
-            -128,0,0,-129,0,0,-14,-17,-40,-18,
-            -42,-12,-19,0,0,-271,0,0,0,0,
-            0,0,0,0,0,0,0,0,0,0,
-            0,0,0,0,0,0,0,0,0,0,
-            0,0,0,0,0,0,0,0,0,0,
-            0,0,0,0,0,0,0,0,0,0,
-            0,0,-127,0,0,0,0,0,0,0,
-            0,-126,0,0,0,0,0,0,0,0,
-            0,0,0,-272,0,0,0,0,0,0,
-            0,0,0,0,0,0,0,0,0,0,
-            0,0,0,0,0,0,0,0,0,0,
-            0,0,0,0,0,0,0,0,0,0,
-            0,0,0,0,0,0,-20,0,-21,-22,
-            -26,-27,-28,-29,0,-37,0,-69,0,-70,
-            -72,-73,-74,0,0,0,-75,-76,-77,0,
-            0,-125,0,0,0,0,0,0,0,0,
-            0,0,0,0,0,0,0,0,0,0,
-            0,0,0,0,0,0,0,0,0,0,
-            0,0,0,0,0,0,0,0,0,0,
-            0,0,0,-78,0,-46,0,-154,0,0,
-            0,0,0,0,0,0,0,0,0,0,
-            0,0,0,0,0,0,0,0,0,0,
-            0,0,0,0,0,0,0,0,0,0,
-            0,0,0,0,0,0,0,0,0,0,
-            0,-150,0,-156,0,0,0,0,0,0,
-            0,0,0,0,0,0,0,0,0,0,
-            0,0,0,0,0,0,0,0,0,0,
-            0,0,0,0,0,0,0,0,0,0,
-            0,0,0,0,0,0,0,-153,0,-157,
-            0,0,0,0,0,0,0,0,0,0,
-            0,0,0,0,0,0,0,0,0,0,
-            0,0,0,0,0,0,0,0,0,0,
-            0,0,0,0,0,0,0,0,0,0,
-            0,0,0,-222,0,-158,0,0,0,0,
-            0,0,0,0,0,0,0,0,0,0,
-            0,0,0,0,0,0,0,0,0,0,
-            0,0,0,0,0,0,0,0,0,0,
-            0,0,0,0,0,0,0,0,0,-259,
-            0,-159,0,0,0,0,0,0,0,0,
-            0,0,0,0,0,0,0,0,0,0,
-            0,0,0,0,0,0,0,0,0,0,
-            0,0,0,0,0,0,0,0,0,0,
-            0,0,0,0,0,-276,0,-160,0,0,
-            0,0,0,0,0,0,0,0,0,0,
-            0,0,0,0,0,0,0,0,0,0,
-            0,0,0,0,0,0,0,0,0,0,
-            0,0,0,0,0,0,0,0,0,0,
-            0,-307,0,-161,0,0,0,0,0,0,
-            0,0,0,0,0,0,0,0,0,0,
-            0,0,0,0,0,0,0,0,0,0,
-            0,0,0,0,0,0,0,0,0,0,
-            0,0,0,0,0,0,0,-309,0,-162,
-            0,0,0,0,0,0,0,0,0,0,
-            0,0,0,0,0,0,0,0,0,0,
-            0,0,0,0,0,0,0,0,0,0,
-            0,0,0,0,0,0,0,0,0,0,
-            0,0,0,-81,0,-163,0,0,0,0,
-            0,0,0,0,0,0,0,0,0,0,
-            0,0,0,0,0,0,0,0,0,0,
-            0,0,0,0,0,0,0,0,0,0,
-            0,0,0,0,0,0,0,-82,0,-84,
-            0,-164,0,0,0,0,0,0,0,0,
-            0,0,0,0,0,0,0,0,0,0,
-            0,0,0,0,0,0,0,0,0,0,
-            0,0,0,0,0,0,0,0,0,0,
-            0,0,0,-86,0,-87,0,-165,0,0,
-            0,0,0,0,0,0,0,0,0,0,
-            0,0,0,0,0,0,0,0,0,0,
-            0,0,0,0,0,0,0,0,0,0,
-            0,0,0,0,0,0,0,0,0,-88,
-            0,-89,0,-166,0,0,0,0,0,0,
-            0,0,0,0,0,0,0,0,0,0,
-            0,0,0,0,0,0,0,0,0,0,
-            0,0,0,0,0,0,0,0,0,0,
-            0,0,0,0,0,-90,0,-91,0,-167,
-            0,0,0,0,0,0,0,0,0,0,
+            1,1,1,1,1,1,1,1,1,1,
+            1,1,1,1,1,1,1,1,1,1,
+            1,1,1,1,1,1,1,1,1,1,
+            1,1,1,1,6,8,0,1,1,3,
+            0,1,1,1,1,1,3,3,1,1,
+            3,3,3,3,3,3,1,1,3,3,
+            3,3,1,1,3,3,3,3,3,3,
+            3,3,1,1,1,1,3,3,3,3,
+            1,1,3,3,3,3,1,1,2,2,
+            1,2,2,4,6,1,1,1,1,3,
+            2,2,5,5,1,1,1,1,1,1,
+            1,1,1,1,1,1,1,3,0,1,
+            1,1,1,1,1,1,3,3,4,1,
+            1,1,1,1,0,1,1,3,1,1,
+            3,2,3,1,1,1,1,1,4,1,
+            1,1,1,1,1,1,1,2,2,2,
+            2,1,1,4,6,8,6,8,1,3,
+            1,5,3,0,1,1,1,1,1,4,
+            4,0,1,1,3,1,1,3,3,1,
+            1,5,5,5,1,5,2,2,5,0,
+            1,0,1,1,3,4,7,5,5,0,
+            1,1,3,1,1,3,1,1,1,1,
+            1,1,0,1,2,4,1,0,1,1,
+            2,1,1,1,7,4,4,0,1,3,
+            1,2,4,4,3,3,3,1,2,4,
+            4,4,-88,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
-            0,-92,0,-93,0,-168,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
+            -92,0,0,-2,-3,0,0,0,0,-122,
+            -13,-4,0,0,-38,0,0,-41,0,0,
+            -68,0,0,-96,0,0,-5,-94,0,0,
+            -16,-40,0,0,0,0,0,0,0,0,
+            0,0,0,-177,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
-            0,0,0,0,0,0,0,-94,0,-95,
-            0,-169,0,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
+            0,0,0,-11,0,0,0,0,0,-157,
+            -12,0,-17,-18,0,0,0,0,-97,0,
+            0,-14,-19,-20,-21,-39,-22,-26,0,0,
+            -178,0,0,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
-            0,0,0,-96,0,-98,0,-170,0,0,
             0,0,0,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
-            0,0,0,0,0,0,0,0,0,-99,
-            0,-100,0,-171,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,-27,0,0,
+            -28,0,-29,-37,-42,-53,-54,-55,-56,-57,
+            -6,0,0,-58,-59,0,0,-93,0,0,
             0,0,0,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
-            0,0,0,0,0,-101,0,-102,0,-172,
             0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,-60,0,-7,
+            0,0,-50,0,-121,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
-            0,-103,0,-104,0,-180,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
+            0,0,0,-61,0,0,-8,0,0,-51,
+            0,-123,0,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
-            0,0,0,0,0,0,0,-105,0,-106,
-            0,-183,0,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
+            -62,0,0,-9,0,0,-52,0,-165,0,
             0,0,0,0,0,0,0,0,0,0,
-            0,0,0,-39,0,-107,0,-245,0,0,
             0,0,0,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
-            0,0,0,0,0,0,0,0,0,-108,
-            -109,-110,-111,-112,0,0,0,0,-113,-114,
-            -115,-116,-6,0,0,-117,-120,-123,0,0,
-            -253,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,-63,0,-66,
+            -67,-69,-71,-72,-73,-74,-75,-76,-77,-78,
+            -79,-80,-10,0,0,-81,-82,0,0,-171,
             0,0,0,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
-            0,0,0,0,-132,0,-260,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,-83,-84,
+            0,-85,-86,-87,-100,0,-176,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
-            0,0,0,0,0,0,0,0,-151,-152,
-            0,-173,0,-261,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,-185,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
-            0,0,0,0,0,-174,-177,0,-178,0,
-            -262,0,0,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
-            0,0,-179,-181,0,-182,0,-263,0,0,
+            0,0,0,0,-124,-125,-128,0,-129,-130,
+            -131,-64,0,-90,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
-            0,0,0,0,0,0,0,0,0,-184,
-            -185,0,-186,0,-264,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
+            0,0,-132,-65,0,-91,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
-            0,0,0,0,0,0,-193,-194,0,-195,
-            0,-265,0,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,-133,-136,0,-174,0,0,
             0,0,0,0,0,0,0,0,0,0,
-            0,0,0,-196,-197,0,-198,0,-266,0,
             0,0,0,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,-134,-137,0,-205,
             0,0,0,0,0,0,0,0,0,0,
-            -199,-200,0,-201,0,-267,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
-            0,0,0,0,0,0,0,-202,-203,0,
-            -204,0,-268,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,-135,-140,
+            -141,-142,-143,-144,-145,-147,-148,-149,-150,-151,
+            0,-30,0,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
-            0,0,0,0,-205,-206,0,-208,0,-269,
+            0,0,0,0,0,0,0,0,0,-31,
             0,0,0,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
-            0,-209,-210,0,-211,0,-270,0,0,0,
+            0,0,0,0,0,0,0,-32,0,0,
             0,0,0,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
-            0,0,0,0,0,0,0,0,-212,-213,
-            0,-214,0,-280,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,-33,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
-            0,0,0,0,0,-215,0,-216,0,-281,
             0,0,0,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
+            0,0,0,-34,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
-            0,-217,0,-218,0,-121,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
+            0,-36,0,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
-            0,0,0,0,0,0,0,-220,0,-122,
             0,0,0,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,-43,
             0,0,0,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
-            0,-223,0,-257,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,-49,0,0,
             0,0,0,0,0,0,0,0,0,0,
-            0,0,0,0,0,-224,0,-312,0,0,
             0,0,0,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
-            0,0,0,0,0,0,0,0,0,-225,
-            -226,-227,-228,-229,-230,-231,-232,-233,-234,-235,
-            -236,-237,0,-30,0,0,0,0,0,0,
+            0,0,0,0,0,-70,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
-            0,0,0,0,0,-31,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
+            0,0,0,-113,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
-            0,0,0,0,0,0,0,-32,0,0,
             0,0,0,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
+            0,-114,0,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
-            0,0,0,0,0,0,0,0,0,-33,
             0,0,0,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,-120,
             0,0,0,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
-            0,-34,0,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,-126,0,0,
             0,0,0,0,0,0,0,0,0,0,
-            0,0,0,-36,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
-            0,0,0,0,0,-43,0,0,0,0,
+            0,0,0,0,0,-146,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
-            0,0,0,0,0,0,0,-49,0,0,
             0,0,0,0,0,0,0,0,0,0,
+            0,0,0,-163,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
-            0,0,0,0,0,0,0,0,0,-85,
             0,0,0,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
+            0,-164,0,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
-            0,-145,0,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,-167,
             0,0,0,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
-            0,0,0,-175,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,-168,0,0,
             0,0,0,0,0,0,0,0,0,0,
-            0,0,0,0,0,-207,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
-            0,0,0,0,0,0,0,-221,0,0,
+            0,0,0,0,0,-195,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
-            0,0,0,0,0,0,0,0,0,-243,
             0,0,0,0,0,0,0,0,0,0,
+            0,0,0,-201,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
-            0,-244,0,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
+            0,-203,0,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
-            0,0,0,-247,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,-211,
             0,0,0,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
-            0,0,0,0,0,-249,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,-212,0,0,
             0,0,0,0,0,0,0,0,0,0,
-            0,0,0,0,0,0,0,-274,0,0,
             0,0,0,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
-            0,0,0,0,0,0,0,0,0,-301,
+            0,0,0,0,0,-109,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
-            0,-308,0,0,0,0,0,0,0,0,
+            -110,0,0,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
-            0,0,0,-310,0,0,0,0,0,0,
+            0,0,0,-111,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
-            0,0,0,0,0,-317,0,0,0,0,
+            0,0,0,0,0,0,-112,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
-            0,0,0,0,0,0,0,-318,0,0,
+            0,0,0,0,0,0,0,0,0,-103,
             0,0,0,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
-            0,0,0,0,0,0,0,0,0,-141,
             0,0,0,0,0,0,0,0,0,0,
+            -104,0,0,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
-            0,0,0,0,0,0,0,0,-142,0,
             0,0,0,0,0,0,0,0,0,0,
+            0,-105,0,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
-            0,0,0,0,0,-143,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
+            -106,0,0,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
-            0,0,-144,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,-107,
             0,0,0,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
-            0,0,0,0,0,0,0,0,0,-135,
             0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,-108,0,
             0,0,0,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
-            0,0,0,0,-136,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,-101,0,0,
             0,0,0,0,0,0,0,0,0,0,
-            0,0,0,0,0,0,0,0,0,-137,
             0,0,0,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
+            0,0,-102,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
-            0,0,-138,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,-98,0,0,
             0,0,0,0,0,0,0,0,0,0,
-            0,0,0,0,0,-139,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
-            0,0,0,0,0,0,0,0,-140,0,
+            -99,0,0,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
+            0,0,0,-47,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
-            0,-133,0,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,-48,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
-            -134,0,0,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
-            0,0,0,0,0,0,0,0,0,-130,
+            0,0,0,0,0,-127,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
-            0,0,0,0,0,0,-131,0,0,0,
+            0,0,0,0,0,0,-95,0,0,-152,
+            -153,0,0,0,0,0,0,0,0,-154,
+            -155,-156,-15,0,-1,0,0,-158,-159,-160,
+            -119,-161,-162,-172,-173,-138,-179,-23,-180,-196,
+            0,-182,0,0,-183,-184,-186,-187,-188,-189,
+            -190,-191,-192,-193,-194,-198,-197,0,-25,0,
+            0,-44,0,-206,0,0,-207,-208,-24,-45,
             0,0,0,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
-            0,0,0,-47,0,0,0,0,0,0,
+            -139,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,-89,0,0,
+            0,-35,-46,0,0,0,0,0,0,-166,
+            0,0,0,0,-115,0,-116,0,0,-117,
+            0,0,0,0,-204,0,0,0,0,-209,
+            0,-118,0,-169,-210,-213,-214,0,-175,0,
+            0,-181,0,-200,-170,0,0,-202,0,0,
+            0,0,0,-199,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
-            0,0,0,0,0,0,0,0,-48,0,
             0,0,0,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
-            0,0,0,-176,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
-            0,0,0,0,0,0,0,0,-1,-302,
-            0,-50,0,0,-238,-239,-7,0,0,-240,
-            -241,-23,-303,0,-242,0,0,-248,-24,-252,
-            -254,-255,-35,-256,-258,-15,0,-273,0,0,
-            -44,0,-45,0,0,-146,0,-275,0,0,
-            -97,-155,0,0,0,-277,0,0,0,0,
-            0,0,0,-278,0,0,0,-219,0,0,
-            0,0,0,0,0,0,0,0,0,0,
-            0,0,0,0,0,0,0,0,0,0,
-            -119,0,0,0,0,-147,0,0,-148,0,
-            -25,0,0,-311,0,0,0,0,-8,0,
-            0,0,-9,0,0,-10,0,0,-51,-149,
-            -246,0,-279,-282,0,-52,0,0,0,-53,
-            -54,-55,-56,-57,0,0,0,0,0,0,
-            -58,-59,-283,-60,-61,0,0,0,-62,-284,
-            0,0,0,0,0,0,0,-63,0,-64,
-            0,-65,0,0,0,0,-66,0,-67,-68,
-            0,0,0,0,0,0,-71,0,-79,0,
-            -80,-187,0,0,0,0,0,-188,-189,-190,
-            0,0,-191,-192,-250,-251,-306,-285,-286,0,
-            -287,0,-288,0,-289,-290,-291,-292,0,-293,
-            0,0,-294,-295,-296,-297,-298,-299,0,-300,
-            0,-304,0,0,-305,-313,-314,-315,-316,0,
-            0,0,-319,0,0,0,0,0,0,0
+            0,0,0,0,0
         };
     };
     public final static short baseCheck[] = BaseCheck.baseCheck;
@@ -462,417 +362,316 @@
 
     public interface BaseAction {
         public final static char baseAction[] = {
-            72,5,5,5,5,5,5,5,5,5,
-            5,5,5,5,5,5,5,5,5,5,
-            5,5,6,6,95,95,73,74,58,58,
-            60,60,50,50,39,39,40,41,40,41,
-            37,38,37,37,37,38,38,38,35,36,
-            35,36,35,36,33,34,33,34,33,34,
-            33,34,33,34,29,29,31,30,31,30,
-            31,30,27,28,27,28,27,28,9,25,
-            9,9,10,10,10,10,10,11,11,11,
-            11,11,12,12,12,12,2,2,2,1,
-            1,1,1,1,1,1,1,1,3,3,
-            77,77,13,13,13,13,13,13,14,14,
-            15,4,4,4,4,4,78,78,79,79,
-            61,61,62,62,62,17,17,17,17,17,
-            16,20,21,22,23,24,24,18,19,75,
-            75,75,75,81,81,82,82,82,82,82,
-            82,82,82,82,82,82,46,46,46,83,
-            83,44,44,44,64,59,59,47,47,47,
-            47,49,48,84,84,85,85,80,80,80,
-            80,63,63,63,63,7,7,7,7,7,
-            7,7,7,7,7,7,7,7,7,7,
-            7,7,7,7,8,7,65,65,65,42,
-            42,45,45,43,43,26,86,86,87,87,
-            32,76,76,66,66,67,67,55,55,55,
-            72,72,72,72,72,72,72,89,89,69,
-            88,90,90,70,70,51,51,51,54,68,
-            68,71,71,52,91,91,56,56,92,92,
-            53,93,93,57,57,57,1,96,4041,904,
-            478,4039,3872,89,90,72,340,82,87,88,
-            112,113,114,115,116,117,135,136,137,138,
-            139,73,79,950,67,54,55,994,65,1040,
-            49,996,41,1086,37,1656,1042,35,979,96,
-            1750,75,1057,22,118,1084,96,109,328,242,
-            914,3961,1084,96,1134,1082,328,128,130,3882,
-            70,1084,96,1985,1084,96,1986,402,1083,907,
-            1110,160,232,1117,1612,1657,161,96,4041,904,
-            478,4039,3872,89,90,72,340,82,87,88,
-            112,113,114,115,116,117,135,136,137,138,
-            139,73,79,950,67,54,55,994,65,1040,
-            49,996,41,1086,37,237,1042,35,254,255,
-            256,257,3889,823,96,4053,272,265,22,4054,
-            192,235,764,96,4053,83,84,22,4050,192,
-            151,248,4076,4078,161,96,4041,904,478,4039,
-            3872,89,90,72,340,82,87,88,112,113,
-            114,115,116,117,135,136,137,138,139,73,
-            79,950,67,54,55,994,65,1040,49,996,
-            41,1086,37,237,1042,35,149,1118,191,1120,
-            1129,404,479,233,332,152,550,191,615,235,
-            883,243,721,885,150,153,154,938,1085,1104,
-            4080,4078,406,96,4041,904,478,4039,3872,89,
-            90,72,340,82,87,88,112,113,114,115,
-            116,117,135,136,137,138,139,73,79,950,
-            67,54,55,994,65,1040,49,996,41,1086,
-            37,223,1042,35,1113,1753,889,1751,406,96,
-            4041,904,478,4039,3872,89,90,72,340,82,
-            87,88,112,113,114,115,116,117,135,136,
-            137,138,139,73,79,950,67,54,55,994,
-            65,1040,49,996,41,1086,37,223,1042,35,
-            3911,1753,889,2262,406,96,4041,904,478,4039,
-            3872,89,90,72,340,82,87,88,112,113,
-            114,115,116,117,135,136,137,138,139,73,
-            79,950,67,54,55,994,65,1040,49,996,
-            41,1086,37,223,1042,35,186,1753,889,2351,
-            406,96,4041,904,478,4039,3872,89,90,72,
-            340,82,87,88,112,113,114,115,116,117,
-            135,136,137,138,139,73,79,950,67,54,
-            55,994,65,1040,49,996,41,1086,37,223,
-            1042,35,228,1753,889,2352,406,96,4041,904,
-            478,4039,3872,89,90,72,340,82,87,88,
-            112,113,114,115,116,117,135,136,137,138,
-            139,73,79,950,67,54,55,994,65,1040,
-            49,996,41,1086,37,223,1042,35,229,1753,
-            889,2353,406,96,4041,904,478,4039,3872,89,
-            90,72,340,82,87,88,112,113,114,115,
-            116,117,135,136,137,138,139,73,79,950,
-            67,54,55,994,65,1040,49,996,41,1086,
-            37,223,1042,35,4003,1753,889,2354,406,96,
-            4041,904,478,4039,3872,89,90,72,340,82,
-            87,88,112,113,114,115,116,117,135,136,
-            137,138,139,73,79,950,67,54,55,994,
-            65,1040,49,996,41,1086,37,223,1042,35,
-            31,1753,889,2355,406,96,4041,904,478,4039,
-            3872,89,90,72,340,82,87,88,112,113,
-            114,115,116,117,135,136,137,138,139,73,
-            79,950,67,54,55,994,65,1040,49,996,
-            41,1086,37,223,1042,35,4087,1753,889,2356,
-            406,96,4041,904,478,4039,3872,89,90,72,
-            340,82,87,88,112,113,114,115,116,117,
-            135,136,137,138,139,73,79,950,67,54,
-            55,994,65,1040,49,996,41,1086,37,223,
-            1042,35,4089,1753,733,2357,406,96,4041,904,
-            478,4039,3872,89,90,72,340,82,87,88,
-            112,113,114,115,116,117,135,136,137,138,
-            139,73,79,950,67,54,55,994,65,1040,
-            49,996,41,1086,37,223,1042,35,893,1753,
-            230,2358,406,96,4041,904,478,4039,3872,89,
-            90,72,340,82,87,88,112,113,114,115,
-            116,117,135,136,137,138,139,73,79,950,
-            67,54,55,994,65,1040,49,996,41,1086,
-            37,223,1042,35,653,1753,68,2359,406,96,
-            4041,904,478,4039,3872,89,90,72,340,82,
-            87,88,112,113,114,115,116,117,135,136,
-            137,138,139,73,79,950,67,54,55,994,
-            65,1040,49,996,41,1086,37,223,1042,35,
-            911,1753,239,2360,406,96,4041,904,478,4039,
-            3872,89,90,72,340,82,87,88,112,113,
-            114,115,116,117,135,136,137,138,139,73,
-            79,950,67,54,55,994,65,1040,49,996,
-            41,1086,37,223,1042,35,972,1753,1139,2361,
-            406,96,4041,904,478,4039,3872,89,90,72,
-            340,82,87,88,112,113,114,115,116,117,
-            135,136,137,138,139,73,79,950,67,54,
-            55,994,65,1040,49,996,41,1086,37,223,
-            1042,35,939,1753,1047,2362,406,96,4041,904,
-            478,4039,3872,89,90,72,340,82,87,88,
-            112,113,114,115,116,117,135,136,137,138,
-            139,73,79,950,67,54,55,994,65,1040,
-            49,996,41,1086,37,223,1042,35,1003,1753,
-            1131,3875,406,96,4041,904,478,4039,3872,89,
-            90,72,340,82,87,88,112,113,114,115,
-            116,117,135,136,137,138,139,73,79,950,
-            67,54,55,994,65,1040,49,996,41,1086,
-            37,223,1042,35,284,1753,1145,3876,406,96,
-            4041,904,478,4039,3872,89,90,72,340,82,
-            87,88,112,113,114,115,116,117,135,136,
-            137,138,139,73,79,950,67,54,55,994,
-            65,1040,49,996,41,1086,37,223,1042,35,
-            896,1753,1013,3880,406,96,4041,904,478,4039,
-            3872,89,90,72,340,82,87,88,112,113,
-            114,115,116,117,135,136,137,138,139,73,
-            79,950,67,54,55,994,65,1040,49,996,
-            41,1086,37,223,1042,35,1149,1753,1155,3881,
-            406,96,4041,904,478,4039,3872,89,90,72,
-            340,82,87,88,112,113,114,115,116,117,
-            135,136,137,138,139,73,79,950,67,54,
-            55,994,65,1040,49,996,41,1086,37,223,
-            1042,35,1157,1753,1159,3885,406,96,4041,904,
-            478,4039,3872,89,90,72,340,82,87,88,
-            112,113,114,115,116,117,135,136,137,138,
-            139,73,79,950,67,54,55,994,65,1040,
-            49,996,41,1086,37,223,1042,35,1161,1753,
-            1163,3888,406,96,4041,904,478,4039,3872,89,
-            90,72,340,82,87,88,112,113,114,115,
-            116,117,135,136,137,138,139,73,79,950,
-            67,54,55,994,65,1040,49,996,41,1086,
-            37,223,1042,35,1015,1753,1165,3890,81,96,
-            4041,904,478,4039,3872,89,90,72,340,82,
-            87,88,112,113,114,115,116,117,135,136,
-            137,138,139,73,79,950,67,54,55,994,
-            65,1040,49,996,41,1086,37,1656,1042,35,
-            1167,1169,1171,1174,1176,254,255,256,257,1178,
-            1180,1183,1185,1065,96,33,1187,1190,1193,129,
-            130,406,96,4041,904,478,4039,3872,89,90,
-            72,340,82,87,88,112,113,114,115,116,
-            117,135,136,137,138,139,73,79,950,67,
-            54,55,994,65,1040,49,996,41,1086,37,
-            223,1042,35,350,1753,25,3983,477,96,4041,
-            904,478,4039,3872,89,90,72,340,82,87,
-            88,112,113,114,115,116,117,135,136,137,
-            138,139,73,79,950,67,54,55,994,65,
-            1040,49,996,41,1086,37,166,1042,35,1146,
-            1196,4058,105,4010,477,96,4041,904,478,4039,
-            3872,89,90,72,340,82,87,88,112,113,
-            114,115,116,117,135,136,137,138,139,73,
-            79,950,67,54,55,994,65,1040,49,996,
-            41,1086,37,166,1042,35,1151,1199,4058,1050,
-            4061,477,96,4041,904,478,4039,3872,89,90,
-            72,340,82,87,88,112,113,114,115,116,
-            117,135,136,137,138,139,73,79,950,67,
-            54,55,994,65,1040,49,996,41,1086,37,
-            166,1042,35,1108,859,4058,995,4063,477,96,
-            4041,904,478,4039,3872,89,90,72,340,82,
-            87,88,112,113,114,115,116,117,135,136,
-            137,138,139,73,79,950,67,54,55,994,
-            65,1040,49,996,41,1086,37,166,1042,35,
-            824,1201,4058,1202,4065,477,96,4041,904,478,
-            4039,3872,89,90,72,340,82,87,88,112,
-            113,114,115,116,117,135,136,137,138,139,
-            73,79,950,67,54,55,994,65,1040,49,
-            996,41,1086,37,166,1042,35,1204,1206,4058,
-            1208,4066,477,96,4041,904,478,4039,3872,89,
-            90,72,340,82,87,88,112,113,114,115,
-            116,117,135,136,137,138,139,73,79,950,
-            67,54,55,994,65,1040,49,996,41,1086,
-            37,166,1042,35,1210,1212,4058,1214,4067,477,
-            96,4041,904,478,4039,3872,89,90,72,340,
-            82,87,88,112,113,114,115,116,117,135,
-            136,137,138,139,73,79,950,67,54,55,
-            994,65,1040,49,996,41,1086,37,166,1042,
-            35,1216,1218,4058,1220,4068,477,96,4041,904,
-            478,4039,3872,89,90,72,340,82,87,88,
-            112,113,114,115,116,117,135,136,137,138,
-            139,73,79,950,67,54,55,994,65,1040,
-            49,996,41,1086,37,166,1042,35,1222,1224,
-            4058,1226,4070,477,96,4041,904,478,4039,3872,
-            89,90,72,340,82,87,88,112,113,114,
-            115,116,117,135,136,137,138,139,73,79,
-            950,67,54,55,994,65,1040,49,996,41,
-            1086,37,166,1042,35,1228,1230,4058,934,4073,
-            477,96,4041,904,478,4039,3872,89,90,72,
-            340,82,87,88,112,113,114,115,116,117,
-            135,136,137,138,139,73,79,950,67,54,
-            55,994,65,1040,49,996,41,1086,37,166,
-            1042,35,964,928,4058,1035,4074,477,96,4041,
-            904,478,4039,3872,89,90,72,340,82,87,
-            88,112,113,114,115,116,117,135,136,137,
-            138,139,73,79,950,67,54,55,994,65,
-            1040,49,996,41,1086,37,166,1042,35,1100,
-            236,4058,319,4075,406,96,4041,904,478,4039,
-            3872,89,90,72,340,82,87,88,112,113,
-            114,115,116,117,135,136,137,138,139,73,
-            79,950,67,54,55,994,65,1040,49,996,
-            41,1086,37,223,1042,35,325,1753,1236,4082,
-            406,96,4041,904,478,4039,3872,89,90,72,
-            340,82,87,88,112,113,114,115,116,117,
-            135,136,137,138,139,73,79,950,67,54,
-            55,994,65,1040,49,996,41,1086,37,223,
-            1042,35,1239,1753,1233,4085,335,96,4041,904,
-            478,4039,3872,89,90,72,340,82,87,88,
-            112,113,114,115,116,117,135,136,137,138,
-            139,73,79,950,67,54,55,994,65,1040,
-            49,996,41,1086,37,223,1042,35,1243,1704,
-            335,96,4041,904,478,4039,3872,89,90,72,
-            340,82,87,88,112,113,114,115,116,117,
-            135,136,137,138,139,73,79,950,67,54,
-            55,994,65,1040,49,996,41,1086,37,223,
-            1042,35,1244,1706,335,96,4041,904,478,4039,
-            3872,89,90,72,340,82,87,88,112,113,
-            114,115,116,117,135,136,137,138,139,73,
-            79,950,67,54,55,994,65,1040,49,996,
-            41,1086,37,223,1042,35,1247,3984,248,96,
-            4041,904,478,4039,3872,89,90,72,340,82,
-            87,88,112,113,114,115,116,117,135,136,
-            137,138,139,73,79,950,67,54,55,994,
-            65,1040,49,996,41,1086,37,237,1042,35,
-            1234,1248,1251,1252,1255,1256,1259,1260,1263,1264,
-            1268,1271,1272,236,335,96,4041,904,478,4039,
-            3872,89,90,72,340,82,87,88,112,113,
-            114,115,116,117,135,136,137,138,139,73,
-            79,950,67,54,55,994,65,1040,49,996,
-            41,1086,37,260,1042,35,335,96,4041,904,
-            478,4039,3872,89,90,72,340,82,87,88,
-            112,113,114,115,116,117,135,136,137,138,
-            139,73,79,950,67,54,55,994,65,1040,
-            49,996,41,1086,37,259,1042,35,335,96,
-            4041,904,478,4039,3872,89,90,72,340,82,
-            87,88,112,113,114,115,116,117,135,136,
-            137,138,139,73,79,950,67,54,55,994,
-            65,1040,49,996,41,1086,37,275,1042,35,
-            335,96,4041,904,478,4039,3872,89,90,72,
-            340,82,87,88,112,113,114,115,116,117,
-            135,136,137,138,139,73,79,950,67,54,
-            55,994,65,1040,49,996,41,1086,37,274,
-            1042,35,335,96,4041,904,478,4039,3872,89,
-            90,72,340,82,87,88,112,113,114,115,
-            116,117,135,136,137,138,139,73,79,950,
-            67,54,55,994,65,1040,49,996,41,1086,
-            37,273,1042,35,335,96,4041,904,478,4039,
-            3872,89,90,72,340,82,87,88,112,113,
-            114,115,116,117,135,136,137,138,139,73,
-            79,950,67,54,55,994,65,1040,49,996,
-            41,1086,37,266,1042,35,335,96,4041,904,
-            478,4039,3872,89,90,72,340,82,87,88,
-            112,113,114,115,116,117,135,136,137,138,
-            139,73,79,950,67,54,55,994,65,1040,
-            49,996,41,1086,37,173,1042,35,335,96,
-            4041,904,478,4039,3872,89,90,72,340,82,
-            87,88,112,113,114,115,116,117,135,136,
-            137,138,139,73,79,950,67,54,55,994,
-            65,1040,49,996,41,1086,37,1226,1042,35,
-            335,96,4041,904,478,4039,3872,89,90,72,
-            340,82,87,88,112,113,114,115,116,117,
-            135,136,137,138,139,73,79,950,67,54,
-            55,994,65,1040,49,996,41,1086,37,1565,
-            1042,35,335,96,4041,904,478,4039,3872,89,
-            90,72,340,82,87,88,112,113,114,115,
-            116,117,135,136,137,138,139,73,79,950,
-            67,54,55,994,65,1040,49,996,41,1086,
-            37,269,1042,35,335,96,4041,904,478,4039,
-            3872,89,90,72,340,82,87,88,112,113,
-            114,115,116,117,135,136,137,138,139,73,
-            79,950,67,54,55,994,65,1040,49,996,
-            41,1086,37,133,1042,35,335,96,4041,904,
-            478,4039,3872,89,90,72,340,82,87,88,
-            112,113,114,115,116,117,135,136,137,138,
-            139,73,79,950,67,54,55,994,65,1040,
-            49,996,41,1086,37,3898,1042,35,335,96,
-            4041,904,478,4039,3872,89,90,72,340,82,
-            87,88,112,113,114,115,116,117,135,136,
-            137,138,139,73,79,950,67,54,55,994,
-            65,1040,49,996,41,1086,37,225,1042,35,
-            335,96,4041,904,478,4039,3872,89,90,72,
-            340,82,87,88,112,113,114,115,116,117,
-            135,136,137,138,139,73,79,950,67,54,
-            55,994,65,1040,49,996,41,1086,37,134,
-            1042,35,335,96,4041,904,478,4039,3872,89,
-            90,72,340,82,87,88,112,113,114,115,
-            116,117,135,136,137,138,139,73,79,950,
-            67,54,55,994,65,1040,49,996,41,1086,
-            37,132,1042,35,335,96,4041,904,478,4039,
-            3872,89,90,72,340,82,87,88,112,113,
-            114,115,116,117,135,136,137,138,139,73,
-            79,950,67,54,55,994,65,1040,49,996,
-            41,1086,37,174,1042,35,335,96,4041,904,
-            478,4039,3872,89,90,72,340,82,87,88,
-            112,113,114,115,116,117,135,136,137,138,
-            139,73,79,950,67,54,55,994,65,1040,
-            49,996,41,1086,37,224,1042,35,335,96,
-            4041,904,478,4039,3872,89,90,72,340,82,
-            87,88,112,113,114,115,116,117,135,136,
-            137,138,139,73,79,950,67,54,55,994,
-            65,1040,49,996,41,1086,37,268,1042,35,
-            335,96,4041,904,478,4039,3872,89,90,72,
-            340,82,87,88,112,113,114,115,116,117,
-            135,136,137,138,139,73,79,950,67,54,
-            55,994,65,1040,49,996,41,1086,37,4086,
-            1042,35,335,96,4041,904,478,4039,3872,89,
-            90,72,340,82,87,88,112,113,114,115,
-            116,117,135,136,137,138,139,73,79,950,
-            67,54,55,994,65,1040,49,996,41,1086,
-            37,4088,1042,35,335,96,4041,904,478,4039,
-            3872,89,90,72,340,82,87,88,112,113,
-            114,115,116,117,135,136,137,138,139,73,
-            79,950,67,54,55,994,65,1040,49,996,
-            41,1086,37,167,1042,35,335,96,4041,904,
-            478,4039,3872,89,90,72,340,82,87,88,
-            112,113,114,115,116,117,135,136,137,138,
-            139,73,79,950,67,54,55,994,65,1040,
-            49,996,41,1086,37,4093,1042,35,335,96,
-            4041,904,478,4039,3872,89,90,72,340,82,
-            87,88,112,113,114,115,116,117,135,136,
-            137,138,139,73,79,950,67,54,55,994,
-            65,1040,49,996,41,1086,37,168,1042,35,
-            335,96,4041,904,478,4039,3872,89,90,72,
-            340,82,87,88,112,113,114,115,116,117,
-            135,136,137,138,139,73,79,950,67,54,
-            55,994,65,1040,49,996,41,2079,39,335,
-            96,4041,904,478,4039,3872,89,90,72,340,
-            82,87,88,112,113,114,115,116,117,135,
-            136,137,138,139,73,79,950,67,54,55,
-            994,65,1040,49,2080,47,335,96,4041,904,
-            478,4039,3872,89,90,72,340,82,87,88,
-            112,113,114,115,116,117,135,136,137,138,
-            139,73,79,950,67,54,55,994,65,1040,
-            49,2082,46,335,96,4041,904,478,4039,3872,
-            89,90,72,340,82,87,88,112,113,114,
-            115,116,117,135,136,137,138,139,73,79,
-            950,67,54,55,994,65,1040,49,2126,45,
-            335,96,4041,904,478,4039,3872,89,90,72,
-            340,82,87,88,112,113,114,115,116,117,
-            135,136,137,138,139,73,79,950,67,54,
-            55,994,65,2033,53,335,96,4041,904,478,
-            4039,3872,89,90,72,340,82,87,88,112,
-            113,114,115,116,117,135,136,137,138,139,
-            73,79,950,67,54,55,994,65,2035,51,
-            335,96,4041,904,478,4039,3872,89,90,72,
-            340,82,87,88,112,113,114,115,116,117,
-            135,136,137,138,139,73,79,950,67,62,
-            63,994,65,335,96,4041,904,478,4039,3872,
-            89,90,72,340,82,87,88,112,113,114,
-            115,116,117,135,136,137,138,139,73,79,
-            950,67,60,61,994,65,335,96,4041,904,
-            478,4039,3872,89,90,72,340,82,87,88,
-            112,113,114,115,116,117,135,136,137,138,
-            139,73,79,950,67,58,59,994,65,335,
-            96,4041,904,478,4039,3872,89,90,72,340,
-            82,87,88,112,113,114,115,116,117,135,
-            136,137,138,139,73,79,950,67,56,57,
-            994,65,548,96,4041,904,478,4039,3872,89,
-            90,72,340,82,87,88,112,113,114,115,
-            116,117,135,136,137,138,139,73,79,1988,
-            71,548,96,4041,904,478,4039,3872,89,90,
-            72,340,82,87,88,112,113,114,115,116,
-            117,135,136,137,138,139,73,79,2032,69,
-            548,96,4041,904,478,4039,3872,89,90,76,
-            340,82,87,88,112,113,114,115,116,117,
-            135,136,137,138,139,77,79,548,96,4041,
-            904,478,4039,3872,89,90,74,340,82,87,
-            88,112,113,114,115,116,117,135,136,137,
-            138,139,75,79,697,96,4041,904,478,4039,
-            3872,89,90,81,340,82,87,88,112,113,
-            114,115,116,117,135,136,137,138,139,697,
-            96,4041,904,478,4039,3872,89,90,80,340,
-            82,87,88,112,113,114,115,116,117,135,
-            136,137,138,139,617,96,4041,904,478,4039,
-            3872,89,90,80,340,82,87,88,112,113,
-            114,115,116,117,135,136,137,138,139,1046,
-            1030,177,80,472,473,1275,1276,1065,96,33,
-            1279,1280,619,1030,177,1283,472,473,1284,689,
-            1287,1290,1292,690,1294,1296,912,177,1267,472,
-            473,912,177,691,472,473,912,177,1288,472,
-            473,1116,1197,245,1270,2350,1115,176,178,179,
-            253,255,256,257,1298,242,243,353,37,26,
-            176,178,179,253,255,256,257,329,247,347,
-            330,321,27,471,178,179,271,185,1178,178,
-            179,1189,1454,2128,178,179,1195,240,352,912,
-            177,1036,472,473,912,177,1088,472,473,1065,
-            96,33,476,1065,96,33,1065,96,33,80,
-            1195,1189,349,1300,1066,267,80,1180,1224,2306,
-            80,80,80,80,80,188,3916,1609,1610,330,
-            30,80,80,1064,80,80,3928,178,179,80,
-            1303,239,178,179,2172,187,2174,264,80,467,
-            80,1272,80,469,30,190,470,80,1316,80,
-            80,1659,1318,1362,1364,1408,1410,76,2218,78,
-            2174,156,80,1456,1500,189,1501,1502,80,80,
-            80,1503,351,245,80,80,80,80,996,1034,
-            1504,1304,1509,1307,1510,1308,1311,1314,1315,1511,
-            1318,1512,1516,1319,1323,1324,1327,1328,1299,1517,
-            1330,93,1331,1518,3891,1334,1337,3,1338,359,
-            3892,1517,3894,1339,4102,3895,217,95,94,218,
-            4102,4102
+            81,9,9,9,9,9,9,9,9,9,
+            9,9,9,9,9,9,9,9,9,64,
+            64,5,5,5,5,5,5,5,5,5,
+            5,5,6,6,6,6,6,6,6,6,
+            6,6,6,7,7,10,10,8,14,65,
+            82,83,11,104,104,84,85,66,66,68,
+            68,55,55,45,45,46,47,46,47,43,
+            44,43,43,43,44,44,44,41,42,41,
+            42,41,42,39,40,39,40,39,40,39,
+            40,39,40,35,35,37,36,37,36,37,
+            36,33,34,33,34,33,34,15,31,15,
+            15,16,16,16,16,16,17,17,17,17,
+            17,18,18,18,18,2,2,2,1,1,
+            1,1,1,1,1,1,1,3,3,88,
+            88,19,19,19,19,19,19,20,20,21,
+            4,4,4,4,4,89,89,90,90,69,
+            69,70,70,70,23,23,23,23,23,22,
+            26,27,28,29,30,30,24,25,86,86,
+            86,86,92,92,93,93,93,94,94,49,
+            48,49,49,72,67,67,52,52,52,52,
+            54,53,95,95,73,73,91,91,91,91,
+            71,71,71,12,13,96,12,74,74,74,
+            50,50,56,56,51,51,32,38,87,87,
+            75,75,76,76,61,61,61,81,81,81,
+            81,81,81,81,98,98,78,97,99,99,
+            79,79,57,57,57,60,77,77,80,80,
+            58,100,100,62,62,101,101,59,102,102,
+            63,63,63,1,125,974,740,506,33,514,
+            47,573,46,687,630,118,119,922,101,341,
+            111,116,117,141,142,143,144,145,146,164,
+            165,166,167,168,102,108,742,96,83,84,
+            743,94,745,78,744,70,747,66,916,746,
+            64,972,125,1025,237,793,33,43,47,147,
+            1162,74,679,2912,2939,1077,125,138,1077,125,
+            751,68,157,159,1077,125,1134,1006,757,125,
+            2916,975,320,33,43,47,1078,46,687,630,
+            211,180,915,917,157,125,974,740,506,33,
+            514,47,573,46,687,630,118,119,922,101,
+            341,111,116,117,141,142,143,144,145,146,
+            164,165,166,167,168,102,108,742,96,83,
+            84,743,94,745,78,744,70,747,66,234,
+            746,64,49,1026,74,269,2949,2918,215,181,
+            37,25,210,1000,1107,232,2910,112,113,1077,
+            125,1135,5,1121,1122,1123,193,1125,230,2932,
+            2934,157,125,974,740,506,33,514,47,573,
+            46,687,630,118,119,922,101,341,111,116,
+            117,141,142,143,144,145,146,164,165,166,
+            167,168,102,108,742,96,83,84,743,94,
+            745,78,744,70,747,66,234,746,64,251,
+            252,253,254,251,252,253,254,2922,714,245,
+            347,321,232,540,232,71,567,579,239,324,
+            931,1058,125,62,468,1063,2935,2934,399,125,
+            974,740,506,33,514,47,573,46,687,630,
+            118,119,922,101,341,111,116,117,141,142,
+            143,144,145,146,164,165,166,167,168,102,
+            108,742,96,83,84,743,94,745,78,744,
+            70,747,66,224,746,64,424,262,1081,1129,
+            1058,125,62,820,1077,399,125,974,740,506,
+            33,514,47,573,46,687,630,118,119,922,
+            101,341,111,116,117,141,142,143,144,145,
+            146,164,165,166,167,168,102,108,742,96,
+            83,84,743,94,745,78,744,70,747,66,
+            224,746,64,812,1096,433,1129,1058,125,62,
+            820,2909,399,125,974,740,506,33,514,47,
+            573,46,687,630,118,119,922,101,341,111,
+            116,117,141,142,143,144,145,146,164,165,
+            166,167,168,102,108,742,96,83,84,743,
+            94,745,78,744,70,747,66,224,746,64,
+            813,1113,434,1129,1058,125,62,820,2913,79,
+            125,974,740,506,33,514,47,573,46,687,
+            630,118,119,922,101,341,111,116,117,141,
+            142,143,144,145,146,164,165,166,167,168,
+            102,108,742,96,83,84,743,94,745,78,
+            744,70,747,66,916,746,64,814,1126,435,
+            1074,888,883,852,70,904,1049,965,315,1148,
+            932,1075,148,1058,125,62,1152,1134,158,159,
+            399,125,974,740,506,33,514,47,573,46,
+            687,630,118,119,922,101,341,111,116,117,
+            141,142,143,144,145,146,164,165,166,167,
+            168,102,108,742,96,83,84,743,94,745,
+            78,744,70,747,66,224,746,64,437,1007,
+            1153,1129,943,988,1139,403,2926,471,125,974,
+            740,506,33,514,47,573,46,687,630,118,
+            119,922,101,341,111,116,117,141,142,143,
+            144,145,146,164,165,166,167,168,102,108,
+            742,96,83,84,743,94,745,78,744,70,
+            747,66,2930,746,64,191,2929,399,125,974,
+            740,506,33,514,47,573,46,687,630,118,
+            119,922,101,341,111,116,117,141,142,143,
+            144,145,146,164,165,166,167,168,102,108,
+            742,96,83,84,743,94,745,78,744,70,
+            747,66,224,746,64,681,1154,1155,1129,1044,
+            882,1059,1027,2936,327,125,974,740,506,33,
+            514,47,573,46,687,630,118,119,922,101,
+            341,111,116,117,141,142,143,144,145,146,
+            164,165,166,167,168,102,108,742,96,83,
+            84,743,94,745,78,744,70,747,66,224,
+            746,64,122,1064,876,921,327,125,974,740,
+            506,33,514,47,573,46,687,630,118,119,
+            922,101,341,111,116,117,141,142,143,144,
+            145,146,164,165,166,167,168,102,108,742,
+            96,83,84,743,94,745,78,744,70,747,
+            66,224,746,64,121,1109,820,973,327,125,
+            974,740,506,33,514,47,573,46,687,630,
+            118,119,922,101,341,111,116,117,141,142,
+            143,144,145,146,164,165,166,167,168,102,
+            108,742,96,83,84,743,94,745,78,744,
+            70,747,66,224,746,64,2914,1163,820,2927,
+            242,125,974,740,506,33,514,47,573,46,
+            687,630,118,119,922,101,341,111,116,117,
+            141,142,143,144,145,146,164,165,166,167,
+            168,102,108,742,96,83,84,743,94,745,
+            78,744,70,747,66,234,746,64,2915,1166,
+            1171,1174,1177,1179,1183,1185,1111,1119,908,921,
+            1078,233,327,125,974,740,506,33,514,47,
+            573,46,687,630,118,119,922,101,341,111,
+            116,117,141,142,143,144,145,146,164,165,
+            166,167,168,102,108,742,96,83,84,743,
+            94,745,78,744,70,747,66,257,746,64,
+            327,125,974,740,506,33,514,47,573,46,
+            687,630,118,119,922,101,341,111,116,117,
+            141,142,143,144,145,146,164,165,166,167,
+            168,102,108,742,96,83,84,743,94,745,
+            78,744,70,747,66,256,746,64,327,125,
+            974,740,506,33,514,47,573,46,687,630,
+            118,119,922,101,341,111,116,117,141,142,
+            143,144,145,146,164,165,166,167,168,102,
+            108,742,96,83,84,743,94,745,78,744,
+            70,747,66,272,746,64,327,125,974,740,
+            506,33,514,47,573,46,687,630,118,119,
+            922,101,341,111,116,117,141,142,143,144,
+            145,146,164,165,166,167,168,102,108,742,
+            96,83,84,743,94,745,78,744,70,747,
+            66,271,746,64,327,125,974,740,506,33,
+            514,47,573,46,687,630,118,119,922,101,
+            341,111,116,117,141,142,143,144,145,146,
+            164,165,166,167,168,102,108,742,96,83,
+            84,743,94,745,78,744,70,747,66,270,
+            746,64,327,125,974,740,506,33,514,47,
+            573,46,687,630,118,119,922,101,341,111,
+            116,117,141,142,143,144,145,146,164,165,
+            166,167,168,102,108,742,96,83,84,743,
+            94,745,78,744,70,747,66,263,746,64,
+            327,125,974,740,506,33,514,47,573,46,
+            687,630,118,119,922,101,341,111,116,117,
+            141,142,143,144,145,146,164,165,166,167,
+            168,102,108,742,96,83,84,743,94,745,
+            78,744,70,747,66,192,746,64,327,125,
+            974,740,506,33,514,47,573,46,687,630,
+            118,119,922,101,341,111,116,117,141,142,
+            143,144,145,146,164,165,166,167,168,102,
+            108,742,96,83,84,743,94,745,78,744,
+            70,747,66,810,746,64,327,125,974,740,
+            506,33,514,47,573,46,687,630,118,119,
+            922,101,341,111,116,117,141,142,143,144,
+            145,146,164,165,166,167,168,102,108,742,
+            96,83,84,743,94,745,78,744,70,747,
+            66,815,746,64,327,125,974,740,506,33,
+            514,47,573,46,687,630,118,119,922,101,
+            341,111,116,117,141,142,143,144,145,146,
+            164,165,166,167,168,102,108,742,96,83,
+            84,743,94,745,78,744,70,747,66,266,
+            746,64,327,125,974,740,506,33,514,47,
+            573,46,687,630,118,119,922,101,341,111,
+            116,117,141,142,143,144,145,146,164,165,
+            166,167,168,102,108,742,96,83,84,743,
+            94,745,78,744,70,747,66,265,746,64,
+            327,125,974,740,506,33,514,47,573,46,
+            687,630,118,119,922,101,341,111,116,117,
+            141,142,143,144,145,146,164,165,166,167,
+            168,102,108,742,96,83,84,743,94,745,
+            78,744,70,747,66,226,746,64,327,125,
+            974,740,506,33,514,47,573,46,687,630,
+            118,119,922,101,341,111,116,117,141,142,
+            143,144,145,146,164,165,166,167,168,102,
+            108,742,96,83,84,743,94,745,78,744,
+            70,747,66,162,746,64,327,125,974,740,
+            506,33,514,47,573,46,687,630,118,119,
+            922,101,341,111,116,117,141,142,143,144,
+            145,146,164,165,166,167,168,102,108,742,
+            96,83,84,743,94,745,78,744,70,747,
+            66,2917,746,64,327,125,974,740,506,33,
+            514,47,573,46,687,630,118,119,922,101,
+            341,111,116,117,141,142,143,144,145,146,
+            164,165,166,167,168,102,108,742,96,83,
+            84,743,94,745,78,744,70,747,66,163,
+            746,64,327,125,974,740,506,33,514,47,
+            573,46,687,630,118,119,922,101,341,111,
+            116,117,141,142,143,144,145,146,164,165,
+            166,167,168,102,108,742,96,83,84,743,
+            94,745,78,744,70,747,66,161,746,64,
+            327,125,974,740,506,33,514,47,573,46,
+            687,630,118,119,922,101,341,111,116,117,
+            141,142,143,144,145,146,164,165,166,167,
+            168,102,108,742,96,83,84,743,94,745,
+            78,744,70,747,66,193,746,64,327,125,
+            974,740,506,33,514,47,573,46,687,630,
+            118,119,922,101,341,111,116,117,141,142,
+            143,144,145,146,164,165,166,167,168,102,
+            108,742,96,83,84,743,94,745,78,744,
+            70,747,66,225,746,64,327,125,974,740,
+            506,33,514,47,573,46,687,630,118,119,
+            922,101,341,111,116,117,141,142,143,144,
+            145,146,164,165,166,167,168,102,108,742,
+            96,83,84,743,94,745,78,744,70,747,
+            66,2944,746,64,327,125,974,740,506,33,
+            514,47,573,46,687,630,118,119,922,101,
+            341,111,116,117,141,142,143,144,145,146,
+            164,165,166,167,168,102,108,742,96,83,
+            84,743,94,745,78,744,70,747,66,2948,
+            746,64,327,125,974,740,506,33,514,47,
+            573,46,687,630,118,119,922,101,341,111,
+            116,117,141,142,143,144,145,146,164,165,
+            166,167,168,102,108,742,96,83,84,743,
+            94,745,78,744,70,747,66,3025,746,64,
+            327,125,974,740,506,33,514,47,573,46,
+            687,630,118,119,922,101,341,111,116,117,
+            141,142,143,144,145,146,164,165,166,167,
+            168,102,108,742,96,83,84,743,94,745,
+            78,744,70,747,66,3026,746,64,327,125,
+            974,740,506,33,514,47,573,46,687,630,
+            118,119,922,101,341,111,116,117,141,142,
+            143,144,145,146,164,165,166,167,168,102,
+            108,742,96,83,84,743,94,745,78,744,
+            70,747,66,3027,746,64,327,125,974,740,
+            506,33,514,47,573,46,687,630,118,119,
+            922,101,341,111,116,117,141,142,143,144,
+            145,146,164,165,166,167,168,102,108,742,
+            96,83,84,743,94,745,78,744,70,1140,
+            68,327,125,974,740,506,33,514,47,573,
+            46,687,630,118,119,922,101,341,111,116,
+            117,141,142,143,144,145,146,164,165,166,
+            167,168,102,108,742,96,83,84,743,94,
+            745,78,2890,76,327,125,974,740,506,33,
+            514,47,573,46,687,630,118,119,922,101,
+            341,111,116,117,141,142,143,144,145,146,
+            164,165,166,167,168,102,108,742,96,83,
+            84,743,94,745,78,2891,75,327,125,974,
+            740,506,33,514,47,573,46,687,630,118,
+            119,922,101,341,111,116,117,141,142,143,
+            144,145,146,164,165,166,167,168,102,108,
+            742,96,83,84,743,94,745,78,2900,74,
+            327,125,974,740,506,33,514,47,573,46,
+            687,630,118,119,922,101,341,111,116,117,
+            141,142,143,144,145,146,164,165,166,167,
+            168,102,108,742,96,83,84,743,94,1138,
+            82,327,125,974,740,506,33,514,47,573,
+            46,687,630,118,119,922,101,341,111,116,
+            117,141,142,143,144,145,146,164,165,166,
+            167,168,102,108,742,96,83,84,743,94,
+            1139,80,327,125,974,740,506,33,514,47,
+            573,46,687,630,118,119,922,101,341,111,
+            116,117,141,142,143,144,145,146,164,165,
+            166,167,168,102,108,742,96,91,92,743,
+            94,327,125,974,740,506,33,514,47,573,
+            46,687,630,118,119,922,101,341,111,116,
+            117,141,142,143,144,145,146,164,165,166,
+            167,168,102,108,742,96,89,90,743,94,
+            327,125,974,740,506,33,514,47,573,46,
+            687,630,118,119,922,101,341,111,116,117,
+            141,142,143,144,145,146,164,165,166,167,
+            168,102,108,742,96,87,88,743,94,327,
+            125,974,740,506,33,514,47,573,46,687,
+            630,118,119,922,101,341,111,116,117,141,
+            142,143,144,145,146,164,165,166,167,168,
+            102,108,742,96,85,86,743,94,543,125,
+            974,740,506,33,514,47,573,46,687,630,
+            118,119,922,101,341,111,116,117,141,142,
+            143,144,145,146,164,165,166,167,168,102,
+            108,1136,100,543,125,974,740,506,33,514,
+            47,573,46,687,630,118,119,922,101,341,
+            111,116,117,141,142,143,144,145,146,164,
+            165,166,167,168,102,108,1137,98,543,125,
+            974,740,506,33,514,47,573,46,687,630,
+            118,119,922,105,341,111,116,117,141,142,
+            143,144,145,146,164,165,166,167,168,106,
+            108,543,125,974,740,506,33,514,47,573,
+            46,687,630,118,119,922,103,341,111,116,
+            117,141,142,143,144,145,146,164,165,166,
+            167,168,104,108,690,125,974,740,506,33,
+            514,47,573,46,687,630,118,119,922,110,
+            341,111,116,117,141,142,143,144,145,146,
+            164,165,166,167,168,690,125,974,740,506,
+            33,514,47,573,46,687,630,118,119,922,
+            109,341,111,116,117,141,142,143,144,145,
+            146,164,165,166,167,168,612,125,974,740,
+            506,33,514,47,573,46,687,630,118,119,
+            922,109,341,111,116,117,141,142,143,144,
+            145,146,164,165,166,167,168,816,125,2916,
+            224,231,1132,43,47,2971,46,687,630,211,
+            314,1188,1169,905,196,1039,498,501,1189,1190,
+            1196,685,1181,1197,1198,1203,976,1187,616,1206,
+            1023,196,1120,498,501,1207,1208,1094,154,1101,
+            1209,1026,1210,1211,1215,1216,1217,1023,196,973,
+            498,501,905,196,1218,498,501,351,1219,235,
+            684,49,1026,191,242,438,197,198,178,191,
+            205,210,250,252,253,254,217,239,240,1131,
+            1133,820,195,197,198,250,252,253,254,179,
+            182,183,332,244,432,347,324,55,1158,195,
+            197,198,680,685,752,197,198,436,191,204,
+            1158,261,237,421,56,905,196,1159,498,501,
+            905,196,268,498,501,905,196,504,498,501,
+            363,218,1159,757,820,1222,1224,1225,3097,685,
+            3097,3097,685,3097,685,820,191,207,685,505,
+            749,191,204,3097,820,756,3097,3097,191,209,
+            3097,352,3097,3097,3097,191,59,190,197,198,
+            206,3097,420,197,198,3097,809,236,197,198,
+            191,59,208,2901,124,2902,748,191,2928,919,
+            191,60,191,2947,3097,123,191,3020,2908,3097,
+            2902,3097,3097,264,219,3097,3097
         };
     };
     public final static char baseAction[] = BaseAction.baseAction;
@@ -882,150 +681,140 @@
 
     public interface TermCheck {
         public final static byte termCheck[] = {0,
-            0,1,0,3,4,5,6,7,8,9,
+            0,1,2,3,0,5,6,7,8,9,
             10,11,12,13,14,15,16,17,18,19,
             20,21,22,23,0,25,26,27,28,29,
             30,31,32,33,34,35,0,37,38,39,
             40,41,42,43,44,45,46,47,48,49,
             50,51,52,53,54,55,56,57,58,59,
             60,61,62,63,64,65,66,0,68,0,
-            70,4,5,71,0,0,1,0,1,0,
-            0,1,82,3,4,5,6,7,8,9,
-            10,11,12,13,14,15,16,17,18,19,
-            20,21,22,23,0,25,26,27,28,29,
-            30,31,32,33,34,35,92,37,38,39,
-            40,41,42,43,44,45,46,47,48,49,
-            50,51,52,53,54,55,56,57,58,59,
-            60,61,62,63,64,65,66,72,68,72,
-            70,72,83,79,85,0,87,88,81,0,
-            0,1,82,3,4,5,6,7,8,9,
-            10,11,12,13,14,15,16,17,18,19,
-            20,21,22,23,80,25,26,27,28,29,
-            30,31,32,33,34,35,0,37,38,39,
-            40,41,42,43,44,45,46,47,48,49,
-            50,51,52,53,54,55,56,57,58,59,
-            60,61,62,63,64,65,66,72,68,0,
-            70,0,0,1,75,0,81,78,0,4,
-            5,0,0,1,0,16,17,0,1,89,
-            3,4,5,6,7,8,9,10,11,12,
-            13,14,15,16,17,18,19,20,21,22,
-            23,0,25,26,27,28,29,30,31,32,
-            33,34,35,0,37,38,39,40,41,42,
-            43,44,45,46,47,48,49,50,51,52,
-            53,54,55,56,57,58,59,60,61,62,
-            63,64,65,66,72,68,72,70,0,36,
-            79,90,4,5,0,81,0,0,4,5,
-            3,0,1,95,0,1,89,3,4,5,
-            6,7,8,9,10,11,12,13,14,15,
-            16,17,18,19,20,21,22,23,0,25,
-            26,27,28,29,30,31,32,33,34,35,
-            0,37,38,39,40,41,42,43,44,45,
-            46,47,48,49,50,51,52,53,54,55,
-            56,57,58,59,60,61,62,63,64,65,
-            66,0,68,0,70,0,1,4,3,4,
-            5,6,7,8,9,10,11,12,13,14,
-            15,16,17,18,19,20,21,22,23,71,
-            25,26,27,28,29,30,31,32,33,34,
-            35,0,37,38,39,40,41,42,43,44,
-            45,46,47,48,49,50,51,52,53,54,
-            55,56,57,58,59,60,61,62,63,64,
-            65,66,0,68,73,70,0,1,0,3,
-            4,5,6,7,8,9,10,11,12,13,
+            0,71,3,0,5,2,0,73,0,1,
+            2,3,82,5,6,7,8,9,10,11,
+            12,13,14,15,16,17,18,19,20,21,
+            22,23,0,25,26,27,28,29,30,31,
+            32,33,34,35,90,37,38,39,40,41,
+            42,43,44,45,46,47,48,49,50,51,
+            52,53,54,55,56,57,58,59,60,61,
+            62,63,64,65,66,75,68,0,78,71,
+            83,4,85,0,87,88,0,1,2,3,
+            82,5,6,7,8,9,10,11,12,13,
             14,15,16,17,18,19,20,21,22,23,
             0,25,26,27,28,29,30,31,32,33,
             34,35,0,37,38,39,40,41,42,43,
             44,45,46,47,48,49,50,51,52,53,
             54,55,56,57,58,59,60,61,62,63,
-            64,65,66,0,68,67,70,0,1,0,
-            3,4,5,6,7,8,9,10,11,12,
-            13,14,15,16,17,18,19,20,21,22,
-            23,0,25,26,27,28,29,30,31,32,
-            33,34,35,0,37,38,39,40,41,42,
-            43,44,45,46,47,48,49,50,51,52,
-            53,54,55,56,57,58,59,60,61,62,
-            63,64,65,66,0,68,0,1,0,3,
-            4,5,6,7,8,9,10,11,12,13,
-            14,15,16,17,18,19,20,21,22,23,
-            91,25,26,27,28,29,30,31,32,33,
-            34,35,0,37,38,39,40,41,42,43,
-            44,45,46,47,48,49,50,51,52,53,
-            54,55,56,57,58,59,60,61,62,63,
-            64,65,66,69,0,67,34,35,0,0,
-            0,73,3,3,6,0,0,1,82,3,
-            4,5,6,7,8,9,10,11,12,13,
+            64,65,66,0,68,72,3,71,5,0,
+            0,0,3,3,0,5,0,84,0,1,
+            6,0,1,2,3,89,5,6,7,8,
+            9,10,11,12,13,14,15,16,17,18,
+            19,20,21,22,23,73,25,26,27,28,
+            29,30,31,32,33,34,35,0,37,38,
+            39,40,41,42,43,44,45,46,47,48,
+            49,50,51,52,53,54,55,56,57,58,
+            59,60,61,62,63,64,65,66,70,68,
+            76,77,71,0,0,79,3,3,5,0,
+            0,1,91,0,1,6,0,1,2,3,
+            89,5,6,7,8,9,10,11,12,13,
             14,15,16,17,18,19,20,21,22,23,
             0,25,26,27,28,29,30,31,32,33,
             34,35,0,37,38,39,40,41,42,43,
             44,45,46,47,48,49,50,51,52,53,
             54,55,56,57,58,59,60,61,62,63,
-            64,65,66,0,76,77,3,4,5,6,
-            7,8,9,10,11,12,13,14,15,16,
-            17,18,19,20,21,22,23,67,25,26,
-            27,28,29,30,31,32,33,34,35,67,
-            37,38,39,40,41,42,43,44,45,46,
-            47,48,49,50,51,52,53,54,55,56,
-            57,58,0,0,1,3,4,5,6,7,
+            64,65,66,70,68,76,77,71,0,1,
+            2,3,0,5,6,7,8,9,10,11,
+            12,13,14,15,16,17,18,19,20,21,
+            22,23,72,25,26,27,28,29,30,31,
+            32,33,34,35,72,37,38,39,40,41,
+            42,43,44,45,46,47,48,49,50,51,
+            52,53,54,55,56,57,58,59,60,61,
+            62,63,64,65,66,0,68,0,1,71,
+            0,1,2,3,0,5,6,7,8,9,
+            10,11,12,13,14,15,16,17,18,19,
+            20,21,22,23,92,25,26,27,28,29,
+            30,31,32,33,34,35,0,37,38,39,
+            40,41,42,43,44,45,46,47,48,49,
+            50,51,52,53,54,55,56,57,58,59,
+            60,61,62,63,64,65,66,70,68,0,
+            1,71,0,1,2,3,0,5,6,7,
             8,9,10,11,12,13,14,15,16,17,
             18,19,20,21,22,23,0,25,26,27,
             28,29,30,31,32,33,34,35,0,37,
             38,39,40,41,42,43,44,45,46,47,
             48,49,50,51,52,53,54,55,56,57,
-            58,0,0,2,0,4,5,6,0,0,
-            67,3,0,1,36,0,1,16,17,18,
-            19,20,21,22,23,0,0,26,27,28,
-            0,0,6,0,3,34,35,36,7,8,
-            9,10,11,12,13,14,15,0,18,19,
-            20,21,74,0,0,22,23,0,0,1,
-            29,30,31,32,33,18,19,20,21,16,
-            17,69,71,69,73,74,75,76,77,78,
-            79,80,24,0,83,84,85,86,87,88,
-            59,0,91,92,93,94,95,96,0,16,
-            17,3,76,77,6,7,8,9,10,11,
-            12,13,14,15,0,0,0,26,27,28,
-            22,23,0,25,2,0,69,29,30,31,
-            32,33,0,1,0,37,38,39,40,41,
-            42,43,44,45,46,47,48,49,50,0,
-            36,36,3,0,0,0,7,8,9,10,
-            11,12,13,14,15,0,0,1,3,0,
-            0,6,18,19,20,21,0,24,29,30,
-            31,32,33,0,0,0,71,3,74,36,
-            24,7,8,9,10,11,12,13,14,15,
-            24,0,0,0,0,36,3,73,59,25,
-            7,8,9,10,11,12,13,14,15,0,
-            67,36,67,0,71,24,24,0,25,0,
-            75,4,0,78,0,0,0,0,73,0,
-            75,76,77,78,79,26,27,28,0,80,
-            0,24,2,24,71,90,22,23,0,74,
-            24,24,4,24,0,0,2,84,0,1,
-            0,36,24,69,0,1,0,1,0,1,
-            0,1,0,1,0,1,0,1,0,1,
-            0,1,69,0,1,0,1,0,1,0,
-            1,69,0,1,0,1,0,1,0,0,
-            1,3,0,1,0,0,0,3,0,3,
-            0,0,2,0,1,0,1,0,1,0,
-            1,0,1,0,1,0,1,0,1,0,
-            1,0,1,0,1,0,1,0,1,0,
-            1,36,0,0,36,0,86,36,0,4,
-            2,96,0,0,2,2,0,0,2,2,
-            0,0,2,2,0,0,2,2,0,0,
-            2,2,0,0,2,2,0,0,36,2,
-            0,0,2,2,0,0,2,2,0,0,
-            2,2,0,0,2,2,0,0,2,0,
-            1,0,1,0,1,0,1,0,0,0,
-            67,2,0,0,2,2,0,0,2,2,
-            0,24,2,0,0,2,2,0,0,2,
-            2,24,0,0,2,2,0,0,2,0,
-            0,2,2,0,36,2,0,0,0,2,
-            2,0,0,0,0,0,0,0,0,0,
-            0,24,0,0,0,0,0,0,0,93,
-            0,0,0,0,0,0,0,0,0,0,
-            0,0,0,0,0,0,0,0,0,0,
+            58,59,60,61,62,63,64,65,66,0,
+            68,0,1,2,3,0,5,6,7,8,
+            9,10,11,12,13,14,15,16,17,18,
+            19,20,21,22,23,69,25,26,27,28,
+            29,30,31,32,33,34,35,69,37,38,
+            39,40,41,42,43,44,45,46,47,48,
+            49,50,51,52,53,54,55,56,57,58,
+            59,60,61,62,63,64,65,66,0,0,
+            0,2,67,0,0,2,2,0,73,0,
+            1,2,3,82,5,6,7,8,9,10,
+            11,12,13,14,15,16,17,18,19,20,
+            21,22,23,0,25,26,27,28,29,30,
+            31,32,33,34,35,0,37,38,39,40,
+            41,42,43,44,45,46,47,48,49,50,
+            51,52,53,54,55,56,57,58,59,60,
+            61,62,63,64,65,66,0,79,2,3,
+            80,5,6,7,8,9,10,11,12,13,
+            14,15,16,17,18,19,20,21,22,23,
+            67,25,26,27,28,29,30,31,32,33,
+            34,35,0,37,38,39,40,41,42,43,
+            44,45,46,47,48,49,50,51,52,53,
+            54,55,56,57,58,0,24,2,3,0,
+            5,6,7,8,9,10,11,12,13,14,
+            15,16,17,18,19,20,21,22,23,0,
+            25,26,27,28,29,30,31,32,33,34,
+            35,0,37,38,39,40,41,42,43,44,
+            45,46,47,48,49,50,51,52,53,54,
+            55,56,57,58,0,0,1,3,4,5,
+            6,0,0,0,3,34,35,0,1,70,
+            16,17,18,19,20,21,22,23,16,17,
+            26,27,28,0,0,24,2,0,34,35,
+            36,7,8,9,10,11,12,13,14,15,
+            0,18,19,20,21,18,19,20,21,0,
+            0,0,1,29,30,31,32,33,18,19,
+            20,21,0,1,0,70,72,73,74,75,
+            76,77,78,79,80,24,81,83,84,85,
+            86,87,88,59,0,91,92,93,94,95,
+            96,0,0,2,0,0,1,6,7,8,
+            9,10,11,12,13,14,15,0,1,0,
+            26,27,28,22,23,0,25,67,24,0,
+            29,30,31,32,33,0,0,0,37,38,
+            39,40,41,42,43,44,45,46,47,48,
+            49,50,0,24,2,0,0,22,23,7,
+            8,9,10,11,12,13,14,15,0,67,
+            2,0,36,0,6,70,0,75,0,24,
+            78,29,30,31,32,33,81,0,0,2,
+            0,36,0,0,7,8,9,10,11,12,
+            13,14,15,0,0,1,0,0,2,36,
+            0,59,25,7,8,9,10,11,12,13,
+            14,15,67,0,36,0,70,72,24,36,
+            0,25,96,26,27,28,0,81,0,1,
+            0,73,0,75,76,77,78,79,0,0,
+            0,0,0,80,0,0,16,17,90,36,
+            24,69,74,0,16,17,36,74,0,1,
+            67,22,23,95,24,24,24,0,24,69,
+            3,0,0,0,0,4,4,0,0,2,
+            2,0,0,2,69,0,4,74,0,36,
+            0,1,72,0,1,67,0,1,0,1,
+            0,69,0,1,0,1,0,0,0,0,
+            36,4,4,4,69,0,0,0,1,4,
+            4,36,0,1,36,0,0,0,0,0,
+            0,4,4,4,0,0,0,0,0,4,
+            4,0,4,0,0,4,0,4,4,24,
+            24,0,1,0,24,0,0,0,0,86,
+            0,0,0,0,0,0,0,67,0,0,
+            36,0,0,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,93,
             0,0,0,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
+            0,94,0,0,0,0,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
-            94,0,0,0,0,0,0,0
+            0
         };
     };
     public final static byte termCheck[] = TermCheck.termCheck;
@@ -1033,150 +822,138 @@
 
     public interface TermAction {
         public final static char termAction[] = {0,
-            126,2658,4102,482,4009,4005,4116,4203,4201,4202,
-            4204,4205,4206,4207,4208,4209,4037,4002,4001,3994,
-            3993,3992,4117,4118,4102,4199,3991,3990,3986,534,
-            489,488,487,483,4004,3844,261,481,4103,4104,
-            4105,4106,4107,4108,4109,4110,4111,4112,4113,4114,
-            4115,3794,4020,4018,4022,4027,4030,4029,3979,480,
-            948,4246,4243,4245,4247,4248,4250,40,536,78,
-            2700,3515,3480,3246,4102,142,219,219,22,219,
-            4102,2658,2784,482,4009,4005,4116,4203,4201,4202,
-            4204,4205,4206,4207,4208,4209,4037,4002,4001,3994,
-            3993,3992,4117,4118,4102,4199,3991,3990,3986,534,
-            489,488,487,483,4004,3844,2826,481,4103,4104,
-            4105,4106,4107,4108,4109,4110,4111,4112,4113,4114,
-            4115,3794,4020,4018,4022,4027,4030,4029,3979,480,
-            948,4246,4243,4245,4247,4248,4250,4322,536,5259,
-            2700,4322,403,4101,412,219,344,341,2176,263,
-            233,2658,2784,482,4009,4005,4116,4203,4201,4202,
-            4204,4205,4206,4207,4208,4209,4037,4002,4001,3994,
-            3993,3992,4117,4118,4222,4199,3991,3990,3986,534,
-            489,488,487,483,4004,3819,4102,481,4103,4104,
-            4105,4106,4107,4108,4109,4110,4111,4112,4113,4114,
-            4115,3794,4020,4018,4022,4027,4030,4029,3979,480,
-            948,4246,4243,4245,4247,4248,4250,4322,536,66,
-            2700,241,4102,3901,3976,44,2220,3973,34,3515,
-            3480,262,147,23,219,3767,3740,4102,2658,4077,
-            482,4009,4005,4116,4203,4201,4202,4204,4205,4206,
-            4207,4208,4209,4037,4002,4001,3994,3993,3992,4117,
-            4118,4102,4199,3991,3990,3986,534,489,488,487,
-            483,4004,3819,184,481,4103,4104,4105,4106,4107,
-            4108,4109,4110,4111,4112,4113,4114,4115,3794,4020,
-            4018,4022,4027,4030,4029,3979,480,948,4246,4243,
-            4245,4247,4248,4250,23,536,4322,2700,43,582,
-            244,336,3515,3480,42,2264,4102,4102,3515,3480,
-            4210,4102,3903,3330,4102,2658,4077,482,4009,4005,
-            4116,4203,4201,4202,4204,4205,4206,4207,4208,4209,
-            4037,4002,4001,3994,3993,3992,4117,4118,4102,4199,
-            3991,3990,3986,534,489,488,487,483,4004,3819,
-            4102,481,4103,4104,4105,4106,4107,4108,4109,4110,
-            4111,4112,4113,4114,4115,3794,4020,4018,4022,4027,
-            4030,4029,3979,480,948,4246,4243,4245,4247,4248,
-            4250,250,536,172,2700,221,2658,2616,482,4009,
-            4005,4116,4203,4201,4202,4204,4205,4206,4207,4208,
-            4209,4037,4002,4001,3994,3993,3992,4117,4118,3288,
-            4199,3991,3990,3986,534,489,488,487,483,4004,
-            3819,4102,481,4103,4104,4105,4106,4107,4108,4109,
-            4110,4111,4112,4113,4114,4115,3794,4020,4018,4022,
-            4027,4030,4029,3979,480,948,4246,4243,4245,4247,
-            4248,4250,4102,536,328,2700,4102,2658,180,4059,
-            4009,4005,4116,4203,4201,4202,4204,4205,4206,4207,
-            4208,4209,4037,4002,4001,3994,3993,3992,4117,4118,
-            4102,4199,3991,3990,3986,534,489,488,487,483,
-            4004,3819,4102,481,4103,4104,4105,4106,4107,4108,
-            4109,4110,4111,4112,4113,4114,4115,3794,4020,4018,
-            4022,4027,4030,4029,3979,480,948,4246,4243,4245,
-            4247,4248,4250,4102,536,325,2700,4102,2658,4102,
-            482,4009,4005,4116,4203,4201,4202,4204,4205,4206,
-            4207,4208,4209,4037,4002,4001,3994,3993,3992,4117,
-            4118,4102,4199,3991,3990,3986,534,489,488,487,
-            483,4004,3819,4102,481,4103,4104,4105,4106,4107,
-            4108,4109,4110,4111,4112,4113,4114,4115,3794,4020,
-            4018,4022,4027,4030,4029,3979,480,948,4246,4243,
-            4245,4247,4248,4250,4102,536,4102,2658,251,482,
-            4009,4005,4116,4203,4201,4202,4204,4205,4206,4207,
-            4208,4209,4037,4002,4001,3994,3993,3992,4117,4118,
-            4351,4199,3991,3990,3986,534,489,488,487,483,
-            4004,3819,64,481,4103,4104,4105,4106,4107,4108,
-            4109,4110,4111,4112,4113,4114,4115,3794,4020,4018,
-            4022,4027,4030,4029,3979,480,948,4246,4243,4245,
-            4247,4248,4250,276,4102,325,3711,3682,4102,4102,
-            183,328,1132,322,1513,4102,4102,2658,2952,482,
-            4009,4005,4116,4203,4201,4202,4204,4205,4206,4207,
-            4208,4209,4037,4002,4001,3994,3993,3992,4117,4118,
-            98,4199,3991,3990,3986,534,489,488,487,483,
-            4004,3819,4102,481,4103,4104,4105,4106,4107,4108,
-            4109,4110,4111,4112,4113,4114,4115,3794,4020,4018,
-            4022,4027,4030,4029,3979,480,948,4246,4243,4245,
-            4247,4248,4250,4102,3969,3877,4200,4009,4005,4116,
-            4203,4201,4202,4204,4205,4206,4207,4208,4209,4049,
-            4002,4001,3994,3993,3992,4117,4118,108,4199,3991,
-            3990,3986,4119,4120,4121,4122,4123,4004,4048,318,
-            4125,4103,4104,4105,4106,4107,4108,4109,4110,4111,
-            4112,4113,4114,4115,4042,4020,4018,4022,4027,4030,
-            4029,3979,4102,119,1521,4200,4009,4005,4116,4203,
-            4201,4202,4204,4205,4206,4207,4208,4209,4049,4002,
-            4001,3994,3993,3992,4117,4118,4102,4199,3991,3990,
-            3986,4119,4120,4121,4122,4123,4004,4048,4102,4125,
-            1797,1941,1939,1938,1892,1894,1891,1847,1845,1844,
-            1800,1798,4115,4042,4020,4018,4022,4027,4030,4029,
-            3979,22,4102,4322,21,4322,4322,4322,4102,4102,
-            109,322,4102,492,3036,4102,538,4322,4322,4322,
-            4322,4322,4322,4322,4322,4102,270,4322,4322,4322,
-            48,4102,1513,4102,4210,4322,4322,4322,4203,4201,
-            4202,4204,4205,4206,4207,4208,4209,52,3649,3616,
-            3583,3550,4055,70,4102,335,348,20,4102,3956,
-            4223,4224,4225,4226,4227,3649,3616,3583,3550,3767,
-            3740,3951,4322,125,4322,4322,4322,4322,4322,4322,
-            4322,4322,3906,68,4322,4322,4322,4322,4322,4322,
-            474,36,4322,4322,4322,4322,4322,4322,4102,3767,
-            3740,4200,3969,3877,4116,4203,4201,4202,4204,4205,
-            4206,4207,4208,4209,4102,4102,4102,3443,3406,3369,
-            4117,4118,4102,4199,4283,4102,124,4119,4120,4121,
-            4122,4123,4102,3912,252,4125,4103,4104,4105,4106,
-            4107,4108,4109,4110,4111,4112,4113,4114,4115,175,
-            3036,858,4210,98,50,4102,4203,4201,4202,4204,
-            4205,4206,4207,4208,4209,261,109,3980,322,4102,
-            4102,1513,3649,3616,3583,3550,171,3896,4223,4224,
-            4225,4226,4227,4102,32,4102,3204,4200,4056,171,
-            3959,4203,4201,4202,4204,4205,4206,4207,4208,4209,
-            3896,4102,4102,4102,19,3981,4200,328,474,4199,
-            4203,4201,4202,4204,4205,4206,4207,4208,4209,38,
-            108,3036,332,18,171,2364,2406,171,4199,4102,
-            3976,2994,17,3973,258,226,4102,4102,328,4102,
-            3976,3969,3877,3973,246,3443,3406,3369,4102,4242,
-            4102,3896,4284,2448,3162,336,262,262,4102,4057,
-            2490,2532,2742,3893,4102,4102,4193,812,4102,584,
-            131,628,2574,123,4102,630,4102,676,4102,722,
-            4102,768,4102,814,4102,860,4102,906,4102,952,
-            4102,998,122,4102,1044,4102,1090,4102,1136,4102,
-            1182,121,4102,1228,4102,1274,4102,1320,4102,4102,
-            1366,1703,92,1412,28,227,110,322,127,4210,
-            4102,222,4187,1,720,12,1567,11,1614,10,
-            1661,9,1708,8,1755,7,1802,5,1849,6,
-            1896,4,1943,3,1990,2,2037,4102,356,4102,
-            424,674,29,111,1458,4102,2910,3036,4102,3078,
-            3908,2868,4102,4102,3924,4316,4102,4102,4317,4315,
-            4102,4102,4314,4313,4102,4102,4312,4311,4102,4102,
-            4310,4309,4102,4102,4308,4306,4102,4102,766,4305,
-            4102,4102,4304,4303,4102,4102,4302,4301,4102,4102,
-            4300,4299,4102,4102,4298,4307,4102,4102,4297,4102,
-            2084,4102,2130,217,538,216,1412,4102,234,4102,
-            325,4188,4102,4102,4267,4266,4102,4102,4265,4264,
-            4102,3870,4263,4102,4102,4262,4261,4102,4102,4260,
-            4259,3883,4102,4102,4258,4257,4102,238,4334,4102,
-            4102,4333,4296,4102,2308,4295,4102,4102,4102,4271,
-            4272,4102,4102,4102,4102,4102,4102,4102,4102,4102,
-            4102,3964,4102,4102,4102,4102,4102,4102,4102,3120,
-            4102,4102,4102,4102,4102,4102,4102,4102,4102,4102,
-            4102,4102,4102,4102,4102,4102,4102,4102,4102,4102,
-            4102,4102,4102,4102,4102,4102,4102,4102,4102,4102,
-            4102,4102,4102,4102,4102,4102,4102,4102,4102,4102,
-            4102,4102,4102,4102,4102,4102,4102,4102,4102,4102,
-            4102,4102,4102,4102,4102,4102,4102,4102,4102,4102,
-            4102,4102,4102,4102,4102,4102,4102,4102,4102,4102,
-            4332
+            155,1478,510,3104,247,3105,3132,3227,3225,3226,
+            3228,3229,3230,3231,3232,3233,508,3108,3109,3110,
+            3111,3112,3133,3134,238,3223,3113,3114,3115,738,
+            681,624,568,515,3106,2856,258,509,3129,3118,
+            3119,3120,3121,3122,3123,3124,3125,3126,3127,3128,
+            3131,2794,3102,3103,3101,3100,3098,3099,3149,507,
+            741,3270,3267,3269,3271,3272,3274,107,2993,69,
+            260,1526,2461,3097,2420,3234,3097,331,3097,1478,
+            510,3104,1718,3105,3132,3227,3225,3226,3228,3229,
+            3230,3231,3232,3233,508,3108,3109,3110,3111,3112,
+            3133,3134,3097,3223,3113,3114,3115,738,681,624,
+            568,515,3106,2856,414,509,3129,3118,3119,3120,
+            3121,3122,3123,3124,3125,3126,3127,3128,3131,2794,
+            3102,3103,3101,3100,3098,3099,3149,507,741,3270,
+            3267,3269,3271,3272,3274,753,2993,3097,684,1526,
+            2887,3297,348,3097,429,344,230,1478,510,3104,
+            1718,3105,3132,3227,3225,3226,3228,3229,3230,3231,
+            3232,3233,508,3108,3109,3110,3111,3112,3133,3134,
+            3097,3223,3113,3114,3115,738,681,624,568,515,
+            3106,2825,249,509,3129,3118,3119,3120,3121,3122,
+            3123,3124,3125,3126,3127,3128,3131,2794,3102,3103,
+            3101,3100,3098,3099,3149,507,741,3270,3267,3269,
+            3271,3272,3274,73,2993,2054,2461,1526,2420,190,
+            72,3097,1430,2461,3097,2420,3097,3034,171,10,
+            511,3097,1478,510,3104,2933,3105,3132,3227,3225,
+            3226,3228,3229,3230,3231,3232,3233,508,3108,3109,
+            3110,3111,3112,3133,3134,331,3223,3113,3114,3115,
+            738,681,624,568,515,3106,2825,3097,509,3129,
+            3118,3119,3120,3121,3122,3123,3124,3125,3126,3127,
+            3128,3131,2794,3102,3103,3101,3100,3098,3099,3149,
+            507,741,3270,3267,3269,3271,3272,3274,10,2993,
+            627,570,1526,71,3097,3096,2461,1574,2420,267,
+            3097,2942,3343,176,44,511,3097,1478,510,3104,
+            2933,3105,3132,3227,3225,3226,3228,3229,3230,3231,
+            3232,3233,508,3108,3109,3110,3111,3112,3133,3134,
+            3097,3223,3113,3114,3115,738,681,624,568,515,
+            3106,2825,3097,509,3129,3118,3119,3120,3121,3122,
+            3123,3124,3125,3126,3127,3128,3131,2794,3102,3103,
+            3101,3100,3098,3099,3149,507,741,3270,3267,3269,
+            3271,3272,3274,44,2993,627,570,1526,222,1478,
+            510,3104,3097,3105,3132,3227,3225,3226,3228,3229,
+            3230,3231,3232,3233,508,3108,3109,3110,3111,3112,
+            3133,3134,2150,3223,3113,3114,3115,738,681,624,
+            568,515,3106,2825,2198,509,3129,3118,3119,3120,
+            3121,3122,3123,3124,3125,3126,3127,3128,3131,2794,
+            3102,3103,3101,3100,3098,3099,3149,507,741,3270,
+            3267,3269,3271,3272,3274,3097,2993,48,43,1526,
+            3097,1478,2931,3104,3097,3105,3132,3227,3225,3226,
+            3228,3229,3230,3231,3232,3233,508,3108,3109,3110,
+            3111,3112,3133,3134,1766,3223,3113,3114,3115,738,
+            681,624,568,515,3106,2825,3097,509,3129,3118,
+            3119,3120,3121,3122,3123,3124,3125,3126,3127,3128,
+            3131,2794,3102,3103,3101,3100,3098,3099,3149,507,
+            741,3270,3267,3269,3271,3272,3274,4601,2993,3097,
+            2950,1526,3097,1478,510,3104,3097,3105,3132,3227,
+            3225,3226,3228,3229,3230,3231,3232,3233,508,3108,
+            3109,3110,3111,3112,3133,3134,3097,3223,3113,3114,
+            3115,738,681,624,568,515,3106,2825,3097,509,
+            3129,3118,3119,3120,3121,3122,3123,3124,3125,3126,
+            3127,3128,3131,2794,3102,3103,3101,3100,3098,3099,
+            3149,507,741,3270,3267,3269,3271,3272,3274,3097,
+            2993,3097,1478,510,3104,248,3105,3132,3227,3225,
+            3226,3228,3229,3230,3231,3232,3233,508,3108,3109,
+            3110,3111,3112,3133,3134,273,3223,3113,3114,3115,
+            738,681,624,568,515,3106,2825,2988,509,3129,
+            3118,3119,3120,3121,3122,3123,3124,3125,3126,3127,
+            3128,3131,2794,3102,3103,3101,3100,3098,3099,3149,
+            507,741,3270,3267,3269,3271,3272,3274,259,3097,
+            3097,750,335,202,3097,325,325,3097,331,3097,
+            1478,510,3104,1862,3105,3132,3227,3225,3226,3228,
+            3229,3230,3231,3232,3233,508,3108,3109,3110,3111,
+            3112,3133,3134,199,3223,3113,3114,3115,738,681,
+            624,568,515,3106,2825,3097,509,3129,3118,3119,
+            3120,3121,3122,3123,3124,3125,3126,3127,3128,3131,
+            2794,3102,3103,3101,3100,3098,3099,3149,507,741,
+            3270,3267,3269,3271,3272,3274,3097,241,3224,3104,
+            3246,3105,3132,3227,3225,3226,3228,3229,3230,3231,
+            3232,3233,3107,3108,3109,3110,3111,3112,3133,3134,
+            335,3223,3113,3114,3115,3135,3136,3137,3138,3139,
+            3106,3116,189,3141,3129,3118,3119,3120,3121,3122,
+            3123,3124,3125,3126,3127,3128,3131,3117,3102,3103,
+            3101,3100,3098,3099,3149,3097,2903,3224,3104,220,
+            3105,3132,3227,3225,3226,3228,3229,3230,3231,3232,
+            3233,3107,3108,3109,3110,3111,3112,3133,3134,3097,
+            3223,3113,3114,3115,3135,3136,3137,3138,3139,3106,
+            3116,93,3141,1130,3118,3119,3120,3121,3122,3123,
+            3124,3125,3126,3127,3128,3131,3117,3102,3103,3101,
+            3100,3098,3099,3149,45,220,45,3318,3318,3318,
+            3318,189,95,3097,1910,2693,2658,3097,518,3318,
+            3318,3318,3318,3318,3318,3318,3318,3318,2761,2728,
+            3318,3318,3318,77,3097,2903,3234,81,3318,3318,
+            3318,3227,3225,3226,3228,3229,3230,3231,3232,3233,
+            79,2619,2580,2541,2502,2619,2580,2541,2502,3097,
+            127,3097,3007,3247,3248,3249,3250,3251,2619,2580,
+            2541,2502,3097,575,3097,4244,3318,3318,3318,3318,
+            3318,3318,3318,3318,3318,3005,976,3318,3318,3318,
+            3318,3318,3318,503,65,3318,3318,3318,3318,3318,
+            3318,3097,3097,3224,3097,220,45,3132,3227,3225,
+            3226,3228,3229,3230,3231,3232,3233,3097,330,3097,
+            2377,2334,2291,3133,3134,3097,3223,137,1142,3097,
+            3135,3136,3137,3138,3139,3097,3097,3097,3141,3129,
+            3118,3119,3120,3121,3122,3123,3124,3125,3126,3127,
+            3128,3131,194,1190,3234,127,220,351,423,3227,
+            3225,3226,3228,3229,3230,3231,3232,3233,258,338,
+            325,3097,2911,3097,511,4244,3097,753,63,2903,
+            684,3247,3248,3249,3250,3251,1028,61,3097,3224,
+            3097,189,42,3097,3227,3225,3226,3228,3229,3230,
+            3231,3232,3233,3097,138,3022,3097,67,3224,3000,
+            41,503,3223,3227,3225,3226,3228,3229,3230,3231,
+            3232,3233,137,3097,1958,40,3318,189,3010,1958,
+            3097,3223,1670,2377,2334,2291,3097,924,148,760,
+            99,331,39,753,627,570,684,243,97,255,
+            3097,3097,3097,3266,3097,38,2761,2728,414,1958,
+            1238,154,3024,203,2761,2728,3038,3035,3097,632,
+            321,259,259,2246,1286,1334,2992,3097,1382,153,
+            1622,3097,3097,160,156,3298,3217,3097,57,920,
+            325,139,3097,3234,152,223,3211,3044,58,2911,
+            32,50,2102,3097,3029,138,33,51,3097,817,
+            140,151,3097,364,3097,441,3097,3097,3097,3097,
+            689,2919,2925,3311,150,3097,3097,3097,867,3313,
+            3310,1958,218,575,3032,3097,3097,3097,3097,3097,
+            235,3212,3281,3326,231,3097,3097,3097,3097,3325,
+            3309,3097,3284,3097,3097,3282,3097,3285,3283,2920,
+            2937,48,43,3097,3015,3097,3097,3097,3097,1814,
+            3097,3097,3097,3097,3097,3097,3097,335,3097,3097,
+            1080,3097,3097,3097,3097,3097,3097,3097,3097,3097,
+            3097,3097,3097,3097,3097,3097,3097,3097,3097,3097,
+            3097,3097,3097,3097,3097,3097,3097,3097,3097,2006,
+            3097,3097,3097,3097,3097,3097,3097,3097,3097,3097,
+            3097,3097,3097,3097,3097,3097,3097,3097,3097,3097,
+            3097,3097,3097,3097,3097,3097,3097,3097,3097,3097,
+            3097,3324
         };
     };
     public final static char termAction[] = TermAction.termAction;
@@ -1184,38 +961,28 @@
 
     public interface Asb {
         public final static char asb[] = {0,
-            367,377,69,165,166,337,337,337,337,337,
-            152,83,152,376,52,348,348,348,348,348,
-            348,348,382,255,333,206,154,329,329,88,
-            88,88,88,88,152,88,415,142,414,252,
-            142,77,88,52,323,152,90,90,88,379,
-            379,379,379,379,379,379,379,379,379,379,
-            379,379,379,379,379,379,379,379,169,169,
-            217,217,171,215,215,215,215,215,216,216,
-            335,329,219,223,88,225,231,227,236,233,
-            326,328,331,324,324,441,408,324,329,329,
-            329,329,329,329,329,329,329,329,329,329,
-            329,329,329,329,329,329,329,1,152,329,
-            88,88,174,120,259,99,99,142,142,89,
-            89,350,89,89,88,88,88,88,88,88,
-            88,88,88,88,88,52,323,52,323,152,
-            409,408,152,259,323,259,259,259,259,259,
-            259,259,259,259,259,259,259,259,259,259,
-            259,259,359,352,88,4,358,358,356,259,
-            361,361,259,173,324,441,379,379,379,217,
-            216,218,217,217,217,217,217,217,217,217,
-            217,217,217,217,329,329,88,223,223,227,
-            227,233,231,231,231,326,324,441,166,324,
-            88,152,324,324,364,324,324,324,324,324,
-            324,324,324,324,324,324,324,324,324,324,
-            324,324,88,88,2,152,88,324,88,218,
-            218,324,259,329,329,174,88,174,152,88,
-            88,88,88,88,88,88,88,88,88,88,
-            86,86,406,88,348,152,411,348,324,259,
-            259,361,74,324,212,417,324,324,324,324,
-            324,324,324,324,324,324,324,440,441,324,
-            88,51,386,324,324,218,152,88,152,88,
-            52,87,444,213,324,213,88,88,324
+            409,419,69,209,210,257,257,257,257,257,
+            143,145,143,418,52,268,268,268,268,268,
+            268,268,426,310,391,248,148,387,387,79,
+            79,79,79,79,143,79,167,133,166,307,
+            133,163,79,52,378,143,81,81,79,381,
+            381,381,169,169,171,171,213,271,270,270,
+            270,270,270,272,271,393,387,274,278,79,
+            280,286,282,291,288,384,384,386,389,379,
+            379,454,74,379,387,387,387,1,143,79,
+            79,111,314,90,90,133,133,80,80,395,
+            80,80,79,79,79,79,79,79,79,79,
+            79,79,79,79,52,378,52,378,143,79,
+            314,378,314,404,397,79,4,403,403,401,
+            406,406,215,379,454,381,171,271,273,171,
+            387,171,387,387,387,79,278,278,282,282,
+            288,286,286,286,379,454,210,379,379,379,
+            421,379,79,79,2,143,79,79,273,273,
+            314,387,216,79,143,79,77,77,424,268,
+            143,207,268,379,314,406,160,254,379,430,
+            379,453,454,379,79,51,457,379,273,143,
+            79,143,79,52,78,477,255,379,255,379,
+            79,79,379,379
         };
     };
     public final static char asb[] = Asb.asb;
@@ -1223,51 +990,54 @@
 
     public interface Asr {
         public final static byte asr[] = {0,
-            80,70,68,60,38,39,40,41,42,43,
-            44,45,46,47,48,49,50,6,22,23,
-            25,66,37,62,16,63,61,64,65,56,
-            57,55,54,52,53,5,34,17,18,19,
-            20,21,26,27,28,58,1,35,51,82,
-            4,8,9,7,10,11,12,13,14,15,
-            59,29,30,31,32,33,3,0,2,36,
-            96,79,24,71,84,0,73,91,79,75,
-            78,0,79,90,0,2,89,70,68,60,
-            66,62,63,61,64,65,59,1,56,57,
-            55,54,52,53,4,5,34,16,17,18,
-            19,20,21,26,27,28,58,35,51,38,
-            39,40,41,42,43,44,45,46,47,48,
-            49,50,6,22,23,29,30,31,32,33,
-            37,25,8,9,7,10,11,12,13,14,
-            15,3,0,4,2,80,71,36,84,76,
-            77,96,6,67,79,23,22,0,69,0,
-            81,72,67,34,35,16,17,18,19,20,
-            21,5,74,83,85,86,87,88,75,76,
-            77,73,91,78,92,93,94,26,27,28,
-            95,6,22,23,1,2,80,84,96,79,
-            4,36,71,0,69,81,1,72,87,88,
-            83,85,16,17,34,35,18,19,20,21,
-            4,5,26,27,28,2,80,74,71,36,
-            84,86,75,78,92,93,94,96,22,23,
-            95,73,91,79,76,77,6,0,70,60,
-            38,39,40,41,42,43,44,45,46,47,
-            48,49,50,6,22,23,29,30,31,32,
-            33,8,9,7,10,11,12,13,14,15,
-            25,66,37,62,16,63,61,64,65,59,
-            56,57,55,54,52,53,4,5,34,17,
-            18,19,20,21,26,27,28,58,1,35,
-            51,68,3,2,0,4,0,24,1,0,
-            1,24,75,78,67,0,25,3,8,9,
-            7,10,11,12,13,14,15,24,0,92,
-            0,80,36,86,0,24,4,36,80,0,
-            74,36,0,2,67,0,22,23,90,75,
-            78,76,77,6,3,73,79,0,1,72,
-            0,91,73,67,0,76,77,6,8,9,
-            7,10,11,12,13,14,15,59,29,30,
-            31,32,33,3,0,93,0,36,96,0,
-            22,23,79,73,91,0,71,67,34,35,
-            16,17,18,19,4,20,21,5,1,81,
-            83,85,72,87,88,26,27,28,95,24,
-            2,36,0,94,0
+            80,71,68,60,38,50,6,22,23,39,
+            40,41,42,43,44,45,46,47,48,49,
+            25,66,37,62,16,63,61,64,65,58,
+            56,57,55,54,52,53,5,34,17,18,
+            19,20,21,26,27,28,1,35,51,82,
+            3,8,9,7,10,11,12,13,14,15,
+            59,29,30,31,32,33,2,0,4,72,
+            84,79,24,36,96,0,4,89,71,68,
+            60,66,62,63,61,64,65,59,1,58,
+            56,57,55,54,52,53,3,5,34,16,
+            17,18,19,20,21,26,27,28,35,51,
+            37,39,40,41,42,43,44,45,46,47,
+            48,49,38,50,6,22,23,29,30,31,
+            32,33,25,8,9,7,10,11,12,13,
+            14,15,2,0,79,90,0,3,4,80,
+            36,76,77,96,6,22,23,79,67,72,
+            84,0,79,75,78,73,91,0,69,0,
+            34,35,16,17,18,19,3,20,21,5,
+            4,80,74,83,72,36,84,85,86,87,
+            88,75,76,77,78,92,93,94,26,27,
+            28,95,96,6,1,70,73,91,79,23,
+            22,0,81,70,67,34,35,16,17,18,
+            19,20,21,5,74,83,85,86,87,88,
+            75,76,77,73,91,78,92,93,94,26,
+            27,28,95,6,22,23,1,4,80,84,
+            96,79,3,36,72,0,25,2,8,9,
+            7,10,11,12,13,14,15,24,0,69,
+            1,81,70,87,88,83,85,16,17,34,
+            35,18,19,20,21,3,5,26,27,28,
+            4,80,74,72,36,84,86,75,78,92,
+            93,94,96,22,23,95,73,91,79,76,
+            77,6,0,71,60,38,50,6,22,23,
+            29,30,31,32,33,39,40,41,42,43,
+            44,45,46,47,48,49,8,9,7,10,
+            11,12,13,14,15,25,66,37,62,16,
+            63,61,64,65,59,58,56,57,55,54,
+            52,53,3,5,34,17,18,19,20,21,
+            26,27,28,1,35,51,68,2,4,0,
+            1,70,0,3,0,24,1,0,1,24,
+            75,78,67,0,92,0,80,36,86,0,
+            24,3,36,80,0,74,36,0,22,23,
+            90,75,78,76,77,6,2,73,79,0,
+            4,67,0,93,0,91,73,67,0,72,
+            67,34,35,16,17,18,19,3,20,21,
+            5,1,81,83,85,70,87,88,26,27,
+            28,95,24,4,36,0,76,77,6,8,
+            9,7,10,11,12,13,14,15,59,29,
+            30,31,32,33,2,0,94,0
         };
     };
     public final static byte asr[] = Asr.asr;
@@ -1275,38 +1045,28 @@
 
     public interface Nasb {
         public final static byte nasb[] = {0,
-            67,30,30,30,30,23,23,23,23,23,
-            29,13,1,7,28,30,30,30,30,30,
-            30,30,73,75,88,30,30,30,30,26,
-            26,26,26,26,77,26,30,41,7,9,
-            41,11,26,28,80,91,26,26,26,71,
-            71,71,71,71,71,71,71,71,71,71,
-            71,71,71,71,71,71,71,71,30,30,
-            71,30,30,30,30,30,30,30,71,71,
-            30,30,4,30,26,30,30,30,30,30,
-            30,30,30,30,30,30,82,30,30,30,
-            30,30,30,30,30,30,30,30,30,30,
-            30,30,30,30,30,30,30,26,84,30,
-            26,26,30,16,26,19,15,41,41,61,
-            61,30,55,55,43,43,49,49,49,49,
-            31,37,37,37,26,28,86,28,86,91,
-            30,30,91,26,29,26,26,26,26,26,
-            26,26,26,26,26,26,26,26,26,26,
-            26,26,30,30,26,26,30,30,30,26,
-            30,30,26,30,30,30,71,71,71,71,
-            71,71,30,30,30,30,30,30,30,30,
-            30,30,30,30,30,30,26,30,30,30,
-            30,30,30,30,30,30,30,30,69,30,
-            26,91,30,30,30,30,30,30,30,30,
-            30,30,30,30,30,30,30,30,30,30,
-            30,30,26,26,26,90,26,30,26,71,
-            71,30,26,30,30,30,26,30,91,25,
-            25,25,25,25,25,25,25,25,25,25,
-            26,26,30,26,30,91,30,30,30,26,
-            26,30,30,30,30,30,30,30,30,30,
-            30,30,30,30,30,30,30,30,30,30,
-            26,28,28,30,30,71,91,26,91,26,
-            28,26,30,30,30,30,26,26,30
+            81,31,31,31,31,21,21,21,21,21,
+            30,15,1,17,29,31,31,31,31,31,
+            31,31,85,89,87,31,31,31,31,26,
+            26,26,26,26,95,26,31,44,17,13,
+            44,19,26,29,91,91,26,26,26,23,
+            23,23,31,31,31,31,31,31,31,31,
+            31,31,31,23,23,31,31,4,31,26,
+            31,31,31,31,31,31,31,31,31,31,
+            31,31,31,31,31,31,31,26,93,26,
+            26,10,26,7,74,44,44,67,67,31,
+            60,60,46,46,53,53,53,53,32,39,
+            39,39,26,26,29,102,29,102,100,26,
+            26,30,26,31,31,26,26,31,31,31,
+            31,31,31,31,31,23,23,23,23,31,
+            31,31,31,31,31,26,31,31,31,31,
+            31,31,31,31,31,31,83,31,31,31,
+            31,31,26,26,26,99,26,26,23,23,
+            26,31,31,26,100,25,26,26,31,31,
+            100,31,31,31,26,31,31,31,31,31,
+            31,31,31,31,26,29,29,31,23,100,
+            26,100,26,29,26,31,31,31,31,31,
+            26,26,31,31
         };
     };
     public final static byte nasb[] = Nasb.nasb;
@@ -1314,16 +1074,17 @@
 
     public interface Nasr {
         public final static char nasr[] = {0,
-            3,74,0,75,76,0,51,0,57,0,
-            56,0,69,0,81,2,6,0,2,6,
-            8,0,50,0,44,2,5,4,3,0,
-            3,2,5,4,38,0,5,3,4,36,
-            2,0,3,2,5,4,34,0,5,2,
-            3,4,30,0,5,2,3,4,28,0,
-            3,2,5,4,25,0,70,89,68,0,
-            42,0,70,0,93,0,73,92,0,85,
-            0,87,0,80,0,60,0,91,0,64,
-            44,0
+            3,85,0,86,87,0,11,65,13,2,
+            8,0,63,0,78,0,57,0,62,0,
+            55,0,50,0,49,2,6,11,4,3,
+            0,3,2,6,4,11,44,0,6,11,
+            3,4,42,2,0,3,2,6,4,11,
+            40,0,6,2,11,3,4,36,0,6,
+            2,11,3,4,34,0,3,2,6,4,
+            11,31,0,5,82,2,11,65,92,0,
+            79,98,77,0,79,0,100,0,102,0,
+            73,0,91,0,48,84,101,0,72,49,
+            0,68,0
         };
     };
     public final static char nasr[] = Nasr.nasr;
@@ -1331,14 +1092,14 @@
 
     public interface TerminalIndex {
         public final static char terminalIndex[] = {0,
-            11,12,98,7,10,55,86,87,88,89,
+            11,98,7,12,10,55,86,87,88,89,
             90,92,93,94,95,3,4,5,6,8,
             9,56,57,20,34,46,47,48,61,62,
             63,64,65,1,2,19,58,66,67,68,
             69,70,71,72,73,74,75,76,77,85,
             49,78,79,80,81,82,83,84,91,30,
-            31,32,33,53,54,96,21,51,13,42,
-            18,25,38,16,35,36,37,41,97,14,
+            31,32,33,53,54,96,21,51,13,25,
+            42,18,38,16,35,36,37,41,97,14,
             15,99,17,22,23,24,26,27,28,39,
             40,43,44,45,50,52,59,60,100
         };
@@ -1348,16 +1109,17 @@
 
     public interface NonterminalIndex {
         public final static char nonterminalIndex[] = {0,
-            0,106,105,129,101,102,0,127,122,124,
+            0,104,113,136,101,102,0,105,0,103,
+            110,0,134,106,129,131,0,0,0,0,
             0,0,0,0,0,0,0,0,0,0,
-            0,0,0,0,123,0,120,121,117,118,
-            119,0,115,116,113,114,111,112,109,110,
-            0,0,128,108,0,135,136,0,0,0,
-            148,0,0,0,141,143,144,0,0,107,
-            131,0,133,137,0,0,140,145,146,147,
-            0,0,103,104,125,126,0,0,130,132,
-            134,0,0,0,138,0,139,0,142,0,
-            149,150,151,0,0
+            130,0,127,128,124,125,126,0,122,123,
+            120,121,118,119,116,117,0,142,115,0,
+            135,143,0,0,0,0,154,0,0,0,
+            147,149,150,0,107,0,0,114,138,0,
+            140,144,145,0,0,146,151,152,153,0,
+            0,108,109,111,112,132,133,0,0,137,
+            139,141,0,0,0,0,0,148,0,155,
+            156,157,0,0
         };
     };
     public final static char nonterminalIndex[] = NonterminalIndex.nonterminalIndex;
@@ -1365,14 +1127,11 @@
 
     public interface ScopePrefix {
         public final static char scopePrefix[] = {
-            179,13,207,288,187,1,8,54,59,64,
-            69,74,79,84,89,94,99,104,109,114,
-            119,124,129,134,139,144,149,154,159,22,
-            164,168,227,231,235,239,243,247,251,255,
-            259,263,267,271,277,294,40,47,172,213,
-            281,47,197,197,285,31,220,298,298,306,
-            306,314,314,314,314,328,328,336,336,336,
-            220
+            83,117,13,111,141,168,91,125,1,8,
+            53,58,63,22,68,72,147,151,157,174,
+            46,76,161,46,101,131,101,131,165,40,
+            31,178,178,186,186,194,194,194,194,208,
+            208,216,216,216
         };
     };
     public final static char scopePrefix[] = ScopePrefix.scopePrefix;
@@ -1380,14 +1139,11 @@
 
     public interface ScopeSuffix {
         public final static char scopeSuffix[] = {
-            6,20,6,6,193,6,6,6,6,6,
-            6,6,6,6,6,6,6,6,6,6,
-            6,6,6,6,6,6,6,6,6,27,
-            6,6,6,6,6,6,6,6,6,6,
-            6,6,6,275,275,6,44,51,176,217,
-            51,51,193,201,6,34,217,300,303,308,
-            311,316,319,322,325,330,333,338,341,344,
-            222
+            6,6,20,6,6,6,97,97,6,6,
+            6,6,6,27,6,6,6,155,155,6,
+            50,80,50,50,97,97,105,135,6,43,
+            34,180,183,188,191,196,199,202,205,210,
+            213,218,221,224
         };
     };
     public final static char scopeSuffix[] = ScopeSuffix.scopeSuffix;
@@ -1395,14 +1151,11 @@
 
     public interface ScopeLhs {
         public final static char scopeLhs[] = {
-            83,32,83,10,83,76,76,8,7,7,
-            7,7,7,7,7,7,7,7,7,7,
-            7,7,7,7,7,7,7,63,63,32,
-            48,49,82,82,82,82,82,82,82,82,
-            82,82,82,16,15,10,26,65,44,46,
-            12,12,83,83,11,32,46,28,28,30,
-            30,34,34,34,34,36,36,38,38,38,
-            46
+            94,93,38,94,93,16,94,93,87,87,
+            13,12,71,38,53,54,93,22,21,16,
+            74,49,18,18,94,93,94,93,17,32,
+            38,34,34,36,36,40,40,40,40,42,
+            42,44,44,44
         };
     };
     public final static char scopeLhs[] = ScopeLhs.scopeLhs;
@@ -1410,14 +1163,11 @@
 
     public interface ScopeLa {
         public final static byte scopeLa[] = {
-            2,94,2,2,71,2,2,2,2,2,
-            2,2,2,2,2,2,2,2,2,2,
-            2,2,2,2,2,2,2,2,2,93,
-            2,2,2,2,2,2,2,2,2,2,
-            2,2,2,80,80,2,96,74,4,71,
-            74,74,71,84,2,92,71,17,16,35,
-            34,21,20,19,18,5,4,28,27,26,
-            36
+            4,4,94,4,4,4,72,72,4,4,
+            4,4,4,93,4,4,4,80,80,4,
+            74,3,74,74,72,72,84,36,4,96,
+            92,17,16,35,34,21,20,19,18,5,
+            3,28,27,26
         };
     };
     public final static byte scopeLa[] = ScopeLa.scopeLa;
@@ -1425,14 +1175,11 @@
 
     public interface ScopeStateSet {
         public final static byte scopeStateSet[] = {
-            2,15,2,8,2,4,4,7,6,6,
-            6,6,6,6,6,6,6,6,6,6,
-            6,6,6,6,6,6,6,1,1,15,
-            92,92,2,2,2,2,2,2,2,2,
-            2,2,2,8,8,8,11,1,100,80,
-            8,8,2,2,8,15,80,13,13,15,
-            15,19,19,19,19,21,21,24,24,24,
-            80
+            2,2,15,2,2,8,2,2,4,4,
+            7,6,1,15,63,63,2,8,8,8,
+            1,71,8,8,2,2,2,2,8,11,
+            15,13,13,15,15,19,19,19,19,21,
+            21,24,24,24
         };
     };
     public final static byte scopeStateSet[] = ScopeStateSet.scopeStateSet;
@@ -1440,41 +1187,29 @@
 
     public interface ScopeRhs {
         public final static char scopeRhs[] = {0,
-            165,1,101,88,0,12,0,165,1,101,
-            87,0,138,93,138,92,138,70,0,45,
-            0,138,92,138,70,0,44,109,45,0,
-            138,70,0,43,109,44,109,45,0,185,
-            143,68,0,52,109,0,142,81,101,0,
-            16,0,0,144,1,141,105,0,144,1,
-            141,28,0,144,1,141,27,0,144,1,
-            141,26,0,144,1,141,21,0,144,1,
-            141,20,0,144,1,141,19,0,144,1,
-            141,18,0,144,1,141,17,0,144,1,
-            141,16,0,144,1,141,34,0,144,1,
-            141,5,0,144,1,141,4,0,144,1,
-            141,53,0,144,1,141,52,0,144,1,
-            141,54,0,144,1,141,55,0,144,1,
-            141,57,0,144,1,141,56,0,144,1,
-            141,101,0,144,1,141,51,0,144,1,
-            141,35,0,183,1,59,0,146,1,103,
-            0,146,24,3,0,7,109,0,138,71,
-            143,84,143,1,38,0,143,84,143,1,
-            38,0,18,109,12,0,143,1,38,0,
-            22,108,18,109,12,0,138,71,143,1,
-            38,0,143,36,143,0,18,109,0,143,
-            0,19,108,18,109,0,145,1,49,0,
-            145,1,48,0,145,1,47,0,145,1,
-            46,0,145,1,45,0,145,1,44,0,
-            145,1,42,0,145,1,43,0,145,1,
-            41,0,145,1,40,0,145,1,39,0,
-            179,69,59,0,14,0,177,69,103,0,
-            142,81,104,0,138,1,0,144,1,101,
-            67,102,0,144,1,60,0,126,0,4,
-            123,0,3,123,0,130,0,2,121,0,
-            1,121,0,132,0,9,118,0,8,118,
-            0,6,118,0,5,118,0,134,0,10,
-            116,0,7,116,0,136,0,48,114,0,
-            47,114,0,46,114,0
+            174,1,101,88,0,12,0,174,1,101,
+            87,0,144,93,144,92,144,71,0,45,
+            0,144,92,144,71,0,44,116,45,0,
+            144,71,0,43,116,44,116,45,0,172,
+            68,0,52,116,0,150,81,101,0,16,
+            0,0,155,1,149,107,0,155,1,149,
+            109,0,155,1,149,164,0,194,1,59,
+            0,151,1,103,0,151,24,2,0,7,
+            116,0,144,72,148,84,148,1,181,0,
+            148,84,148,1,181,0,18,116,12,0,
+            148,1,181,0,22,115,18,116,12,0,
+            144,72,148,1,181,0,144,72,148,36,
+            148,1,182,0,148,36,148,1,182,0,
+            148,1,182,0,19,115,18,116,12,0,
+            144,72,148,1,182,0,144,1,182,0,
+            190,69,59,0,14,0,188,69,103,0,
+            150,81,113,0,144,1,0,155,1,101,
+            67,102,0,155,1,60,0,132,0,4,
+            130,0,3,130,0,136,0,2,128,0,
+            1,128,0,138,0,9,125,0,8,125,
+            0,6,125,0,5,125,0,140,0,10,
+            123,0,7,123,0,142,0,48,121,0,
+            47,121,0,46,121,0
         };
     };
     public final static char scopeRhs[] = ScopeRhs.scopeRhs;
@@ -1482,19 +1217,15 @@
 
     public interface ScopeState {
         public final static char scopeState[] = {0,
-            412,403,0,340,0,403,412,3844,3819,3794,
-            3767,3740,3711,3682,3649,3616,3583,3550,3515,3480,
-            3443,3406,3369,3288,3246,2308,3204,3162,3120,2130,
-            2084,3078,424,356,2264,1521,3036,2994,1458,2952,
-            2910,2868,2826,1412,1366,2784,1320,1274,1228,1182,
-            1136,1090,1044,998,952,906,860,814,768,722,
-            676,630,584,538,2742,3330,492,2220,2176,276,
-            2700,2658,2616,2574,2532,2490,2448,2406,2364,2037,
-            1990,1943,1896,1849,1802,1755,1708,1661,1614,1567,
-            0,3964,3883,3870,3959,3906,3901,3896,0,858,
-            812,766,2037,1990,1943,1896,1849,1802,1755,1708,
-            1661,1614,1567,720,3981,674,628,582,3980,3956,
-            3951,536,3903,3869,0
+            348,2887,0,341,0,2887,348,2856,2825,2794,
+            2761,2728,2693,2658,2619,2580,2541,2502,2461,2420,
+            2377,2334,2291,2198,2150,1080,2102,2054,2006,867,
+            441,364,817,1028,760,1958,1910,689,1862,1814,
+            1766,1718,632,575,1670,1622,1574,2246,518,976,
+            924,273,1526,1478,1430,1382,1334,1286,1238,1190,
+            1142,0,3015,2937,2920,3010,3005,2942,2903,0,
+            3038,3034,3032,817,3029,3000,2911,3022,3007,2988,
+            2993,2950,2905,0
         };
     };
     public final static char scopeState[] = ScopeState.scopeState;
@@ -1502,38 +1233,28 @@
 
     public interface InSymb {
         public final static char inSymb[] = {0,
-            0,171,3,167,170,6,77,76,78,75,
-            90,188,73,169,24,22,23,149,149,149,
-            149,149,102,173,102,146,102,103,59,24,
-            24,24,24,24,24,24,189,67,169,192,
-            67,190,4,1,1,68,51,35,1,105,
-            58,28,27,26,21,20,19,18,17,34,
-            5,4,53,52,54,55,57,56,103,59,
-            16,37,3,33,32,31,30,29,104,101,
-            102,60,109,126,70,130,134,132,139,136,
-            172,3,101,146,183,184,143,138,141,141,
-            141,141,141,141,141,141,141,141,141,141,
-            141,141,141,141,141,141,141,69,69,141,
-            81,81,141,67,1,85,83,88,87,17,
-            16,138,35,34,5,4,21,20,19,18,
-            95,28,27,26,4,24,1,24,1,36,
-            185,186,36,1,1,1,1,1,1,1,
-            1,1,1,1,1,1,1,1,1,1,
-            1,1,177,138,82,35,178,179,3,1,
-            142,142,1,101,144,142,51,35,16,105,
-            101,105,38,49,48,47,46,45,44,42,
-            43,41,40,39,101,101,92,126,126,132,
-            132,136,134,134,134,146,157,159,146,157,
-            96,36,144,176,102,144,144,144,144,144,
-            144,144,144,144,144,144,144,144,144,144,
-            144,144,86,82,36,36,4,144,36,74,
-            74,144,1,141,141,141,81,141,1,1,
-            1,1,1,1,1,1,1,1,1,1,
-            1,1,138,4,2,36,167,2,144,1,
-            1,142,143,145,143,3,145,145,145,145,
-            145,145,145,145,145,145,165,89,166,165,
-            93,24,24,144,144,74,84,71,36,71,
-            24,36,138,143,138,143,71,71,138
+            0,180,2,176,179,6,77,76,78,75,
+            90,197,73,178,24,22,23,154,154,154,
+            154,154,102,184,102,151,102,103,59,24,
+            24,24,24,24,24,24,198,67,178,201,
+            67,199,3,1,1,68,51,35,1,107,
+            110,109,103,59,16,37,2,105,33,32,
+            31,30,29,113,101,102,60,115,132,71,
+            136,140,138,145,142,183,147,2,101,151,
+            194,172,172,144,149,149,149,69,69,81,
+            81,67,1,85,83,88,87,17,16,144,
+            35,34,5,3,21,20,19,18,95,28,
+            27,26,3,3,24,1,24,1,36,96,
+            1,1,1,188,144,82,35,189,190,2,
+            150,150,101,155,150,164,107,101,107,38,
+            181,104,182,101,101,92,132,132,138,138,
+            142,140,140,140,165,167,151,165,155,195,
+            102,155,86,82,36,36,3,36,74,74,
+            1,149,149,81,1,1,1,1,144,4,
+            36,176,4,155,1,150,148,148,144,2,
+            174,89,175,174,93,24,24,155,74,84,
+            72,36,72,24,36,144,148,144,148,144,
+            72,72,144,144
         };
     };
     public final static char inSymb[] = InSymb.inSymb;
@@ -1642,12 +1363,19 @@
             "IDENTIFIER",
             "INTEGER_RANGE_START",
             "ERROR_TOKEN",
+            "iteratorIdentifier",
             "keywordAsIdentifier1",
-            "keywordAsIdentifier",
+            "binaryName",
+            "simpleNameCS",
+            "keywordAsName",
+            "keywordAsName1",
+            "unaryName",
+            "iterateName",
+            "iteratorName",
+            "oclIsInStateName",
             "operationCS1",
             "operationCS2",
             "pathNameCS",
-            "simpleNameCS",
             "parametersCS",
             "variableCS",
             "oclExpressionCS",
@@ -1676,11 +1404,10 @@
             "variableListCS2",
             "featureCallExpCS",
             "loopExpCS",
-            "iterContents",
+            "typedVariableCS",
             "typeCS",
             "variableCS2",
             "variableListCS",
-            "letExpSubCS",
             "oclMessageArgumentsCS",
             "oclMessageArgCS",
             "packageDeclarationCSm",
@@ -1700,8 +1427,8 @@
 
     public final static int
            ERROR_SYMBOL      = 99,
-           SCOPE_UBOUND      = 70,
-           SCOPE_SIZE        = 71,
+           SCOPE_UBOUND      = 43,
+           SCOPE_SIZE        = 44,
            MAX_NAME_LENGTH   = 26;
 
     public final int getErrorSymbol() { return ERROR_SYMBOL; }
@@ -1709,24 +1436,21 @@
     public final int getScopeSize() { return SCOPE_SIZE; }
     public final int getMaxNameLength() { return MAX_NAME_LENGTH; }
 
-    /**
-     * @noreference These constants are not intended to be referenced by clients.
-     */
     public final static int
-           NUM_STATES        = 319,
+           NUM_STATES        = 214,
            NT_OFFSET         = 99,
-           LA_STATE_OFFSET   = 4377,
+           LA_STATE_OFFSET   = 3369,
            MAX_LA            = 2,
-           NUM_RULES         = 275,
-           NUM_NONTERMINALS  = 95,
-           NUM_SYMBOLS       = 194,
+           NUM_RULES         = 272,
+           NUM_NONTERMINALS  = 104,
+           NUM_SYMBOLS       = 203,
            SEGMENT_SIZE      = 8192,
-           START_STATE       = 3869,
-           IDENTIFIER_SYMBOL = 3,
+           START_STATE       = 2905,
+           IDENTIFIER_SYMBOL = 2,
            EOFT_SYMBOL       = 79,
            EOLT_SYMBOL       = 79,
-           ACCEPT_ACTION     = 4101,
-           ERROR_ACTION      = 4102;
+           ACCEPT_ACTION     = 3096,
+           ERROR_ACTION      = 3097;
 
     public final static boolean BACKTRACK = false;
 
Index: src/org/eclipse/ocl/parser/OCLParser.java
===================================================================
RCS file: /cvsroot/modeling/org.eclipse.mdt/org.eclipse.ocl/plugins/org.eclipse.ocl/src/org/eclipse/ocl/parser/OCLParser.java,v
retrieving revision 1.4
diff -u -r1.4 OCLParser.java
--- src/org/eclipse/ocl/parser/OCLParser.java	4 Oct 2008 00:54:10 -0000	1.4
+++ src/org/eclipse/ocl/parser/OCLParser.java	19 Nov 2008 21:05:47 -0000
@@ -16,7 +16,7 @@
 *
 * </copyright>
 *
-* $Id: OCL_v200811051638.patch,v 1.1 2008/11/19 21:26:34 ewillink Exp $
+* $Id: OCL_v200811051638.patch,v 1.1 2008/11/19 21:26:34 ewillink Exp $
 */
 
 package org.eclipse.ocl.parser;
@@ -94,7 +94,7 @@
 			dtParser = new DeterministicParser(monitor, this, prsTable, this);
 		}
 		catch (NotDeterministicParseTableException e) {
-			throw new RuntimeException("****Error: Regenerate OCLParserprs.java with -NOBACKTRACK option");
+            throw new RuntimeException("****Error: Regenerate OCLParserprs.java with -NOBACKTRACK option");
 		}
 		catch (BadParseSymFileException e) {
 			throw new RuntimeException("****Error: Bad Parser Symbol File -- OCLParsersym.java. Regenerate OCLParserprs.java");
@@ -138,9 +138,62 @@
 		
  
 			//
-			// Rule 26:  operationCS1 ::= IDENTIFIER ( parametersCSopt ) : typeCSopt
+			// Rule 46:  binaryName ::= binaryIdentifier
 			//
-			case 26: {
+			case 46:
+ 
+			//
+			// Rule 47:  keywordAsName ::= keywordAsIdentifier
+			//
+			case 47:
+ 
+			//
+			// Rule 48:  keywordAsName1 ::= keywordAsIdentifier1
+			//
+			case 48:
+ 
+			//
+			// Rule 49:  unaryName ::= unaryIdentifier
+			//
+			case 49: {
+				
+				SimpleNameCS result = createSimpleNameCS(
+							SimpleTypeEnum.IDENTIFIER_LITERAL,
+							getTokenText(dtParser.getToken(1))
+						);
+				setOffsets(result, getIToken(dtParser.getToken(1)));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 50:  iterateName ::= iterate
+			//
+			case 50:
+ 
+			//
+			// Rule 51:  iteratorName ::= iteratorIdentifier
+			//
+			case 51:
+ 
+			//
+			// Rule 52:  oclIsInStateName ::= oclIsInState
+			//
+			case 52: {
+				
+				SimpleNameCS result = createSimpleNameCS(
+							SimpleTypeEnum.KEYWORD_LITERAL,
+							getTokenText(dtParser.getToken(1))
+						);
+				setOffsets(result, getIToken(dtParser.getToken(1)));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 55:  operationCS1 ::= IDENTIFIER ( parametersCSopt ) : typeCSopt
+			//
+			case 55: {
 				
 				CSTNode result = createOperationCS(
 						getTokenText(dtParser.getToken(1)),
@@ -157,9 +210,9 @@
 			}
 	 
 			//
-			// Rule 27:  operationCS2 ::= pathNameCS :: simpleNameCS ( parametersCSopt ) : typeCSopt
+			// Rule 56:  operationCS2 ::= pathNameCS :: simpleNameCS ( parametersCSopt ) : typeCSopt
 			//
-			case 27: {
+			case 56: {
 				
 				CSTNode result = createOperationCS(
 						(PathNameCS)dtParser.getSym(1),
@@ -177,16 +230,16 @@
 			}
 	 
 			//
-			// Rule 28:  parametersCSopt ::= $Empty
+			// Rule 57:  parametersCSopt ::= $Empty
 			//
-			case 28:
+			case 57:
 				dtParser.setSym1(new BasicEList());
 				break;
  
 			//
-			// Rule 30:  parametersCS ::= variableCS
+			// Rule 59:  parametersCS ::= variableCS
 			//
-			case 30: {
+			case 59: {
 				
 				EList result = new BasicEList();
 				result.add(dtParser.getSym(1));
@@ -195,9 +248,9 @@
 			}
 	 
 			//
-			// Rule 31:  parametersCS ::= parametersCS , variableCS
+			// Rule 60:  parametersCS ::= parametersCS , variableCS
 			//
-			case 31: {
+			case 60: {
 				
 				EList result = (EList)dtParser.getSym(1);
 				result.add(dtParser.getSym(3));
@@ -206,51 +259,51 @@
 			}
 	 
 			//
-			// Rule 32:  simpleNameCSopt ::= $Empty
+			// Rule 61:  simpleNameCSopt ::= $Empty
 			//
-			case 32:
+			case 61:
 				dtParser.setSym1(null);
 				break;
  
 			//
-			// Rule 38:  impliesExpCS ::= impliesExpCS implies andOrXorExpCS
+			// Rule 67:  impliesExpCS ::= impliesExpCS implies andOrXorExpCS
 			//
-			case 38:
+			case 67:
  
 			//
-			// Rule 39:  impliesWithLet ::= impliesExpCS implies andOrXorWithLet
+			// Rule 68:  impliesWithLet ::= impliesExpCS implies andOrXorWithLet
 			//
-			case 39:
+			case 68:
  
 			//
-			// Rule 42:  andOrXorExpCS ::= andOrXorExpCS and equalityExpCS
+			// Rule 71:  andOrXorExpCS ::= andOrXorExpCS and equalityExpCS
 			//
-			case 42:
+			case 71:
  
 			//
-			// Rule 43:  andOrXorExpCS ::= andOrXorExpCS or equalityExpCS
+			// Rule 72:  andOrXorExpCS ::= andOrXorExpCS or equalityExpCS
 			//
-			case 43:
+			case 72:
  
 			//
-			// Rule 44:  andOrXorExpCS ::= andOrXorExpCS xor equalityExpCS
+			// Rule 73:  andOrXorExpCS ::= andOrXorExpCS xor equalityExpCS
 			//
-			case 44:
+			case 73:
  
 			//
-			// Rule 45:  andOrXorWithLet ::= andOrXorExpCS and equalityWithLet
+			// Rule 74:  andOrXorWithLet ::= andOrXorExpCS and equalityWithLet
 			//
-			case 45:
+			case 74:
  
 			//
-			// Rule 46:  andOrXorWithLet ::= andOrXorExpCS or equalityWithLet
+			// Rule 75:  andOrXorWithLet ::= andOrXorExpCS or equalityWithLet
 			//
-			case 46:
+			case 75:
  
 			//
-			// Rule 47:  andOrXorWithLet ::= andOrXorExpCS xor equalityWithLet
+			// Rule 76:  andOrXorWithLet ::= andOrXorExpCS xor equalityWithLet
 			//
-			case 47: {
+			case 76: {
 				
 				SimpleNameCS simpleNameCS = createSimpleNameCS(
 							SimpleTypeEnum.STRING_LITERAL,
@@ -270,14 +323,14 @@
 			}
 	 
 			//
-			// Rule 50:  equalityExpCS ::= equalityExpCS = relationalExpCS
+			// Rule 79:  equalityExpCS ::= equalityExpCS = relationalExpCS
 			//
-			case 50:
+			case 79:
  
 			//
-			// Rule 51:  equalityWithLet ::= equalityExpCS = relationalWithLet
+			// Rule 80:  equalityWithLet ::= equalityExpCS = relationalWithLet
 			//
-			case 51: {
+			case 80: {
 				
 				SimpleNameCS simpleNameCS = createSimpleNameCS(
 							SimpleTypeEnum.STRING_LITERAL,
@@ -297,14 +350,14 @@
 			}
 	 
 			//
-			// Rule 52:  equalityExpCS ::= equalityExpCS <> relationalExpCS
+			// Rule 81:  equalityExpCS ::= equalityExpCS <> relationalExpCS
 			//
-			case 52:
+			case 81:
  
 			//
-			// Rule 53:  equalityWithLet ::= equalityExpCS <> relationalWithLet
+			// Rule 82:  equalityWithLet ::= equalityExpCS <> relationalWithLet
 			//
-			case 53: {
+			case 82: {
 				
 				SimpleNameCS simpleNameCS = createSimpleNameCS(
 							SimpleTypeEnum.STRING_LITERAL,
@@ -324,14 +377,14 @@
 			}
 	 
 			//
-			// Rule 56:  relationalExpCS ::= relationalExpCS > ifExpCSPrec
+			// Rule 85:  relationalExpCS ::= relationalExpCS > ifExpCSPrec
 			//
-			case 56:
+			case 85:
  
 			//
-			// Rule 57:  relationalWithLet ::= relationalExpCS > additiveWithLet
+			// Rule 86:  relationalWithLet ::= relationalExpCS > additiveWithLet
 			//
-			case 57: {
+			case 86: {
 				
 				SimpleNameCS simpleNameCS = createSimpleNameCS(
 							SimpleTypeEnum.STRING_LITERAL,
@@ -351,14 +404,14 @@
 			}
 	 
 			//
-			// Rule 58:  relationalExpCS ::= relationalExpCS < ifExpCSPrec
+			// Rule 87:  relationalExpCS ::= relationalExpCS < ifExpCSPrec
 			//
-			case 58:
+			case 87:
  
 			//
-			// Rule 59:  relationalWithLet ::= relationalExpCS < additiveWithLet
+			// Rule 88:  relationalWithLet ::= relationalExpCS < additiveWithLet
 			//
-			case 59: {
+			case 88: {
 				
 				SimpleNameCS simpleNameCS = createSimpleNameCS(
 							SimpleTypeEnum.STRING_LITERAL,
@@ -378,14 +431,14 @@
 			}
 	 
 			//
-			// Rule 60:  relationalExpCS ::= relationalExpCS >= ifExpCSPrec
+			// Rule 89:  relationalExpCS ::= relationalExpCS >= ifExpCSPrec
 			//
-			case 60:
+			case 89:
  
 			//
-			// Rule 61:  relationalWithLet ::= relationalExpCS >= additiveWithLet
+			// Rule 90:  relationalWithLet ::= relationalExpCS >= additiveWithLet
 			//
-			case 61: {
+			case 90: {
 				
 				SimpleNameCS simpleNameCS = createSimpleNameCS(
 							SimpleTypeEnum.STRING_LITERAL,
@@ -405,14 +458,14 @@
 			}
 	 
 			//
-			// Rule 62:  relationalExpCS ::= relationalExpCS <= ifExpCSPrec
+			// Rule 91:  relationalExpCS ::= relationalExpCS <= ifExpCSPrec
 			//
-			case 62:
+			case 91:
  
 			//
-			// Rule 63:  relationalWithLet ::= relationalExpCS <= additiveWithLet
+			// Rule 92:  relationalWithLet ::= relationalExpCS <= additiveWithLet
 			//
-			case 63: {
+			case 92: {
 				
 				SimpleNameCS simpleNameCS = createSimpleNameCS(
 							SimpleTypeEnum.STRING_LITERAL,
@@ -432,14 +485,14 @@
 			}
 	 
 			//
-			// Rule 68:  additiveExpCS ::= additiveExpCS + multiplicativeExpCS
+			// Rule 97:  additiveExpCS ::= additiveExpCS + multiplicativeExpCS
 			//
-			case 68:
+			case 97:
  
 			//
-			// Rule 69:  additiveWithLet ::= additiveExpCS + multiplicativeWithLet
+			// Rule 98:  additiveWithLet ::= additiveExpCS + multiplicativeWithLet
 			//
-			case 69: {
+			case 98: {
 				
 				SimpleNameCS simpleNameCS = createSimpleNameCS(
 							SimpleTypeEnum.STRING_LITERAL,
@@ -459,14 +512,14 @@
 			}
 	 
 			//
-			// Rule 70:  additiveExpCS ::= additiveExpCS - multiplicativeExpCS
+			// Rule 99:  additiveExpCS ::= additiveExpCS - multiplicativeExpCS
 			//
-			case 70:
+			case 99:
  
 			//
-			// Rule 71:  additiveWithLet ::= additiveExpCS - multiplicativeWithLet
+			// Rule 100:  additiveWithLet ::= additiveExpCS - multiplicativeWithLet
 			//
-			case 71: {
+			case 100: {
 				
 				SimpleNameCS simpleNameCS = createSimpleNameCS(
 							SimpleTypeEnum.STRING_LITERAL,
@@ -486,14 +539,14 @@
 			}
 	 
 			//
-			// Rule 74:  multiplicativeExpCS ::= multiplicativeExpCS * unaryExpCS
+			// Rule 103:  multiplicativeExpCS ::= multiplicativeExpCS * unaryExpCS
 			//
-			case 74:
+			case 103:
  
 			//
-			// Rule 75:  multiplicativeWithLet ::= multiplicativeExpCS * unaryWithLet
+			// Rule 104:  multiplicativeWithLet ::= multiplicativeExpCS * unaryWithLet
 			//
-			case 75: {
+			case 104: {
 				
 				SimpleNameCS simpleNameCS = createSimpleNameCS(
 							SimpleTypeEnum.STRING_LITERAL,
@@ -513,14 +566,14 @@
 			}
 	 
 			//
-			// Rule 76:  multiplicativeExpCS ::= multiplicativeExpCS / unaryExpCS
+			// Rule 105:  multiplicativeExpCS ::= multiplicativeExpCS / unaryExpCS
 			//
-			case 76:
+			case 105:
  
 			//
-			// Rule 77:  multiplicativeWithLet ::= multiplicativeExpCS / unaryWithLet
+			// Rule 106:  multiplicativeWithLet ::= multiplicativeExpCS / unaryWithLet
 			//
-			case 77: {
+			case 106: {
 				
 				SimpleNameCS simpleNameCS = createSimpleNameCS(
 							SimpleTypeEnum.STRING_LITERAL,
@@ -540,9 +593,9 @@
 			}
 	 
 			//
-			// Rule 80:  unaryExpCS ::= - unaryExpCS
+			// Rule 109:  unaryExpCS ::= - unaryExpCS
 			//
-			case 80: {
+			case 109: {
 				
 				SimpleNameCS simpleNameCS = createSimpleNameCS(
 							SimpleTypeEnum.STRING_LITERAL,
@@ -560,9 +613,9 @@
 			}
 	 
 			//
-			// Rule 81:  unaryExpCS ::= not unaryExpCS
+			// Rule 110:  unaryExpCS ::= not unaryExpCS
 			//
-			case 81: {
+			case 110: {
 				
 				SimpleNameCS simpleNameCS = createSimpleNameCS(
 							SimpleTypeEnum.STRING_LITERAL,
@@ -580,9 +633,9 @@
 			}
 	 
 			//
-			// Rule 83:  dotArrowExpCS ::= dotArrowExpCS callExpCS
+			// Rule 112:  dotArrowExpCS ::= dotArrowExpCS callExpCS
 			//
-			case 83: {
+			case 112: {
 				
 				CallExpCS result = (CallExpCS)dtParser.getSym(2);
 				result.setSource((OCLExpressionCS)dtParser.getSym(1));
@@ -592,9 +645,9 @@
 			}
 	 
 			//
-			// Rule 84:  dotArrowExpCS ::= dotArrowExpCS messageExpCS
+			// Rule 113:  dotArrowExpCS ::= dotArrowExpCS messageExpCS
 			//
-			case 84: {
+			case 113: {
 				
 				MessageExpCS result = (MessageExpCS)dtParser.getSym(2);
 				result.setTarget((OCLExpressionCS)dtParser.getSym(1));
@@ -604,9 +657,9 @@
 			}
 	 
 			//
-			// Rule 85:  dotArrowExpCS ::= NUMERIC_OPERATION ( argumentsCSopt )
+			// Rule 114:  dotArrowExpCS ::= NUMERIC_OPERATION ( argumentsCSopt )
 			//
-			case 85: {
+			case 114: {
 				
 				// NUMERIC_OPERATION -> Integer '.' Identifier
 				String text = getTokenText(dtParser.getToken(1));
@@ -650,9 +703,9 @@
 			}
 	 
 			//
-			// Rule 86:  dotArrowExpCS ::= pathNameCS :: simpleNameCS ( argumentsCSopt )
+			// Rule 115:  dotArrowExpCS ::= pathNameCS :: simpleNameCS ( argumentsCSopt )
 			//
-			case 86: {
+			case 115: {
 				
 				OperationCallExpCS result = createOperationCallExpCS(
 						(PathNameCS)dtParser.getSym(1),
@@ -666,9 +719,9 @@
 			}
 	 
 			//
-			// Rule 91:  oclExpCS ::= ( oclExpressionCS )
+			// Rule 120:  oclExpCS ::= ( oclExpressionCS )
 			//
-			case 91: {
+			case 120: {
 				
 				CSTNode result = (CSTNode)dtParser.getSym(2);
 				setOffsets(result, getIToken(dtParser.getToken(1)), getIToken(dtParser.getToken(3)));
@@ -677,9 +730,14 @@
 			}
 	 
 			//
-			// Rule 92:  variableExpCS ::= simpleNameCS isMarkedPreCS
+			// Rule 121:  variableExpCS ::= simpleNameCS isMarkedPreCS
 			//
-			case 92: {
+			case 121:
+ 
+			//
+			// Rule 122:  variableExpCS ::= keywordAsName1 isMarkedPreCS
+			//
+			case 122: {
 				
 				IsMarkedPreCS isMarkedPreCS = (IsMarkedPreCS)dtParser.getSym(2);
 				CSTNode result = createVariableExpCS(
@@ -697,61 +755,16 @@
 			}
 	 
 			//
-			// Rule 93:  variableExpCS ::= keywordAsIdentifier1 isMarkedPreCS
+			// Rule 123:  variableExpCS ::= simpleNameCS [ argumentsCS ] isMarkedPreCS
 			//
-			case 93: {
-				
-				IsMarkedPreCS isMarkedPreCS = (IsMarkedPreCS)dtParser.getSym(2);
-				SimpleNameCS simpleNameCS = createSimpleNameCS(
-							SimpleTypeEnum.IDENTIFIER_LITERAL,
-							getTokenText(dtParser.getToken(1))
-						);
-				setOffsets(simpleNameCS, getIToken(dtParser.getToken(1)));
-				CSTNode result = createVariableExpCS(
-						simpleNameCS,
-						new BasicEList(),
-						isMarkedPreCS
-					);
-				if (isMarkedPreCS.isPre()) {
-					setOffsets(result, getIToken(dtParser.getToken(1)), (CSTNode)dtParser.getSym(2));
-				} else {
-					setOffsets(result, getIToken(dtParser.getToken(1)));
-				}
-				dtParser.setSym1(result);
-	  		  break;
-			}
-	 
-			//
-			// Rule 94:  variableExpCS ::= simpleNameCS [ argumentsCS ] isMarkedPreCS
-			//
-			case 94: {
-				
-				IsMarkedPreCS isMarkedPreCS = (IsMarkedPreCS)dtParser.getSym(5);
-				CSTNode result = createVariableExpCS(
-						(SimpleNameCS)dtParser.getSym(1),
-						(EList)dtParser.getSym(3),
-						isMarkedPreCS
-					);
-				if (isMarkedPreCS.isPre()) {
-					setOffsets(result, (CSTNode)dtParser.getSym(1), (CSTNode)dtParser.getSym(5));
-				} else {
-					setOffsets(result, (CSTNode)dtParser.getSym(1), getIToken(dtParser.getToken(4)));
-				}
-				dtParser.setSym1(result);
-	  		  break;
-			}
-	 
+			case 123:
+ 
 			//
-			// Rule 95:  variableExpCS ::= keywordAsIdentifier1 [ argumentsCS ] isMarkedPreCS
+			// Rule 124:  variableExpCS ::= keywordAsName1 [ argumentsCS ] isMarkedPreCS
 			//
-			case 95: {
+			case 124: {
 				
 				IsMarkedPreCS isMarkedPreCS = (IsMarkedPreCS)dtParser.getSym(5);
-				SimpleNameCS simpleNameCS = createSimpleNameCS(
-							SimpleTypeEnum.IDENTIFIER_LITERAL,
-							getTokenText(dtParser.getToken(1))
-						);
-				setOffsets(simpleNameCS, getIToken(dtParser.getToken(1)));
 				CSTNode result = createVariableExpCS(
 						(SimpleNameCS)dtParser.getSym(1),
 						(EList)dtParser.getSym(3),
@@ -767,9 +780,9 @@
 			}
 	 
 			//
-			// Rule 97:  simpleNameCS ::= self
+			// Rule 126:  simpleNameCS ::= self
 			//
-			case 97: {
+			case 126: {
 				
 				CSTNode result = createSimpleNameCS(
 						SimpleTypeEnum.SELF_LITERAL,
@@ -781,9 +794,9 @@
 			}
 	 
 			//
-			// Rule 98:  simpleNameCS ::= IDENTIFIER
+			// Rule 127:  simpleNameCS ::= IDENTIFIER
 			//
-			case 98: {
+			case 127: {
 				
 				CSTNode result = createSimpleNameCS(
 						SimpleTypeEnum.IDENTIFIER_LITERAL,
@@ -795,9 +808,9 @@
 			}
 	 
 			//
-			// Rule 99:  primitiveTypeCS ::= Integer
+			// Rule 128:  primitiveTypeCS ::= Integer
 			//
-			case 99: {
+			case 128: {
 				
 				CSTNode result = createPrimitiveTypeCS(
 						SimpleTypeEnum.INTEGER_LITERAL,
@@ -809,9 +822,9 @@
 			}
 	 
 			//
-			// Rule 100:  primitiveTypeCS ::= UnlimitedNatural
+			// Rule 129:  primitiveTypeCS ::= UnlimitedNatural
 			//
-			case 100: {
+			case 129: {
 				
 				CSTNode result = createPrimitiveTypeCS(
 						SimpleTypeEnum.UNLIMITED_NATURAL_LITERAL,
@@ -823,9 +836,9 @@
 			}
 	 
 			//
-			// Rule 101:  primitiveTypeCS ::= String
+			// Rule 130:  primitiveTypeCS ::= String
 			//
-			case 101: {
+			case 130: {
 				
 				CSTNode result = createPrimitiveTypeCS(
 						SimpleTypeEnum.STRING_LITERAL,
@@ -837,9 +850,9 @@
 			}
 	 
 			//
-			// Rule 102:  primitiveTypeCS ::= Real
+			// Rule 131:  primitiveTypeCS ::= Real
 			//
-			case 102: {
+			case 131: {
 				
 				CSTNode result = createPrimitiveTypeCS(
 						SimpleTypeEnum.REAL_LITERAL,
@@ -851,9 +864,9 @@
 			}
 	 
 			//
-			// Rule 103:  primitiveTypeCS ::= Boolean
+			// Rule 132:  primitiveTypeCS ::= Boolean
 			//
-			case 103: {
+			case 132: {
 				
 				CSTNode result = createPrimitiveTypeCS(
 						SimpleTypeEnum.BOOLEAN_LITERAL,
@@ -865,9 +878,9 @@
 			}
 	 
 			//
-			// Rule 104:  primitiveTypeCS ::= OclAny
+			// Rule 133:  primitiveTypeCS ::= OclAny
 			//
-			case 104: {
+			case 133: {
 				
 				CSTNode result = createPrimitiveTypeCS(
 						SimpleTypeEnum.OCL_ANY_LITERAL,
@@ -879,9 +892,9 @@
 			}
 	 
 			//
-			// Rule 105:  primitiveTypeCS ::= OclVoid
+			// Rule 134:  primitiveTypeCS ::= OclVoid
 			//
-			case 105: {
+			case 134: {
 				
 				CSTNode result = createPrimitiveTypeCS(
 						SimpleTypeEnum.OCL_VOID_LITERAL,
@@ -893,9 +906,9 @@
 			}
 	 
 			//
-			// Rule 106:  primitiveTypeCS ::= Invalid
+			// Rule 135:  primitiveTypeCS ::= Invalid
 			//
-			case 106: {
+			case 135: {
 				
 				CSTNode result = createPrimitiveTypeCS(
 						SimpleTypeEnum.INVALID_LITERAL,
@@ -907,9 +920,9 @@
 			}
 	 
 			//
-			// Rule 107:  primitiveTypeCS ::= OclMessage
+			// Rule 136:  primitiveTypeCS ::= OclMessage
 			//
-			case 107: {
+			case 136: {
 				
 				CSTNode result = createPrimitiveTypeCS(
 						SimpleTypeEnum.OCL_MESSAGE_LITERAL,
@@ -921,9 +934,9 @@
 			}
 	 
 			//
-			// Rule 108:  pathNameCS ::= IDENTIFIER
+			// Rule 137:  pathNameCS ::= IDENTIFIER
 			//
-			case 108: {
+			case 137: {
 				
 				CSTNode result = createPathNameCS(getTokenText(dtParser.getToken(1)));
 				setOffsets(result, getIToken(dtParser.getToken(1)));
@@ -932,9 +945,9 @@
 			}
 	 
 			//
-			// Rule 109:  pathNameCS ::= pathNameCS :: simpleNameCS
+			// Rule 138:  pathNameCS ::= pathNameCS :: simpleNameCS
 			//
-			case 109: {
+			case 138: {
 				
 				PathNameCS result = (PathNameCS)dtParser.getSym(1);
 				result = extendPathNameCS(result, getTokenText(dtParser.getToken(3)));
@@ -944,9 +957,9 @@
 			}
 	 
 			//
-			// Rule 110:  pathNameCSOpt ::= $Empty
+			// Rule 139:  pathNameCSOpt ::= $Empty
 			//
-			case 110: {
+			case 139: {
 				
 				CSTNode result = createPathNameCS();
 				dtParser.setSym1(result);
@@ -954,23 +967,14 @@
 			}
 	 
 			//
-			// Rule 118:  enumLiteralExpCS ::= pathNameCS :: keywordAsIdentifier
+			// Rule 147:  enumLiteralExpCS ::= pathNameCS :: keywordAsName
 			//
-			case 118: {
-				
-				CSTNode result = createEnumLiteralExpCS(
-						(PathNameCS)dtParser.getSym(1),
-						getTokenText(dtParser.getToken(3))
-					);
-				setOffsets(result, (CSTNode)dtParser.getSym(1), getIToken(dtParser.getToken(3)));
-				dtParser.setSym1(result);
-	  		  break;
-			}
-	 
+			case 147:
+ 
 			//
-			// Rule 119:  enumLiteralExpCS ::= pathNameCS :: simpleNameCS
+			// Rule 148:  enumLiteralExpCS ::= pathNameCS :: simpleNameCS
 			//
-			case 119: {
+			case 148: {
 				
 				CSTNode result = createEnumLiteralExpCS(
 						(PathNameCS)dtParser.getSym(1),
@@ -982,9 +986,9 @@
 			}
 	 
 			//
-			// Rule 120:  collectionLiteralExpCS ::= collectionTypeIdentifierCS { collectionLiteralPartsCSopt }
+			// Rule 149:  collectionLiteralExpCS ::= collectionTypeIdentifierCS { collectionLiteralPartsCSopt }
 			//
-			case 120: {
+			case 149: {
 				
 				Object[] objs = (Object[])dtParser.getSym(1);
 				CSTNode result = createCollectionLiteralExpCS(
@@ -997,61 +1001,61 @@
 			}
 	 
 			//
-			// Rule 121:  collectionTypeIdentifierCS ::= Set
+			// Rule 150:  collectionTypeIdentifierCS ::= Set
 			//
-			case 121: {
+			case 150: {
 				
 				dtParser.setSym1(new Object[]{getIToken(dtParser.getToken(1)), CollectionTypeIdentifierEnum.SET_LITERAL});
 	  		  break;
 			}
 	 
 			//
-			// Rule 122:  collectionTypeIdentifierCS ::= Bag
+			// Rule 151:  collectionTypeIdentifierCS ::= Bag
 			//
-			case 122: {
+			case 151: {
 				
 				dtParser.setSym1(new Object[]{getIToken(dtParser.getToken(1)), CollectionTypeIdentifierEnum.BAG_LITERAL});
 	  		  break;
 			}
 	 
 			//
-			// Rule 123:  collectionTypeIdentifierCS ::= Sequence
+			// Rule 152:  collectionTypeIdentifierCS ::= Sequence
 			//
-			case 123: {
+			case 152: {
 				
 				dtParser.setSym1(new Object[]{getIToken(dtParser.getToken(1)), CollectionTypeIdentifierEnum.SEQUENCE_LITERAL});
 	  		  break;
 			}
 	 
 			//
-			// Rule 124:  collectionTypeIdentifierCS ::= Collection
+			// Rule 153:  collectionTypeIdentifierCS ::= Collection
 			//
-			case 124: {
+			case 153: {
 				
 				dtParser.setSym1(new Object[]{getIToken(dtParser.getToken(1)), CollectionTypeIdentifierEnum.COLLECTION_LITERAL});
 	  		  break;
 			}
 	 
 			//
-			// Rule 125:  collectionTypeIdentifierCS ::= OrderedSet
+			// Rule 154:  collectionTypeIdentifierCS ::= OrderedSet
 			//
-			case 125: {
+			case 154: {
 				
 				dtParser.setSym1(new Object[]{getIToken(dtParser.getToken(1)), CollectionTypeIdentifierEnum.ORDERED_SET_LITERAL});
 	  		  break;
 			}
 	 
 			//
-			// Rule 126:  collectionLiteralPartsCSopt ::= $Empty
+			// Rule 155:  collectionLiteralPartsCSopt ::= $Empty
 			//
-			case 126:
+			case 155:
 				dtParser.setSym1(new BasicEList());
 				break;
  
 			//
-			// Rule 128:  collectionLiteralPartsCS ::= collectionLiteralPartCS
+			// Rule 157:  collectionLiteralPartsCS ::= collectionLiteralPartCS
 			//
-			case 128: {
+			case 157: {
 				
 				EList result = new BasicEList();
 				result.add(dtParser.getSym(1));
@@ -1060,9 +1064,9 @@
 			}
 	 
 			//
-			// Rule 129:  collectionLiteralPartsCS ::= collectionLiteralPartsCS , collectionLiteralPartCS
+			// Rule 158:  collectionLiteralPartsCS ::= collectionLiteralPartsCS , collectionLiteralPartCS
 			//
-			case 129: {
+			case 158: {
 				
 				EList result = (EList)dtParser.getSym(1);
 				result.add(dtParser.getSym(3));
@@ -1071,9 +1075,9 @@
 			}
 	 
 			//
-			// Rule 131:  collectionLiteralPartCS ::= oclExpressionCS
+			// Rule 160:  collectionLiteralPartCS ::= oclExpressionCS
 			//
-			case 131: {
+			case 160: {
 				
 				CSTNode result = createCollectionLiteralPartCS(
 						(OCLExpressionCS)dtParser.getSym(1)
@@ -1084,9 +1088,9 @@
 			}
 	 
 			//
-			// Rule 132:  collectionRangeCS ::= - INTEGER_RANGE_START oclExpressionCS
+			// Rule 161:  collectionRangeCS ::= - INTEGER_RANGE_START oclExpressionCS
 			//
-			case 132: {
+			case 161: {
 				
 				OCLExpressionCS rangeStart = createRangeStart(
 						getTokenText(dtParser.getToken(2)), true);
@@ -1100,9 +1104,9 @@
 			}
 	 
 			//
-			// Rule 133:  collectionRangeCS ::= INTEGER_RANGE_START oclExpressionCS
+			// Rule 162:  collectionRangeCS ::= INTEGER_RANGE_START oclExpressionCS
 			//
-			case 133: {
+			case 162: {
 				
 				OCLExpressionCS rangeStart = createRangeStart(
 						getTokenText(dtParser.getToken(1)), false);
@@ -1116,9 +1120,9 @@
 			}
 	 
 			//
-			// Rule 134:  collectionRangeCS ::= oclExpressionCS .. oclExpressionCS
+			// Rule 163:  collectionRangeCS ::= oclExpressionCS .. oclExpressionCS
 			//
-			case 134: {
+			case 163: {
 				
 				CSTNode result = createCollectionRangeCS(
 						(OCLExpressionCS)dtParser.getSym(1),
@@ -1130,9 +1134,9 @@
 			}
 	 
 			//
-			// Rule 140:  tupleLiteralExpCS ::= Tuple { variableListCS2 }
+			// Rule 169:  tupleLiteralExpCS ::= Tuple { variableListCS2 }
 			//
-			case 140: {
+			case 169: {
 				
 				CSTNode result = createTupleLiteralExpCS((EList)dtParser.getSym(3));
 				setOffsets(result, getIToken(dtParser.getToken(1)), getIToken(dtParser.getToken(4)));
@@ -1141,9 +1145,9 @@
 			}
 	 
 			//
-			// Rule 141:  integerLiteralExpCS ::= INTEGER_LITERAL
+			// Rule 170:  integerLiteralExpCS ::= INTEGER_LITERAL
 			//
-			case 141: {
+			case 170: {
 				
 				CSTNode result = createIntegerLiteralExpCS(getTokenText(dtParser.getToken(1)));
 				setOffsets(result, getIToken(dtParser.getToken(1)));
@@ -1152,9 +1156,9 @@
 			}
 	 
 			//
-			// Rule 142:  unlimitedNaturalLiteralExpCS ::= *
+			// Rule 171:  unlimitedNaturalLiteralExpCS ::= *
 			//
-			case 142: {
+			case 171: {
 				
 				CSTNode result = createUnlimitedNaturalLiteralExpCS(getTokenText(dtParser.getToken(1)));
 				setOffsets(result, getIToken(dtParser.getToken(1)));
@@ -1163,9 +1167,9 @@
 			}
 	 
 			//
-			// Rule 143:  realLiteralExpCS ::= REAL_LITERAL
+			// Rule 172:  realLiteralExpCS ::= REAL_LITERAL
 			//
-			case 143: {
+			case 172: {
 				
 				CSTNode result = createRealLiteralExpCS(getTokenText(dtParser.getToken(1)));
 				setOffsets(result, getIToken(dtParser.getToken(1)));
@@ -1174,9 +1178,9 @@
 			}
 	 
 			//
-			// Rule 144:  stringLiteralExpCS ::= STRING_LITERAL
+			// Rule 173:  stringLiteralExpCS ::= STRING_LITERAL
 			//
-			case 144: {
+			case 173: {
 				
 				CSTNode result = createStringLiteralExpCS(getTokenText(dtParser.getToken(1)));
 				setOffsets(result, getIToken(dtParser.getToken(1)));
@@ -1185,9 +1189,9 @@
 			}
 	 
 			//
-			// Rule 145:  booleanLiteralExpCS ::= true
+			// Rule 174:  booleanLiteralExpCS ::= true
 			//
-			case 145: {
+			case 174: {
 				
 				CSTNode result = createBooleanLiteralExpCS(getTokenText(dtParser.getToken(1)));
 				setOffsets(result, getIToken(dtParser.getToken(1)));
@@ -1196,9 +1200,9 @@
 			}
 	 
 			//
-			// Rule 146:  booleanLiteralExpCS ::= false
+			// Rule 175:  booleanLiteralExpCS ::= false
 			//
-			case 146: {
+			case 175: {
 				
 				CSTNode result = createBooleanLiteralExpCS(getTokenText(dtParser.getToken(1)));
 				setOffsets(result, getIToken(dtParser.getToken(1)));
@@ -1207,9 +1211,9 @@
 			}
 	 
 			//
-			// Rule 147:  nullLiteralExpCS ::= null
+			// Rule 176:  nullLiteralExpCS ::= null
 			//
-			case 147: {
+			case 176: {
 				
 				CSTNode result = createNullLiteralExpCS(getTokenText(dtParser.getToken(1)));
 				setOffsets(result, getIToken(dtParser.getToken(1)));
@@ -1218,9 +1222,9 @@
 			}
 	 
 			//
-			// Rule 148:  invalidLiteralExpCS ::= OclInvalid
+			// Rule 177:  invalidLiteralExpCS ::= OclInvalid
 			//
-			case 148: {
+			case 177: {
 				
 				CSTNode result = createInvalidLiteralExpCS(getTokenText(dtParser.getToken(1)));
 				setOffsets(result, getIToken(dtParser.getToken(1)));
@@ -1229,14 +1233,14 @@
 			}
 	 
 			//
-			// Rule 149:  callExpCS ::= -> featureCallExpCS
+			// Rule 178:  callExpCS ::= -> featureCallExpCS
 			//
-			case 149:
+			case 178:
  
 			//
-			// Rule 150:  callExpCS ::= -> loopExpCS
+			// Rule 179:  callExpCS ::= -> loopExpCS
 			//
-			case 150: {
+			case 179: {
 				
 				CallExpCS result = (CallExpCS)dtParser.getSym(2);
 				result.setAccessor(DotOrArrowEnum.ARROW_LITERAL);
@@ -1245,14 +1249,14 @@
 			}
 	 
 			//
-			// Rule 151:  callExpCS ::= . keywordOperationCallExpCS
+			// Rule 180:  callExpCS ::= . keywordOperationCallExpCS
 			//
-			case 151:
+			case 180:
  
 			//
-			// Rule 152:  callExpCS ::= . featureCallExpCS
+			// Rule 181:  callExpCS ::= . featureCallExpCS
 			//
-			case 152: {
+			case 181: {
 				
 				CallExpCS result = (CallExpCS)dtParser.getSym(2);
 				result.setAccessor(DotOrArrowEnum.DOT_LITERAL);
@@ -1261,162 +1265,94 @@
 			}
 	 
 			//
-			// Rule 155:  iteratorExpCS ::= forAll ( iterContents )
-			//
-			case 155:
- 
-			//
-			// Rule 156:  iteratorExpCS ::= exists ( iterContents )
-			//
-			case 156:
- 
-			//
-			// Rule 157:  iteratorExpCS ::= isUnique ( iterContents )
-			//
-			case 157:
- 
-			//
-			// Rule 158:  iteratorExpCS ::= one ( iterContents )
-			//
-			case 158:
- 
-			//
-			// Rule 159:  iteratorExpCS ::= any ( iterContents )
+			// Rule 184:  iteratorExpCS ::= iteratorName ( oclExpressionCS )
 			//
-			case 159:
- 
-			//
-			// Rule 160:  iteratorExpCS ::= collect ( iterContents )
-			//
-			case 160:
- 
-			//
-			// Rule 161:  iteratorExpCS ::= select ( iterContents )
-			//
-			case 161:
- 
-			//
-			// Rule 162:  iteratorExpCS ::= reject ( iterContents )
-			//
-			case 162:
- 
-			//
-			// Rule 163:  iteratorExpCS ::= collectNested ( iterContents )
-			//
-			case 163:
- 
-			//
-			// Rule 164:  iteratorExpCS ::= sortedBy ( iterContents )
-			//
-			case 164:
- 
-			//
-			// Rule 165:  iteratorExpCS ::= closure ( iterContents )
-			//
-			case 165: {
+			case 184: {
 				
-				SimpleNameCS simpleNameCS = createSimpleNameCS(
-							SimpleTypeEnum.KEYWORD_LITERAL,
-							getTokenText(dtParser.getToken(1))
-						);
-				setOffsets(simpleNameCS, getIToken(dtParser.getToken(1)));
-				Object[] iterContents = (Object[])dtParser.getSym(3);
+				SimpleNameCS simpleNameCS = (SimpleNameCS)dtParser.getSym(1);
 				CSTNode result = createIteratorExpCS(
 						simpleNameCS,
-						(VariableCS)iterContents[0],
-						(VariableCS)iterContents[1],
-						(OCLExpressionCS)iterContents[2]
-					);
-				setOffsets(result, getIToken(dtParser.getToken(1)), getIToken(dtParser.getToken(4)));
-				dtParser.setSym1(result);
-	  		  break;
-			}
-	 
-			//
-			// Rule 166:  iterContents ::= oclExpressionCS
-			//
-			case 166: {
-				
-				dtParser.setSym1(new Object[] {
 						null,
 						null,
-						dtParser.getSym(1)
-					});
+						(OCLExpressionCS)dtParser.getSym(3)
+					);
+				setOffsets(result, simpleNameCS, getIToken(dtParser.getToken(4)));
+				dtParser.setSym1(result);
 	  		  break;
 			}
 	 
 			//
-			// Rule 167:  iterContents ::= variableCS | oclExpressionCS
+			// Rule 185:  iteratorExpCS ::= iteratorName ( variableCS | oclExpressionCS )
 			//
-			case 167: {
+			case 185: {
 				
-				dtParser.setSym1(new Object[] {
-						dtParser.getSym(1),
+				SimpleNameCS simpleNameCS = (SimpleNameCS)dtParser.getSym(1);
+				CSTNode result = createIteratorExpCS(
+						simpleNameCS,
+						(VariableCS)dtParser.getSym(3),
 						null,
-						dtParser.getSym(3)
-					});
+						(OCLExpressionCS)dtParser.getSym(5)
+					);
+				setOffsets(result, simpleNameCS, getIToken(dtParser.getToken(6)));
+				dtParser.setSym1(result);
 	  		  break;
 			}
 	 
 			//
-			// Rule 168:  iterContents ::= variableCS , variableCS | oclExpressionCS
+			// Rule 186:  iteratorExpCS ::= iteratorName ( variableCS , variableCS | oclExpressionCS )
 			//
-			case 168: {
+			case 186: {
 				
-				dtParser.setSym1(new Object[] {
-						dtParser.getSym(1),
-						dtParser.getSym(3),
-						dtParser.getSym(5)
-					});
+				SimpleNameCS simpleNameCS = (SimpleNameCS)dtParser.getSym(1);
+				CSTNode result = createIteratorExpCS(
+						simpleNameCS,
+						(VariableCS)dtParser.getSym(3),
+						(VariableCS)dtParser.getSym(5),
+						(OCLExpressionCS)dtParser.getSym(7)
+					);
+				setOffsets(result, simpleNameCS, getIToken(dtParser.getToken(8)));
+				dtParser.setSym1(result);
 	  		  break;
 			}
 	 
 			//
-			// Rule 169:  iterateExpCS ::= iterate ( variableCS | oclExpressionCS )
+			// Rule 187:  iterateExpCS ::= iterateName ( variableCS | oclExpressionCS )
 			//
-			case 169: {
+			case 187: {
 				
-				SimpleNameCS simpleNameCS = createSimpleNameCS(
-							SimpleTypeEnum.KEYWORD_LITERAL,
-							getTokenText(dtParser.getToken(1))
-						);
-				setOffsets(simpleNameCS, getIToken(dtParser.getToken(1)));
+				SimpleNameCS simpleNameCS = (SimpleNameCS)dtParser.getSym(1);
 				CSTNode result = createIterateExpCS(
 						simpleNameCS,
 						(VariableCS)dtParser.getSym(3),
 						null,
 						(OCLExpressionCS)dtParser.getSym(5)
 					);
-				setOffsets(result, getIToken(dtParser.getToken(1)), getIToken(dtParser.getToken(6)));
+				setOffsets(result, simpleNameCS, getIToken(dtParser.getToken(6)));
 				dtParser.setSym1(result);
 	  		  break;
 			}
 	 
 			//
-			// Rule 170:  iterateExpCS ::= iterate ( variableCS ; variableCS | oclExpressionCS )
+			// Rule 188:  iterateExpCS ::= iterateName ( variableCS ; variableCS | oclExpressionCS )
 			//
-			case 170: {
+			case 188: {
 				
-				SimpleNameCS simpleNameCS = createSimpleNameCS(
-							SimpleTypeEnum.KEYWORD_LITERAL,
-							getTokenText(dtParser.getToken(1))
-						);
-				setOffsets(simpleNameCS, getIToken(dtParser.getToken(1)));
+				SimpleNameCS simpleNameCS = (SimpleNameCS)dtParser.getSym(1);
 				CSTNode result = createIterateExpCS(
 						simpleNameCS,
 						(VariableCS)dtParser.getSym(3),
 						(VariableCS)dtParser.getSym(5),
 						(OCLExpressionCS)dtParser.getSym(7)
 					);
-				setOffsets(result, getIToken(dtParser.getToken(1)), getIToken(dtParser.getToken(8)));
+				setOffsets(result, simpleNameCS, getIToken(dtParser.getToken(8)));
 				dtParser.setSym1(result);
 	  		  break;
 			}
 	 
 			//
-			// Rule 171:  variableCS ::= IDENTIFIER
+			// Rule 189:  variableCS ::= IDENTIFIER
 			//
-			case 171: {
+			case 189: {
 				
 				CSTNode result = createVariableCS(
 						getTokenText(dtParser.getToken(1)),
@@ -1429,9 +1365,9 @@
 			}
 	 
 			//
-			// Rule 172:  variableCS ::= IDENTIFIER : typeCS
+			// Rule 190:  typedVariableCS ::= IDENTIFIER : typeCS
 			//
-			case 172: {
+			case 190: {
 				
 				CSTNode result = createVariableCS(
 						getTokenText(dtParser.getToken(1)),
@@ -1444,9 +1380,9 @@
 			}
 	 
 			//
-			// Rule 173:  variableCS ::= IDENTIFIER : typeCS = oclExpressionCS
+			// Rule 192:  variableCS ::= IDENTIFIER : typeCS = oclExpressionCS
 			//
-			case 173: {
+			case 192: {
 				
 				CSTNode result = createVariableCS(
 						getTokenText(dtParser.getToken(1)),
@@ -1459,9 +1395,9 @@
 			}
 	 
 			//
-			// Rule 174:  variableCS2 ::= IDENTIFIER = oclExpressionCS
+			// Rule 193:  variableCS2 ::= IDENTIFIER = oclExpressionCS
 			//
-			case 174: {
+			case 193: {
 				
 				CSTNode result = createVariableCS(
 						getTokenText(dtParser.getToken(1)),
@@ -1474,16 +1410,16 @@
 			}
 	 
 			//
-			// Rule 175:  typeCSopt ::= $Empty
+			// Rule 194:  typeCSopt ::= $Empty
 			//
-			case 175:
+			case 194:
 				dtParser.setSym1(null);
 				break;
  
 			//
-			// Rule 181:  collectionTypeCS ::= collectionTypeIdentifierCS ( typeCS )
+			// Rule 200:  collectionTypeCS ::= collectionTypeIdentifierCS ( typeCS )
 			//
-			case 181: {
+			case 200: {
 				
 				Object[] objs = (Object[])dtParser.getSym(1);
 				CSTNode result = createCollectionTypeCS(
@@ -1496,9 +1432,9 @@
 			}
 	 
 			//
-			// Rule 182:  tupleTypeCS ::= Tuple ( variableListCSopt )
+			// Rule 201:  tupleTypeCS ::= Tuple ( variableListCSopt )
 			//
-			case 182: {
+			case 201: {
 				
 				CSTNode result = createTupleTypeCS((EList)dtParser.getSym(3));
 				setOffsets(result, getIToken(dtParser.getToken(1)), getIToken(dtParser.getToken(4)));
@@ -1507,16 +1443,16 @@
 			}
 	 
 			//
-			// Rule 183:  variableListCSopt ::= $Empty
+			// Rule 202:  variableListCSopt ::= $Empty
 			//
-			case 183:
+			case 202:
 				dtParser.setSym1(new BasicEList());
 				break;
  
 			//
-			// Rule 185:  variableListCS ::= variableCS
+			// Rule 204:  variableListCS ::= variableCS
 			//
-			case 185: {
+			case 204: {
 				
 				EList result = new BasicEList();
 				result.add(dtParser.getSym(1));
@@ -1525,9 +1461,9 @@
 			}
 	 
 			//
-			// Rule 186:  variableListCS ::= variableListCS , variableCS
+			// Rule 205:  variableListCS ::= variableListCS , variableCS
 			//
-			case 186: {
+			case 205: {
 				
 				EList result = (EList)dtParser.getSym(1);
 				result.add(dtParser.getSym(3));
@@ -1536,14 +1472,14 @@
 			}
 	 
 			//
-			// Rule 187:  variableListCS2 ::= variableCS2
+			// Rule 206:  variableListCS2 ::= variableCS2
 			//
-			case 187:
+			case 206:
  
 			//
-			// Rule 188:  variableListCS2 ::= variableCS
+			// Rule 207:  variableListCS2 ::= variableCS
 			//
-			case 188: {
+			case 207: {
 				
 				EList result = new BasicEList();
 				result.add(dtParser.getSym(1));
@@ -1552,14 +1488,14 @@
 			}
 	 
 			//
-			// Rule 189:  variableListCS2 ::= variableListCS2 , variableCS2
+			// Rule 208:  variableListCS2 ::= variableListCS2 , variableCS2
 			//
-			case 189:
+			case 208:
  
 			//
-			// Rule 190:  variableListCS2 ::= variableListCS2 , variableCS
+			// Rule 209:  variableListCS2 ::= variableListCS2 , variableCS
 			//
-			case 190: {
+			case 209: {
 				
 				EList result = (EList)dtParser.getSym(1);
 				result.add(dtParser.getSym(3));
@@ -1568,147 +1504,22 @@
 			}
 	 
 			//
-			// Rule 193:  featureCallExpCS ::= MINUS isMarkedPreCS ( argumentsCSopt )
-			//
-			case 193:
- 
-			//
-			// Rule 194:  featureCallExpCS ::= not isMarkedPreCS ( argumentsCSopt )
-			//
-			case 194: {
-				
-				SimpleNameCS simpleNameCS = createSimpleNameCS(
-							SimpleTypeEnum.IDENTIFIER_LITERAL,
-							getTokenText(dtParser.getToken(1))
-						);
-				setOffsets(simpleNameCS, getIToken(dtParser.getToken(1)));
-				CSTNode result = createOperationCallExpCS(
-						simpleNameCS,
-						(IsMarkedPreCS)dtParser.getSym(2),
-						(EList)dtParser.getSym(4)
-					);
-				setOffsets(result, getIToken(dtParser.getToken(1)), getIToken(dtParser.getToken(5)));
-				dtParser.setSym1(result);
-	  		  break;
-			}
-	 
-			//
-			// Rule 195:  operationCallExpCS ::= simpleNameCS isMarkedPreCS ( argumentsCSopt )
-			//
-			case 195: {
-				
-				CSTNode result = createOperationCallExpCS(
-						(SimpleNameCS)dtParser.getSym(1),
-						(IsMarkedPreCS)dtParser.getSym(2),
-						(EList)dtParser.getSym(4)
-					);
-				setOffsets(result, (CSTNode)dtParser.getSym(1), getIToken(dtParser.getToken(5)));
-				dtParser.setSym1(result);
-	  		  break;
-			}
-	 
-			//
-			// Rule 196:  operationCallExpCS ::= oclIsUndefined isMarkedPreCS ( argumentsCSopt )
-			//
-			case 196:
- 
-			//
-			// Rule 197:  operationCallExpCS ::= oclIsInvalid isMarkedPreCS ( argumentsCSopt )
-			//
-			case 197:
- 
-			//
-			// Rule 198:  operationCallExpCS ::= oclIsNew isMarkedPreCS ( argumentsCSopt )
-			//
-			case 198:
- 
-			//
-			// Rule 199:  operationCallExpCS ::= oclAsType isMarkedPreCS ( argumentsCSopt )
-			//
-			case 199:
- 
-			//
-			// Rule 200:  operationCallExpCS ::= oclIsKindOf isMarkedPreCS ( argumentsCSopt )
-			//
-			case 200:
- 
-			//
-			// Rule 201:  operationCallExpCS ::= oclIsTypeOf isMarkedPreCS ( argumentsCSopt )
-			//
-			case 201:
- 
-			//
-			// Rule 202:  operationCallExpCS ::= EQUAL isMarkedPreCS ( argumentsCSopt )
-			//
-			case 202:
- 
-			//
-			// Rule 203:  operationCallExpCS ::= NOT_EQUAL isMarkedPreCS ( argumentsCSopt )
-			//
-			case 203:
- 
-			//
-			// Rule 204:  operationCallExpCS ::= PLUS isMarkedPreCS ( argumentsCSopt )
-			//
-			case 204:
- 
-			//
-			// Rule 205:  operationCallExpCS ::= MULTIPLY isMarkedPreCS ( argumentsCSopt )
-			//
-			case 205:
- 
-			//
-			// Rule 206:  operationCallExpCS ::= DIVIDE isMarkedPreCS ( argumentsCSopt )
-			//
-			case 206:
- 
-			//
-			// Rule 207:  operationCallExpCS ::= GREATER isMarkedPreCS ( argumentsCSopt )
-			//
-			case 207:
- 
-			//
-			// Rule 208:  operationCallExpCS ::= LESS isMarkedPreCS ( argumentsCSopt )
-			//
-			case 208:
- 
-			//
-			// Rule 209:  operationCallExpCS ::= GREATER_EQUAL isMarkedPreCS ( argumentsCSopt )
-			//
-			case 209:
- 
-			//
-			// Rule 210:  operationCallExpCS ::= LESS_EQUAL isMarkedPreCS ( argumentsCSopt )
-			//
-			case 210:
- 
-			//
-			// Rule 211:  operationCallExpCS ::= and isMarkedPreCS ( argumentsCSopt )
-			//
-			case 211:
- 
-			//
-			// Rule 212:  operationCallExpCS ::= or isMarkedPreCS ( argumentsCSopt )
+			// Rule 212:  featureCallExpCS ::= unaryName isMarkedPreCS ( argumentsCSopt )
 			//
 			case 212:
  
 			//
-			// Rule 213:  operationCallExpCS ::= xor isMarkedPreCS ( argumentsCSopt )
+			// Rule 213:  operationCallExpCS ::= binaryName isMarkedPreCS ( argumentsCSopt )
 			//
 			case 213:
  
 			//
-			// Rule 214:  keywordOperationCallExpCS ::= keywordAsIdentifier isMarkedPreCS ( argumentsCSopt )
+			// Rule 214:  keywordOperationCallExpCS ::= keywordAsName isMarkedPreCS ( argumentsCSopt )
 			//
 			case 214: {
 				
-				SimpleNameCS simpleNameCS = createSimpleNameCS(
-							SimpleTypeEnum.IDENTIFIER_LITERAL,
-							getTokenText(dtParser.getToken(1))
-						);
-				setOffsets(simpleNameCS, getIToken(dtParser.getToken(1)));
 				CSTNode result = createOperationCallExpCS(
-						simpleNameCS,
+						(SimpleNameCS)dtParser.getSym(1),
 						(IsMarkedPreCS)dtParser.getSym(2),
 						(EList)dtParser.getSym(4)
 					);
@@ -1718,79 +1529,62 @@
 			}
 	 
 			//
-			// Rule 215:  operationCallExpCS ::= oclIsInState isMarkedPreCS ( pathNameCSOpt )
+			// Rule 215:  stateExpCS ::= pathNameCSOpt
 			//
 			case 215: {
 				
-				SimpleNameCS simpleNameCS = createSimpleNameCS(
-							SimpleTypeEnum.KEYWORD_LITERAL,
-							getTokenText(dtParser.getToken(1))
-						);
-				setOffsets(simpleNameCS, getIToken(dtParser.getToken(1)));
-
-				PathNameCS pathNameCS = (PathNameCS) dtParser.getSym(4);
-				StateExpCS stateExpCS = createStateExpCS(pathNameCS);
-				setOffsets(stateExpCS, pathNameCS);
-			
-				CSTNode result = createOperationCallExpCS(
-						simpleNameCS,
-						(IsMarkedPreCS)dtParser.getSym(2),
-						stateExpCS
-					);
-				setOffsets(result, getIToken(dtParser.getToken(1)), getIToken(dtParser.getToken(5)));
+				PathNameCS pathNameCS = (PathNameCS)dtParser.getSym(1);
+				StateExpCS result = createStateExpCS(pathNameCS);
+				setOffsets(result, pathNameCS);
 				dtParser.setSym1(result);
 	  		  break;
 			}
 	 
 			//
-			// Rule 216:  attrOrNavCallExpCS ::= simpleNameCS isMarkedPreCS
+			// Rule 216:  operationCallExpCS ::= oclIsInStateName isMarkedPreCS ( stateExpCS )
 			//
 			case 216: {
 				
-				IsMarkedPreCS isMarkedPreCS = (IsMarkedPreCS)dtParser.getSym(2);
-				CSTNode result = createFeatureCallExpCS(
-						(SimpleNameCS)dtParser.getSym(1),
-						new BasicEList(),
-						isMarkedPreCS
+				SimpleNameCS simpleNameCS = (SimpleNameCS)dtParser.getSym(1);
+				CSTNode result = createOperationCallExpCS(
+						simpleNameCS,
+						(IsMarkedPreCS)dtParser.getSym(2),
+						(StateExpCS)dtParser.getSym(4)
 					);
-				if (isMarkedPreCS.isPre()) {
-					setOffsets(result, (CSTNode)dtParser.getSym(1), (CSTNode)dtParser.getSym(2));
-				} else {
-					setOffsets(result, (CSTNode)dtParser.getSym(1));
-				}
+				setOffsets(result, simpleNameCS, getIToken(dtParser.getToken(5)));
 				dtParser.setSym1(result);
 	  		  break;
 			}
 	 
 			//
-			// Rule 217:  attrOrNavCallExpCS ::= keywordAsIdentifier isMarkedPreCS
+			// Rule 217:  attrOrNavCallExpCS ::= simpleNameCS isMarkedPreCS
+			//
+			case 217:
+ 
 			//
-			case 217: {
+			// Rule 218:  attrOrNavCallExpCS ::= keywordAsName isMarkedPreCS
+			//
+			case 218: {
 				
 				IsMarkedPreCS isMarkedPreCS = (IsMarkedPreCS)dtParser.getSym(2);
-				SimpleNameCS simpleNameCS = createSimpleNameCS(
-							SimpleTypeEnum.IDENTIFIER_LITERAL,
-							getTokenText(dtParser.getToken(1))
-						);
-				setOffsets(simpleNameCS, getIToken(dtParser.getToken(1)));
 				CSTNode result = createFeatureCallExpCS(
-						simpleNameCS,
+						(SimpleNameCS)dtParser.getSym(1),
 						new BasicEList(),
 						isMarkedPreCS
 					);
 				if (isMarkedPreCS.isPre()) {
-					setOffsets(result, getIToken(dtParser.getToken(1)), (CSTNode)dtParser.getSym(2));
+					setOffsets(result, (CSTNode)dtParser.getSym(1), (CSTNode)dtParser.getSym(2));
 				} else {
-					setOffsets(result, getIToken(dtParser.getToken(1)));
+					setOffsets(result, (CSTNode)dtParser.getSym(1));
 				}
 				dtParser.setSym1(result);
 	  		  break;
 			}
 	 
 			//
-			// Rule 218:  attrOrNavCallExpCS ::= simpleNameCS [ argumentsCS ] isMarkedPreCS
+			// Rule 219:  attrOrNavCallExpCS ::= simpleNameCS [ argumentsCS ] isMarkedPreCS
 			//
-			case 218: {
+			case 219: {
 				
 				IsMarkedPreCS isMarkedPreCS = (IsMarkedPreCS)dtParser.getSym(5);
 				CSTNode result = createFeatureCallExpCS(
@@ -1808,9 +1602,9 @@
 			}
 	 
 			//
-			// Rule 219:  isMarkedPreCS ::= $Empty
+			// Rule 220:  isMarkedPreCS ::= $Empty
 			//
-			case 219: {
+			case 220: {
 				
 				CSTNode result = createIsMarkedPreCS(false);
 				setOffsets(result, getIToken(dtParser.getToken(1)));
@@ -1819,9 +1613,9 @@
 			}
 	 
 			//
-			// Rule 220:  isMarkedPreCS ::= @pre
+			// Rule 221:  isMarkedPreCS ::= @pre
 			//
-			case 220: {
+			case 221: {
 				
 				CSTNode result = createIsMarkedPreCS(true);
 				setOffsets(result, getIToken(dtParser.getToken(1)));
@@ -1830,16 +1624,16 @@
 			}
 	 
 			//
-			// Rule 221:  argumentsCSopt ::= $Empty
+			// Rule 222:  argumentsCSopt ::= $Empty
 			//
-			case 221:
+			case 222:
 				dtParser.setSym1(new BasicEList());
 				break;
  
 			//
-			// Rule 223:  argumentsCS ::= oclExpressionCS
+			// Rule 224:  argumentsCS ::= oclExpressionCS
 			//
-			case 223: {
+			case 224: {
 				
 				EList result = new BasicEList();
 				result.add(dtParser.getSym(1));
@@ -1848,9 +1642,9 @@
 			}
 	 
 			//
-			// Rule 224:  argumentsCS ::= argumentsCS , oclExpressionCS
+			// Rule 225:  argumentsCS ::= argumentsCS , oclExpressionCS
 			//
-			case 224: {
+			case 225: {
 				
 				EList result = (EList)dtParser.getSym(1);
 				result.add(dtParser.getSym(3));
@@ -1859,54 +1653,23 @@
 			}
 	 
 			//
-			// Rule 225:  letExpCS ::= let variableCS letExpSubCSopt in oclExpressionCS
+			// Rule 226:  letExpCS ::= let variableListCS in oclExpressionCS
 			//
-			case 225: {
+			case 226: {
 				
-				EList variables = (EList)dtParser.getSym(3);
-				variables.add(0, dtParser.getSym(2));
 				CSTNode result = createLetExpCS(
-						variables,
-						(OCLExpressionCS)dtParser.getSym(5)
+						(EList)dtParser.getSym(2),
+						(OCLExpressionCS)dtParser.getSym(4)
 					);
-				setOffsets(result, getIToken(dtParser.getToken(1)), (CSTNode)dtParser.getSym(5));
-				dtParser.setSym1(result);
-	  		  break;
-			}
-	 
-			//
-			// Rule 226:  letExpSubCSopt ::= $Empty
-			//
-			case 226:
-				dtParser.setSym1(new BasicEList());
-				break;
- 
-			//
-			// Rule 228:  letExpSubCS ::= , variableCS
-			//
-			case 228: {
-				
-				EList result = new BasicEList();
-				result.add(dtParser.getSym(2));
-				dtParser.setSym1(result);
-	  		  break;
-			}
-	 
-			//
-			// Rule 229:  letExpSubCS ::= letExpSubCS , variableCS
-			//
-			case 229: {
-				
-				EList result = (EList)dtParser.getSym(1);
-				result.add(dtParser.getSym(3));
+				setOffsets(result, getIToken(dtParser.getToken(1)), (CSTNode)dtParser.getSym(4));
 				dtParser.setSym1(result);
 	  		  break;
 			}
 	 
 			//
-			// Rule 230:  ifExpCS ::= if oclExpressionCS then oclExpressionCS else oclExpressionCS endif
+			// Rule 227:  ifExpCS ::= if oclExpressionCS then oclExpressionCS else oclExpressionCS endif
 			//
-			case 230: {
+			case 227: {
 				
 				CSTNode result = createIfExpCS(
 						(OCLExpressionCS)dtParser.getSym(2),
@@ -1919,14 +1682,14 @@
 			}
 	 
 			//
-			// Rule 231:  messageExpCS ::= ^ simpleNameCS ( oclMessageArgumentsCSopt )
+			// Rule 228:  messageExpCS ::= ^ simpleNameCS ( oclMessageArgumentsCSopt )
 			//
-			case 231:
+			case 228:
  
 			//
-			// Rule 232:  messageExpCS ::= ^^ simpleNameCS ( oclMessageArgumentsCSopt )
+			// Rule 229:  messageExpCS ::= ^^ simpleNameCS ( oclMessageArgumentsCSopt )
 			//
-			case 232: {
+			case 229: {
 				
 				CSTNode result = createMessageExpCS(
 						getIToken(dtParser.getToken(1)).getKind() == OCLParsersym.TK_CARET,
@@ -1939,16 +1702,16 @@
 			}
 	 
 			//
-			// Rule 233:  oclMessageArgumentsCSopt ::= $Empty
+			// Rule 230:  oclMessageArgumentsCSopt ::= $Empty
 			//
-			case 233:
+			case 230:
 				dtParser.setSym1(new BasicEList());
 				break;
  
 			//
-			// Rule 235:  oclMessageArgumentsCS ::= oclMessageArgCS
+			// Rule 232:  oclMessageArgumentsCS ::= oclMessageArgCS
 			//
-			case 235: {
+			case 232: {
 				
 				EList result = new BasicEList();
 				result.add(dtParser.getSym(1));
@@ -1957,9 +1720,9 @@
 			}
 	 
 			//
-			// Rule 236:  oclMessageArgumentsCS ::= oclMessageArgumentsCS , oclMessageArgCS
+			// Rule 233:  oclMessageArgumentsCS ::= oclMessageArgumentsCS , oclMessageArgCS
 			//
-			case 236: {
+			case 233: {
 				
 				EList result = (EList)dtParser.getSym(1);
 				result.add(dtParser.getSym(3));
@@ -1968,9 +1731,9 @@
 			}
 	 
 			//
-			// Rule 237:  oclMessageArgCS ::= oclExpressionCS
+			// Rule 234:  oclMessageArgCS ::= oclExpressionCS
 			//
-			case 237: {
+			case 234: {
 				
 				CSTNode result = createOCLMessageArgCS(
 						null,
@@ -1982,9 +1745,9 @@
 			}
 	 
 			//
-			// Rule 238:  oclMessageArgCS ::= ?
+			// Rule 235:  oclMessageArgCS ::= ?
 			//
-			case 238: {
+			case 235: {
 				
 				CSTNode result = createOCLMessageArgCS(
 						null,
@@ -1996,9 +1759,9 @@
 			}
 	 
 			//
-			// Rule 239:  oclMessageArgCS ::= ? : typeCS
+			// Rule 236:  oclMessageArgCS ::= ? : typeCS
 			//
-			case 239: {
+			case 236: {
 				
 				CSTNode result = createOCLMessageArgCS(
 						(TypeCS)dtParser.getSym(3),
@@ -2010,9 +1773,9 @@
 			}
 	 
 			//
-			// Rule 248:  packageDeclarationCSm ::= packageDeclarationCSm packageDeclarationCS
+			// Rule 245:  packageDeclarationCSm ::= packageDeclarationCSm packageDeclarationCS
 			//
-			case 248: {
+			case 245: {
 				
 				PackageDeclarationCS result = (PackageDeclarationCS)dtParser.getSym(2);
 				result.setPackageDeclarationCS((PackageDeclarationCS) dtParser.getSym(1));
@@ -2021,9 +1784,9 @@
 			}
 	 
 			//
-			// Rule 249:  packageDeclarationCS ::= package pathNameCS contextDeclCSmopt endpackage
+			// Rule 246:  packageDeclarationCS ::= package pathNameCS contextDeclCSmopt endpackage
 			//
-			case 249: {
+			case 246: {
 				
 				CSTNode result = createPackageDeclarationCS(
 						(PathNameCS)dtParser.getSym(2),
@@ -2035,9 +1798,9 @@
 			}
 	 
 			//
-			// Rule 250:  packageDeclarationCS1 ::= contextDeclCSm
+			// Rule 247:  packageDeclarationCS1 ::= contextDeclCSm
 			//
-			case 250: {
+			case 247: {
 				
 				EList contextDecls = (EList)dtParser.getSym(1);
 				CSTNode result = createPackageDeclarationCS(null, contextDecls);
@@ -2049,16 +1812,16 @@
 			}
 	 
 			//
-			// Rule 251:  contextDeclCSmopt ::= $Empty
+			// Rule 248:  contextDeclCSmopt ::= $Empty
 			//
-			case 251:
+			case 248:
 				dtParser.setSym1(new BasicEList());
 				break;
  
 			//
-			// Rule 253:  contextDeclCSm ::= contextDeclCS
+			// Rule 250:  contextDeclCSm ::= contextDeclCS
 			//
-			case 253: {
+			case 250: {
 				
 				EList result = new BasicEList();
 				result.add(dtParser.getSym(1));
@@ -2067,9 +1830,9 @@
 			}
 	 
 			//
-			// Rule 254:  contextDeclCSm ::= contextDeclCSm contextDeclCS
+			// Rule 251:  contextDeclCSm ::= contextDeclCSm contextDeclCS
 			//
-			case 254: {
+			case 251: {
 				
 				EList result = (EList)dtParser.getSym(1);
 				result.add(dtParser.getSym(2));
@@ -2078,9 +1841,9 @@
 			}
 	 
 			//
-			// Rule 258:  propertyContextCS ::= context pathNameCS :: simpleNameCS : typeCS initOrDerValueCS
+			// Rule 255:  propertyContextCS ::= context pathNameCS :: simpleNameCS : typeCS initOrDerValueCS
 			//
-			case 258: {
+			case 255: {
 				
 				CSTNode result = createPropertyContextCS(
 						(PathNameCS)dtParser.getSym(2),
@@ -2094,9 +1857,9 @@
 			}
 	 
 			//
-			// Rule 259:  initOrDerValueCS ::= initOrDerValueCSopt init : oclExpressionCS
+			// Rule 256:  initOrDerValueCS ::= initOrDerValueCSopt init : oclExpressionCS
 			//
-			case 259: {
+			case 256: {
 				
 				CSTNode result = createInitValueCS(
 						(InitOrDerValueCS)dtParser.getSym(1),
@@ -2112,9 +1875,9 @@
 			}
 	 
 			//
-			// Rule 260:  initOrDerValueCS ::= initOrDerValueCSopt derive : oclExpressionCS
+			// Rule 257:  initOrDerValueCS ::= initOrDerValueCSopt derive : oclExpressionCS
 			//
-			case 260: {
+			case 257: {
 				
 				CSTNode result = createDerValueCS(
 						(InitOrDerValueCS)dtParser.getSym(1),
@@ -2130,16 +1893,16 @@
 			}
 	 
 			//
-			// Rule 261:  initOrDerValueCSopt ::= $Empty
+			// Rule 258:  initOrDerValueCSopt ::= $Empty
 			//
-			case 261:
+			case 258:
 				dtParser.setSym1(null);
 				break;
  
 			//
-			// Rule 263:  classifierContextDeclCS ::= context pathNameCS invOrDefCSm
+			// Rule 260:  classifierContextDeclCS ::= context pathNameCS invOrDefCSm
 			//
-			case 263: {
+			case 260: {
 				
 				EList<InvOrDefCS> list = (EList<InvOrDefCS>)dtParser.getSym(3);
 				CSTNode result = createClassifierContextDeclCS(
@@ -2152,9 +1915,9 @@
 			}
 	 
 			//
-			// Rule 264:  invOrDefCSm ::= invOrDefCS
+			// Rule 261:  invOrDefCSm ::= invOrDefCS
 			//
-			case 264: {
+			case 261: {
 				
 				EList<InvOrDefCS> result = new BasicEList<InvOrDefCS>();
 				result.add((InvOrDefCS)dtParser.getSym(1));
@@ -2163,9 +1926,9 @@
 			}
 	 
 			//
-			// Rule 265:  invOrDefCSm ::= invOrDefCSm invOrDefCS
+			// Rule 262:  invOrDefCSm ::= invOrDefCSm invOrDefCS
 			//
-			case 265: {
+			case 262: {
 				
 				EList<InvOrDefCS> result = (EList<InvOrDefCS>)dtParser.getSym(1);
 				result.add((InvOrDefCS)dtParser.getSym(2));
@@ -2174,9 +1937,9 @@
 			}
 	 
 			//
-			// Rule 266:  invOrDefCS ::= inv simpleNameCSopt : oclExpressionCS
+			// Rule 263:  invOrDefCS ::= inv simpleNameCSopt : oclExpressionCS
 			//
-			case 266: {
+			case 263: {
 				
 				CSTNode result = createInvCS(
 						(SimpleNameCS)dtParser.getSym(2),
@@ -2188,9 +1951,9 @@
 			}
 	 
 			//
-			// Rule 267:  invOrDefCS ::= def simpleNameCSopt : defExpressionCS
+			// Rule 264:  invOrDefCS ::= def simpleNameCSopt : defExpressionCS
 			//
-			case 267: {
+			case 264: {
 				
 				CSTNode result = createDefCS(
 						(SimpleNameCS)dtParser.getSym(2),
@@ -2202,30 +1965,26 @@
 			}
 	 
 			//
-			// Rule 268:  defExpressionCS ::= IDENTIFIER : typeCS = oclExpressionCS
+			// Rule 265:  defExpressionCS ::= typedVariableCS = oclExpressionCS
 			//
-			case 268: {
+			case 265: {
 				
-				VariableCS variableCS = createVariableCS(
-							getTokenText(dtParser.getToken(1)),
-							(TypeCS)dtParser.getSym(3),
-							null
-						);
-				setOffsets(variableCS, getIToken(dtParser.getToken(1)), (CSTNode)dtParser.getSym(3));
+				VariableCS variableCS = (VariableCS)dtParser.getSym(1);
+				OCLExpressionCS expressionCS = (OCLExpressionCS)dtParser.getSym(3);
 				CSTNode result = createDefExpressionCS(
 						variableCS,
 						null,
-						(OCLExpressionCS)dtParser.getSym(5)
+						expressionCS
 					);
-				setOffsets(result, variableCS, (CSTNode)dtParser.getSym(5));
+				setOffsets(result, variableCS, expressionCS);
 				dtParser.setSym1(result);
 	  		  break;
 			}
 	 
 			//
-			// Rule 269:  defExpressionCS ::= operationCS1 = oclExpressionCS
+			// Rule 266:  defExpressionCS ::= operationCS1 = oclExpressionCS
 			//
-			case 269: {
+			case 266: {
 				
 				CSTNode result = createDefExpressionCS(
 						null,
@@ -2238,9 +1997,9 @@
 			}
 	 
 			//
-			// Rule 270:  operationContextDeclCS ::= context operationCS2 prePostOrBodyDeclCSm
+			// Rule 267:  operationContextDeclCS ::= context operationCS2 prePostOrBodyDeclCSm
 			//
-			case 270: {
+			case 267: {
 				
 				EList prePostOrBodyDecls = (EList)dtParser.getSym(3);
 				CSTNode result = createOperationContextDeclCS(
@@ -2253,9 +2012,9 @@
 			}
 	 
 			//
-			// Rule 271:  prePostOrBodyDeclCSm ::= prePostOrBodyDeclCS
+			// Rule 268:  prePostOrBodyDeclCSm ::= prePostOrBodyDeclCS
 			//
-			case 271: {
+			case 268: {
 				
 				EList result = new BasicEList();
 				result.add(dtParser.getSym(1));
@@ -2264,9 +2023,9 @@
 			}
 	 
 			//
-			// Rule 272:  prePostOrBodyDeclCSm ::= prePostOrBodyDeclCSm prePostOrBodyDeclCS
+			// Rule 269:  prePostOrBodyDeclCSm ::= prePostOrBodyDeclCSm prePostOrBodyDeclCS
 			//
-			case 272: {
+			case 269: {
 				
 				EList result = (EList)dtParser.getSym(1);
 				result.add(dtParser.getSym(2));
@@ -2275,9 +2034,9 @@
 			}
 	 
 			//
-			// Rule 273:  prePostOrBodyDeclCS ::= pre simpleNameCSopt : oclExpressionCS
+			// Rule 270:  prePostOrBodyDeclCS ::= pre simpleNameCSopt : oclExpressionCS
 			//
-			case 273: {
+			case 270: {
 				
 				CSTNode result = createPrePostOrBodyDeclCS(
 						PrePostOrBodyEnum.PRE_LITERAL,
@@ -2290,9 +2049,9 @@
 			}
 	 
 			//
-			// Rule 274:  prePostOrBodyDeclCS ::= post simpleNameCSopt : oclExpressionCS
+			// Rule 271:  prePostOrBodyDeclCS ::= post simpleNameCSopt : oclExpressionCS
 			//
-			case 274: {
+			case 271: {
 				
 				CSTNode result = createPrePostOrBodyDeclCS(
 						PrePostOrBodyEnum.POST_LITERAL,
@@ -2305,9 +2064,9 @@
 			}
 	 
 			//
-			// Rule 275:  prePostOrBodyDeclCS ::= body simpleNameCSopt : oclExpressionCS
+			// Rule 272:  prePostOrBodyDeclCS ::= body simpleNameCSopt : oclExpressionCS
 			//
-			case 275: {
+			case 272: {
 				
 				CSTNode result = createPrePostOrBodyDeclCS(
 						PrePostOrBodyEnum.BODY_LITERAL,
Index: src/org/eclipse/ocl/parser/OCLLexer.g
===================================================================
RCS file: /cvsroot/modeling/org.eclipse.mdt/org.eclipse.ocl/plugins/org.eclipse.ocl/src/org/eclipse/ocl/parser/OCLLexer.g,v
retrieving revision 1.1
diff -u -r1.1 OCLLexer.g
--- src/org/eclipse/ocl/parser/OCLLexer.g	11 Oct 2007 23:05:00 -0000	1.1
+++ src/org/eclipse/ocl/parser/OCLLexer.g	19 Nov 2008 21:05:45 -0000
@@ -1,7 +1,7 @@
 --/**
 -- * <copyright>
 -- *
--- * Copyright (c) 2005, 2007 IBM Corporation and others.
+-- * Copyright (c) 2005, 2008 IBM Corporation and others.
 -- * All rights reserved.   This program and the accompanying materials
 -- * are made available under the terms of the Eclipse Public License v1.0
 -- * which accompanies this distribution, and is available at
@@ -53,7 +53,7 @@
 	/./**
  * <copyright>
  *
- * Copyright (c) 2005, 2007 IBM Corporation and others.
+ * Copyright (c) 2005, 2008 IBM Corporation and others.
  * All rights reserved.   This program and the accompanying materials
  * are made available under the terms of the Eclipse Public License v1.0
  * which accompanies this distribution, and is available at
Index: src/org/eclipse/ocl/parser/OCLKWLexerprs.java
===================================================================
RCS file: /cvsroot/modeling/org.eclipse.mdt/org.eclipse.ocl/plugins/org.eclipse.ocl/src/org/eclipse/ocl/parser/OCLKWLexerprs.java,v
retrieving revision 1.1
diff -u -r1.1 OCLKWLexerprs.java
--- src/org/eclipse/ocl/parser/OCLKWLexerprs.java	11 Oct 2007 23:05:00 -0000	1.1
+++ src/org/eclipse/ocl/parser/OCLKWLexerprs.java	19 Nov 2008 21:05:44 -0000
@@ -1,7 +1,7 @@
 /**
 * <copyright>
 *
-* Copyright (c) 2005, 2007 IBM Corporation and others.
+* Copyright (c) 2005, 2008 IBM Corporation and others.
 * All rights reserved.   This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
@@ -13,7 +13,7 @@
 *
 * </copyright>
 *
-* $Id: OCL_v200811051638.patch,v 1.1 2008/11/19 21:26:34 ewillink Exp $
+* $Id: OCL_v200811051638.patch,v 1.1 2008/11/19 21:26:34 ewillink Exp $
 */
 
 package org.eclipse.ocl.parser;
Index: src/org/eclipse/ocl/parser/OCLKWLexersym.java
===================================================================
RCS file: /cvsroot/modeling/org.eclipse.mdt/org.eclipse.ocl/plugins/org.eclipse.ocl/src/org/eclipse/ocl/parser/OCLKWLexersym.java,v
retrieving revision 1.1
diff -u -r1.1 OCLKWLexersym.java
--- src/org/eclipse/ocl/parser/OCLKWLexersym.java	11 Oct 2007 23:05:00 -0000	1.1
+++ src/org/eclipse/ocl/parser/OCLKWLexersym.java	19 Nov 2008 21:05:44 -0000
@@ -1,7 +1,7 @@
 /**
 * <copyright>
 *
-* Copyright (c) 2005, 2007 IBM Corporation and others.
+* Copyright (c) 2005, 2008 IBM Corporation and others.
 * All rights reserved.   This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
@@ -13,7 +13,7 @@
 *
 * </copyright>
 *
-* $Id: OCL_v200811051638.patch,v 1.1 2008/11/19 21:26:34 ewillink Exp $
+* $Id: OCL_v200811051638.patch,v 1.1 2008/11/19 21:26:34 ewillink Exp $
 */
 
 package org.eclipse.ocl.parser;
Index: src/org/eclipse/ocl/parser/OCLLexerprs.java
===================================================================
RCS file: /cvsroot/modeling/org.eclipse.mdt/org.eclipse.ocl/plugins/org.eclipse.ocl/src/org/eclipse/ocl/parser/OCLLexerprs.java,v
retrieving revision 1.1
diff -u -r1.1 OCLLexerprs.java
--- src/org/eclipse/ocl/parser/OCLLexerprs.java	11 Oct 2007 23:05:00 -0000	1.1
+++ src/org/eclipse/ocl/parser/OCLLexerprs.java	19 Nov 2008 21:05:46 -0000
@@ -1,7 +1,7 @@
 /**
 * <copyright>
 *
-* Copyright (c) 2005, 2007 IBM Corporation and others.
+* Copyright (c) 2005, 2008 IBM Corporation and others.
 * All rights reserved.   This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
@@ -13,7 +13,7 @@
 *
 * </copyright>
 *
-* $Id: OCL_v200811051638.patch,v 1.1 2008/11/19 21:26:34 ewillink Exp $
+* $Id: OCL_v200811051638.patch,v 1.1 2008/11/19 21:26:34 ewillink Exp $
 */
 
 package org.eclipse.ocl.parser;
Index: src/org/eclipse/ocl/parser/OCLParsersym.java
===================================================================
RCS file: /cvsroot/modeling/org.eclipse.mdt/org.eclipse.ocl/plugins/org.eclipse.ocl/src/org/eclipse/ocl/parser/OCLParsersym.java,v
retrieving revision 1.2
diff -u -r1.2 OCLParsersym.java
--- src/org/eclipse/ocl/parser/OCLParsersym.java	4 Oct 2008 00:54:10 -0000	1.2
+++ src/org/eclipse/ocl/parser/OCLParsersym.java	19 Nov 2008 21:05:49 -0000
@@ -16,7 +16,7 @@
 *
 * </copyright>
 *
-* $Id: OCL_v200811051638.patch,v 1.1 2008/11/19 21:26:34 ewillink Exp $
+* $Id: OCL_v200811051638.patch,v 1.1 2008/11/19 21:26:34 ewillink Exp $
 */
 
 package org.eclipse.ocl.parser;
@@ -42,25 +42,25 @@
       TK_DIVIDE = 17,
       TK_GREATER = 18,
       TK_LESS = 19,
-      TK_EQUAL = 4,
+      TK_EQUAL = 3,
       TK_GREATER_EQUAL = 20,
       TK_LESS_EQUAL = 21,
       TK_NOT_EQUAL = 5,
       TK_LPAREN = 1,
-      TK_RPAREN = 2,
+      TK_RPAREN = 4,
       TK_LBRACE = 69,
       TK_RBRACE = 80,
       TK_LBRACKET = 81,
       TK_RBRACKET = 74,
       TK_ARROW = 83,
-      TK_BAR = 71,
+      TK_BAR = 72,
       TK_COMMA = 36,
       TK_COLON = 24,
       TK_COLONCOLON = 67,
       TK_SEMICOLON = 84,
       TK_DOT = 85,
       TK_DOTDOT = 86,
-      TK_ATPRE = 72,
+      TK_ATPRE = 70,
       TK_CARET = 87,
       TK_CARETCARET = 88,
       TK_QUESTIONMARK = 89,
@@ -72,7 +72,7 @@
       TK_package = 90,
       TK_endpackage = 91,
       TK_def = 78,
-      TK_if = 70,
+      TK_if = 71,
       TK_then = 92,
       TK_else = 93,
       TK_endif = 94,
@@ -128,16 +128,16 @@
       TK_OclMessage = 15,
       TK_OclInvalid = 66,
       TK_EOF_TOKEN = 79,
-      TK_IDENTIFIER = 3,
+      TK_IDENTIFIER = 2,
       TK_INTEGER_RANGE_START = 82,
       TK_ERROR_TOKEN = 99;
 
       public final static String orderedTerminalSymbols[] = {
                  "",
                  "LPAREN",
-                 "RPAREN",
                  "IDENTIFIER",
                  "EQUAL",
+                 "RPAREN",
                  "NOT_EQUAL",
                  "body",
                  "String",
@@ -203,9 +203,9 @@
                  "COLONCOLON",
                  "let",
                  "LBRACE",
+                 "ATPRE",
                  "if",
                  "BAR",
-                 "ATPRE",
                  "context",
                  "RBRACKET",
                  "inv",
Index: src/org/eclipse/ocl/parser/OCLLexersym.java
===================================================================
RCS file: /cvsroot/modeling/org.eclipse.mdt/org.eclipse.ocl/plugins/org.eclipse.ocl/src/org/eclipse/ocl/parser/OCLLexersym.java,v
retrieving revision 1.1
diff -u -r1.1 OCLLexersym.java
--- src/org/eclipse/ocl/parser/OCLLexersym.java	11 Oct 2007 23:05:00 -0000	1.1
+++ src/org/eclipse/ocl/parser/OCLLexersym.java	19 Nov 2008 21:05:46 -0000
@@ -1,7 +1,7 @@
 /**
 * <copyright>
 *
-* Copyright (c) 2005, 2007 IBM Corporation and others.
+* Copyright (c) 2005, 2008 IBM Corporation and others.
 * All rights reserved.   This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
@@ -13,7 +13,7 @@
 *
 * </copyright>
 *
-* $Id: OCL_v200811051638.patch,v 1.1 2008/11/19 21:26:34 ewillink Exp $
+* $Id: OCL_v200811051638.patch,v 1.1 2008/11/19 21:26:34 ewillink Exp $
 */
 
 package org.eclipse.ocl.parser;
Index: src/org/eclipse/ocl/parser/EssentialOCL.g
===================================================================
RCS file: /cvsroot/modeling/org.eclipse.mdt/org.eclipse.ocl/plugins/org.eclipse.ocl/src/org/eclipse/ocl/parser/EssentialOCL.g,v
retrieving revision 1.4
diff -u -r1.4 EssentialOCL.g
--- src/org/eclipse/ocl/parser/EssentialOCL.g	4 Oct 2008 00:54:10 -0000	1.4
+++ src/org/eclipse/ocl/parser/EssentialOCL.g	19 Nov 2008 21:05:44 -0000
@@ -13,6 +13,7 @@
 -- *   E.D.Willink - Remove unnecessary warning suppression
 -- *   E.D.Willink - Bugs 225493, 243976
 -- *   Zeligsoft - Bug 243976
+-- *   E.D.Willink - Support BacktrackingParser
 -- *
 -- * </copyright>
 -- *
@@ -28,6 +29,10 @@
 	-- Definition of macros used in the parser template
 	--
 	$prs_stream_class /.AbstractOCLParser./
+	$prs_parser_class /.DeterministicParser./
+	$prs_parser_exception /.NotDeterministicParseTableException./
+	$prs_parser_throw /.throw new RuntimeException("****Error: Regenerate $prs_type.java with -NOBACKTRACK option")./
+	$prs_parse_args /../
 	$lex_stream_class /.AbstractLexer./
 	$action_class /.$file_prefix./
 	$copyright_contributions /.*./
@@ -39,7 +44,7 @@
 	/. $Header
 				case $rule_number:./
 
-	-- From dtParserTemplateD.g
+	-- From bt/dtParserTemplateD.g
 	------------------------------------------------------
 	$Header
 	/.
@@ -111,7 +116,7 @@
 	public class $action_class extends $prs_stream_class implements RuleAction$additional_interfaces
 	{
 		protected static ParseTable prs = new $prs_type();
-		private DeterministicParser dtParser;
+		private $prs_parser_class dtParser;
 
 		public $action_class($lex_stream_class lexer) {
 			super(lexer);
@@ -139,17 +144,17 @@
 			ParseTable prsTable = new $prs_type();
 
 			try {
-				dtParser = new DeterministicParser(monitor, this, prsTable, this);
+				dtParser = new $prs_parser_class(monitor, this, prsTable, this);
 			}
-			catch (NotDeterministicParseTableException e) {
-				throw new RuntimeException("****Error: Regenerate $prs_type.java with -NOBACKTRACK option");
+			catch ($prs_parser_exception e) {
+                $prs_parser_throw;
 			}
 			catch (BadParseSymFileException e) {
 				throw new RuntimeException("****Error: Bad Parser Symbol File -- $sym_type.java. Regenerate $prs_type.java");
 			}
 
 			try {
-				return ($ast_type) dtParser.parse();
+				return ($ast_type) dtParser.parse($prs_parse_args);
 			}
 			catch (BadParseException e) {
 				reset(e.error_token); // point to error token
@@ -227,11 +232,11 @@
 	
 	import $lpg_ns.BadParseException;
 	import $lpg_ns.BadParseSymFileException;
-	import $lpg_ns.DeterministicParser;
+	import $lpg_ns.$prs_parser_class;
 	import $lpg_ns.DiagnoseParser;
 	import $lpg_ns.IToken;
 	import $lpg_ns.Monitor;
-	import $lpg_ns.NotDeterministicParseTableException;
+	import $lpg_ns.$prs_parser_exception;
 	import $lpg_ns.ParseTable;
 	import $lpg_ns.RuleAction;
 	./
@@ -398,18 +403,43 @@
 	-- of constructing an LPG grammar, but that are not reserved by OCL
 	-- and are commonly used in models such as the UML metamodel, itself
 	--
+	
+	binaryIdentifier -> oclIsUndefined
+	binaryIdentifier -> oclIsInvalid
+	binaryIdentifier -> oclIsNew
+	binaryIdentifier -> oclAsType
+	binaryIdentifier -> oclIsKindOf
+	binaryIdentifier -> oclIsTypeOf
+	binaryIdentifier -> EQUAL
+	binaryIdentifier -> NOT_EQUAL
+	binaryIdentifier -> PLUS
+	binaryIdentifier -> MULTIPLY
+	binaryIdentifier -> DIVIDE
+	binaryIdentifier -> GREATER
+	binaryIdentifier -> LESS
+	binaryIdentifier -> GREATER_EQUAL
+	binaryIdentifier -> LESS_EQUAL
+	binaryIdentifier -> and
+	binaryIdentifier -> or
+	binaryIdentifier -> xor
+
+	unaryIdentifier -> MINUS
+	unaryIdentifier -> not
+
+	iteratorIdentifier -> forAll
+	iteratorIdentifier -> exists
+	iteratorIdentifier -> isUnique
+	iteratorIdentifier -> any
+	iteratorIdentifier -> one
+	iteratorIdentifier -> collect
+	iteratorIdentifier -> select
+	iteratorIdentifier -> reject
+	iteratorIdentifier -> collectNested
+	iteratorIdentifier -> sortedBy
+	iteratorIdentifier -> closure
+
 	keywordAsIdentifier1 -> iterate
-	keywordAsIdentifier1 -> forAll
-	keywordAsIdentifier1 -> exists
-	keywordAsIdentifier1 -> isUnique
-	keywordAsIdentifier1 -> any
-	keywordAsIdentifier1 -> one
-	keywordAsIdentifier1 -> collect
-	keywordAsIdentifier1 -> select
-	keywordAsIdentifier1 -> reject
-	keywordAsIdentifier1 -> collectNested
-	keywordAsIdentifier1 -> sortedBy
-	keywordAsIdentifier1 -> closure
+	keywordAsIdentifier1 -> iteratorIdentifier
 	keywordAsIdentifier1 -> allInstances
 	keywordAsIdentifier1 -> body
 	keywordAsIdentifier1 -> derive
@@ -422,7 +452,39 @@
 	--------
 	keywordAsIdentifier -> keywordAsIdentifier1
 	keywordAsIdentifier -> null
-	
+
+	binaryName -> simpleNameCS
+	binaryName ::= binaryIdentifier
+		/.$NewCase./
+	keywordAsName ::= keywordAsIdentifier
+		/.$NewCase./
+	keywordAsName1 ::= keywordAsIdentifier1
+		/.$NewCase./
+	unaryName ::= unaryIdentifier
+		/.$BeginJava
+					SimpleNameCS result = createSimpleNameCS(
+								SimpleTypeEnum.IDENTIFIER_LITERAL,
+								getTokenText($getToken(1))
+							);
+					setOffsets(result, getIToken($getToken(1)));
+					$setResult(result);
+		  $EndJava
+		./
+		
+	iterateName ::= iterate
+		/.$NewCase./
+	iteratorName ::= iteratorIdentifier
+		/.$NewCase./
+	oclIsInStateName ::= oclIsInState
+		/.$BeginJava
+					SimpleNameCS result = createSimpleNameCS(
+								SimpleTypeEnum.KEYWORD_LITERAL,
+								getTokenText($getToken(1))
+							);
+					setOffsets(result, getIToken($getToken(1)));
+					$setResult(result);
+		  $EndJava
+		./
 
 	--
 	-- the 'operationCS' non-terminal is not referenced in this grammar
@@ -865,6 +927,8 @@
 		./
 
 	variableExpCS ::= simpleNameCS isMarkedPreCS
+		/.$NewCase./
+	variableExpCS ::= keywordAsName1 isMarkedPreCS
 		/.$BeginJava
 					IsMarkedPreCS isMarkedPreCS = (IsMarkedPreCS)$getSym(2);
 					CSTNode result = createVariableExpCS(
@@ -880,28 +944,9 @@
 					$setResult(result);
 		  $EndJava
 		./
-	variableExpCS ::= keywordAsIdentifier1 isMarkedPreCS
-		/.$BeginJava
-					IsMarkedPreCS isMarkedPreCS = (IsMarkedPreCS)$getSym(2);
-					SimpleNameCS simpleNameCS = createSimpleNameCS(
-								SimpleTypeEnum.IDENTIFIER_LITERAL,
-								getTokenText($getToken(1))
-							);
-					setOffsets(simpleNameCS, getIToken($getToken(1)));
-					CSTNode result = createVariableExpCS(
-							simpleNameCS,
-							new BasicEList(),
-							isMarkedPreCS
-						);
-					if (isMarkedPreCS.isPre()) {
-						setOffsets(result, getIToken($getToken(1)), (CSTNode)$getSym(2));
-					} else {
-						setOffsets(result, getIToken($getToken(1)));
-					}
-					$setResult(result);
-		  $EndJava
-		./
 	variableExpCS ::= simpleNameCS '[' argumentsCS ']' isMarkedPreCS
+		/.$NewCase./
+	variableExpCS ::= keywordAsName1 '[' argumentsCS ']' isMarkedPreCS
 		/.$BeginJava
 					IsMarkedPreCS isMarkedPreCS = (IsMarkedPreCS)$getSym(5);
 					CSTNode result = createVariableExpCS(
@@ -917,27 +962,6 @@
 					$setResult(result);
 		  $EndJava
 		./
-	variableExpCS ::= keywordAsIdentifier1 '[' argumentsCS ']' isMarkedPreCS
-		/.$BeginJava
-					IsMarkedPreCS isMarkedPreCS = (IsMarkedPreCS)$getSym(5);
-					SimpleNameCS simpleNameCS = createSimpleNameCS(
-								SimpleTypeEnum.IDENTIFIER_LITERAL,
-								getTokenText($getToken(1))
-							);
-					setOffsets(simpleNameCS, getIToken($getToken(1)));
-					CSTNode result = createVariableExpCS(
-							(SimpleNameCS)$getSym(1),
-							(EList)$getSym(3),
-							isMarkedPreCS
-						);
-					if (isMarkedPreCS.isPre()) {
-						setOffsets(result, (CSTNode)$getSym(1), (CSTNode)$getSym(5));
-					} else {
-						setOffsets(result, (CSTNode)$getSym(1), getIToken($getToken(4)));
-					}
-					$setResult(result);
-		  $EndJava
-		./
 
 
 	simpleNameCS -> primitiveTypeCS
@@ -1086,16 +1110,8 @@
 
     -- also covers the case of static attribute call, in which
     --    case @pre is not allowed anyway
-	enumLiteralExpCS ::= pathNameCS '::' keywordAsIdentifier
-		/.$BeginJava
-					CSTNode result = createEnumLiteralExpCS(
-							(PathNameCS)$getSym(1),
-							getTokenText($getToken(3))
-						);
-					setOffsets(result, (CSTNode)$getSym(1), getIToken($getToken(3)));
-					$setResult(result);
-		  $EndJava
-		./
+	enumLiteralExpCS ::= pathNameCS '::' keywordAsName
+		/.$NewCase./
 	enumLiteralExpCS ::= pathNameCS '::' simpleNameCS
 		/.$BeginJava
 					CSTNode result = createEnumLiteralExpCS(
@@ -1305,106 +1321,69 @@
 	loopExpCS -> iteratorExpCS
 	loopExpCS -> iterateExpCS
 
-	iteratorExpCS ::= forAll '(' iterContents ')'
-		/.$NewCase./
-	iteratorExpCS ::= exists '(' iterContents ')'
-		/.$NewCase./
-	iteratorExpCS ::= isUnique '(' iterContents ')'
-		/.$NewCase./
-	iteratorExpCS ::= one '(' iterContents ')'
-		/.$NewCase./
-	iteratorExpCS ::= any '(' iterContents ')'
-		/.$NewCase./
-	iteratorExpCS ::= collect '(' iterContents ')'
-		/.$NewCase./
-	iteratorExpCS ::= select '(' iterContents ')'
-		/.$NewCase./
-	iteratorExpCS ::= reject '(' iterContents ')'
-		/.$NewCase./
-	iteratorExpCS ::= collectNested '(' iterContents ')'
-		/.$NewCase./
-	iteratorExpCS ::= sortedBy '(' iterContents ')'
-		/.$NewCase./
-	iteratorExpCS ::= closure '(' iterContents ')'
+	iteratorExpCS ::= iteratorName '(' oclExpressionCS ')'
 		/.$BeginJava
-					SimpleNameCS simpleNameCS = createSimpleNameCS(
-								SimpleTypeEnum.KEYWORD_LITERAL,
-								getTokenText($getToken(1))
-							);
-					setOffsets(simpleNameCS, getIToken($getToken(1)));
-					Object[] iterContents = (Object[])$getSym(3);
+					SimpleNameCS simpleNameCS = (SimpleNameCS)$getSym(1);
 					CSTNode result = createIteratorExpCS(
 							simpleNameCS,
-							(VariableCS)iterContents[0],
-							(VariableCS)iterContents[1],
-							(OCLExpressionCS)iterContents[2]
-						);
-					setOffsets(result, getIToken($getToken(1)), getIToken($getToken(4)));
-					$setResult(result);
-		  $EndJava
-		./
-
-
-	iterContents ::= oclExpressionCS
-		/.$BeginJava
-					$setResult(new Object[] {
 							null,
 							null,
-							$getSym(1)
-						});
+							(OCLExpressionCS)$getSym(3)
+						);
+					setOffsets(result, simpleNameCS, getIToken($getToken(4)));
+					$setResult(result);
 		  $EndJava
 		./
-	
-	iterContents ::= variableCS '|' oclExpressionCS
+	iteratorExpCS ::= iteratorName '(' variableCS '|' oclExpressionCS ')'
 		/.$BeginJava
-					$setResult(new Object[] {
-							$getSym(1),
+					SimpleNameCS simpleNameCS = (SimpleNameCS)$getSym(1);
+					CSTNode result = createIteratorExpCS(
+							simpleNameCS,
+							(VariableCS)$getSym(3),
 							null,
-							$getSym(3)
-						});
+							(OCLExpressionCS)$getSym(5)
+						);
+					setOffsets(result, simpleNameCS, getIToken($getToken(6)));
+					$setResult(result);
 		  $EndJava
 		./
-	iterContents ::= variableCS ',' variableCS '|' oclExpressionCS
+	iteratorExpCS ::= iteratorName '(' variableCS ',' variableCS '|' oclExpressionCS ')'
 		/.$BeginJava
-					$setResult(new Object[] {
-							$getSym(1),
-							$getSym(3),
-							$getSym(5)
-						});
+					SimpleNameCS simpleNameCS = (SimpleNameCS)$getSym(1);
+					CSTNode result = createIteratorExpCS(
+							simpleNameCS,
+							(VariableCS)$getSym(3),
+							(VariableCS)$getSym(5),
+							(OCLExpressionCS)$getSym(7)
+						);
+					setOffsets(result, simpleNameCS, getIToken($getToken(8)));
+					$setResult(result);
 		  $EndJava
 		./
 
-	iterateExpCS ::= iterate '(' variableCS '|' oclExpressionCS ')'
+	iterateExpCS ::= iterateName '(' variableCS '|' oclExpressionCS ')'
 		/.$BeginJava
-					SimpleNameCS simpleNameCS = createSimpleNameCS(
-								SimpleTypeEnum.KEYWORD_LITERAL,
-								getTokenText($getToken(1))
-							);
-					setOffsets(simpleNameCS, getIToken($getToken(1)));
+					SimpleNameCS simpleNameCS = (SimpleNameCS)$getSym(1);
 					CSTNode result = createIterateExpCS(
 							simpleNameCS,
 							(VariableCS)$getSym(3),
 							null,
 							(OCLExpressionCS)$getSym(5)
 						);
-					setOffsets(result, getIToken($getToken(1)), getIToken($getToken(6)));
+					setOffsets(result, simpleNameCS, getIToken($getToken(6)));
 					$setResult(result);
 		  $EndJava
 		./
-	iterateExpCS ::= iterate '(' variableCS ';' variableCS '|' oclExpressionCS ')'
+	iterateExpCS ::= iterateName '(' variableCS ';' variableCS '|' oclExpressionCS ')'
 		/.$BeginJava
-					SimpleNameCS simpleNameCS = createSimpleNameCS(
-								SimpleTypeEnum.KEYWORD_LITERAL,
-								getTokenText($getToken(1))
-							);
-					setOffsets(simpleNameCS, getIToken($getToken(1)));
+					SimpleNameCS simpleNameCS = (SimpleNameCS)$getSym(1);
 					CSTNode result = createIterateExpCS(
 							simpleNameCS,
 							(VariableCS)$getSym(3),
 							(VariableCS)$getSym(5),
 							(OCLExpressionCS)$getSym(7)
 						);
-					setOffsets(result, getIToken($getToken(1)), getIToken($getToken(8)));
+					setOffsets(result, simpleNameCS, getIToken($getToken(8)));
 					$setResult(result);
 		  $EndJava
 		./
@@ -1420,7 +1399,7 @@
 					$setResult(result);
 		  $EndJava
 		./
-	variableCS ::= IDENTIFIER ':' typeCS
+	typedVariableCS ::= IDENTIFIER ':' typeCS
 		/.$BeginJava
 					CSTNode result = createVariableCS(
 							getTokenText($getToken(1)),
@@ -1431,6 +1410,7 @@
 					$setResult(result);
 		  $EndJava
 		./
+	variableCS -> typedVariableCS
 	variableCS ::= IDENTIFIER ':' typeCS '=' oclExpressionCS
 		/.$BeginJava
 					CSTNode result = createVariableCS(
@@ -1531,87 +1511,19 @@
 	featureCallExpCS -> attrOrNavCallExpCS
 
 	featureCallExpCS -> operationCallExpCS
-	featureCallExpCS ::= MINUS isMarkedPreCS '(' argumentsCSopt ')'
+	featureCallExpCS ::= unaryName isMarkedPreCS '(' argumentsCSopt ')'
 		/.$NewCase./
-	featureCallExpCS ::= not isMarkedPreCS '(' argumentsCSopt ')'
-		/.$BeginJava
-					SimpleNameCS simpleNameCS = createSimpleNameCS(
-								SimpleTypeEnum.IDENTIFIER_LITERAL,
-								getTokenText($getToken(1))
-							);
-					setOffsets(simpleNameCS, getIToken($getToken(1)));
-					CSTNode result = createOperationCallExpCS(
-							simpleNameCS,
-							(IsMarkedPreCS)$getSym(2),
-							(EList)$getSym(4)
-						);
-					setOffsets(result, getIToken($getToken(1)), getIToken($getToken(5)));
-					$setResult(result);
-		  $EndJava
-		./
-
-	operationCallExpCS ::=  simpleNameCS isMarkedPreCS '(' argumentsCSopt ')'
-		/.$BeginJava
-					CSTNode result = createOperationCallExpCS(
-							(SimpleNameCS)$getSym(1),
-							(IsMarkedPreCS)$getSym(2),
-							(EList)$getSym(4)
-						);
-					setOffsets(result, (CSTNode)$getSym(1), getIToken($getToken(5)));
-					$setResult(result);
-		  $EndJava
-		./
-
 	-- even though these operations do not use @pre or do not accept multiple arguments
 	-- in order to get better error reporting, the rule signature must comply with
 	-- the full rule of an operationCallExpCS
 	-- the alternative would be to remove these as keywords, but then the parser
 	-- would accept variable declarations where the var can be named "oclIsNew" for example
-	operationCallExpCS ::= oclIsUndefined isMarkedPreCS '(' argumentsCSopt ')'
-		/.$NewCase./
-	operationCallExpCS ::= oclIsInvalid isMarkedPreCS '(' argumentsCSopt ')'
-		/.$NewCase./
-	operationCallExpCS ::= oclIsNew isMarkedPreCS '(' argumentsCSopt ')'
-		/.$NewCase./
-	operationCallExpCS ::= oclAsType isMarkedPreCS '(' argumentsCSopt ')'
-		/.$NewCase./
-	operationCallExpCS ::= oclIsKindOf isMarkedPreCS '(' argumentsCSopt ')'
+	operationCallExpCS ::= binaryName isMarkedPreCS '(' argumentsCSopt ')'
 		/.$NewCase./
-	operationCallExpCS ::= oclIsTypeOf isMarkedPreCS '(' argumentsCSopt ')'
-		/.$NewCase./
-	operationCallExpCS ::= EQUAL isMarkedPreCS '(' argumentsCSopt ')'
-		/.$NewCase./
-	operationCallExpCS ::= NOT_EQUAL isMarkedPreCS '(' argumentsCSopt ')'
-		/.$NewCase./
-	operationCallExpCS ::= PLUS isMarkedPreCS '(' argumentsCSopt ')'
-		/.$NewCase./
-	operationCallExpCS ::= MULTIPLY isMarkedPreCS '(' argumentsCSopt ')'
-		/.$NewCase./
-	operationCallExpCS ::= DIVIDE isMarkedPreCS '(' argumentsCSopt ')'
-		/.$NewCase./
-	operationCallExpCS ::= GREATER isMarkedPreCS '(' argumentsCSopt ')'
-		/.$NewCase./
-	operationCallExpCS ::= LESS isMarkedPreCS '(' argumentsCSopt ')'
-		/.$NewCase./
-	operationCallExpCS ::= GREATER_EQUAL isMarkedPreCS '(' argumentsCSopt ')'
-		/.$NewCase./
-	operationCallExpCS ::= LESS_EQUAL isMarkedPreCS '(' argumentsCSopt ')'
-		/.$NewCase./
-	operationCallExpCS ::= and isMarkedPreCS '(' argumentsCSopt ')'
-		/.$NewCase./
-	operationCallExpCS ::= or isMarkedPreCS '(' argumentsCSopt ')'
-		/.$NewCase./
-	operationCallExpCS ::= xor isMarkedPreCS '(' argumentsCSopt ')'
-		/.$NewCase./
-	keywordOperationCallExpCS ::= keywordAsIdentifier isMarkedPreCS '(' argumentsCSopt ')'
+	keywordOperationCallExpCS ::= keywordAsName isMarkedPreCS '(' argumentsCSopt ')'
 		/.$BeginJava
-					SimpleNameCS simpleNameCS = createSimpleNameCS(
-								SimpleTypeEnum.IDENTIFIER_LITERAL,
-								getTokenText($getToken(1))
-							);
-					setOffsets(simpleNameCS, getIToken($getToken(1)));
 					CSTNode result = createOperationCallExpCS(
-							simpleNameCS,
+							(SimpleNameCS)$getSym(1),
 							(IsMarkedPreCS)$getSym(2),
 							(EList)$getSym(4)
 						);
@@ -1620,30 +1532,31 @@
 		  $EndJava
 		./
 
-	operationCallExpCS ::= oclIsInState isMarkedPreCS '(' pathNameCSOpt ')'
+	stateExpCS ::= pathNameCSOpt
 		/.$BeginJava
-					SimpleNameCS simpleNameCS = createSimpleNameCS(
-								SimpleTypeEnum.KEYWORD_LITERAL,
-								getTokenText($getToken(1))
-							);
-					setOffsets(simpleNameCS, getIToken($getToken(1)));
-
-					PathNameCS pathNameCS = (PathNameCS) dtParser.getSym(4);
-					StateExpCS stateExpCS = createStateExpCS(pathNameCS);
-					setOffsets(stateExpCS, pathNameCS);
-				
+					PathNameCS pathNameCS = (PathNameCS)$getSym(1);
+					StateExpCS result = createStateExpCS(pathNameCS);
+					setOffsets(result, pathNameCS);
+					$setResult(result);
+		  $EndJava
+		./
+	-- FIXME StateExpCS creates a needless irregularity; unwrap its content as an argument list
+	operationCallExpCS ::= oclIsInStateName isMarkedPreCS '(' stateExpCS ')'
+		/.$BeginJava
+					SimpleNameCS simpleNameCS = (SimpleNameCS)$getSym(1);
 					CSTNode result = createOperationCallExpCS(
 							simpleNameCS,
-							(IsMarkedPreCS)dtParser.getSym(2),
-							stateExpCS
+							(IsMarkedPreCS)$getSym(2),
+							(StateExpCS)$getSym(4)
 						);
-					setOffsets(result, getIToken($getToken(1)), getIToken($getToken(5)));
+					setOffsets(result, simpleNameCS, getIToken($getToken(5)));
 					$setResult(result);
 		  $EndJava
 		./
 
-
 	attrOrNavCallExpCS ::= simpleNameCS isMarkedPreCS
+		/.$NewCase./
+	attrOrNavCallExpCS ::= keywordAsName isMarkedPreCS
 		/.$BeginJava
 					IsMarkedPreCS isMarkedPreCS = (IsMarkedPreCS)$getSym(2);
 					CSTNode result = createFeatureCallExpCS(
@@ -1659,27 +1572,6 @@
 					$setResult(result);
 		  $EndJava
 		./
-	attrOrNavCallExpCS ::= keywordAsIdentifier isMarkedPreCS
-		/.$BeginJava
-					IsMarkedPreCS isMarkedPreCS = (IsMarkedPreCS)$getSym(2);
-					SimpleNameCS simpleNameCS = createSimpleNameCS(
-								SimpleTypeEnum.IDENTIFIER_LITERAL,
-								getTokenText($getToken(1))
-							);
-					setOffsets(simpleNameCS, getIToken($getToken(1)));
-					CSTNode result = createFeatureCallExpCS(
-							simpleNameCS,
-							new BasicEList(),
-							isMarkedPreCS
-						);
-					if (isMarkedPreCS.isPre()) {
-						setOffsets(result, getIToken($getToken(1)), (CSTNode)$getSym(2));
-					} else {
-						setOffsets(result, getIToken($getToken(1)));
-					}
-					$setResult(result);
-		  $EndJava
-		./
 	attrOrNavCallExpCS ::= simpleNameCS '[' argumentsCS ']' isMarkedPreCS
 		/.$BeginJava
 					IsMarkedPreCS isMarkedPreCS = (IsMarkedPreCS)$getSym(5);
@@ -1731,36 +1623,13 @@
 		  $EndJava
 		./
 
-	letExpCS ::= let variableCS letExpSubCSopt in oclExpressionCS
+	letExpCS ::= let variableListCS in oclExpressionCS
 		/.$BeginJava
-					EList variables = (EList)$getSym(3);
-					variables.add(0, $getSym(2));
 					CSTNode result = createLetExpCS(
-							variables,
-							(OCLExpressionCS)$getSym(5)
+							(EList)$getSym(2),
+							(OCLExpressionCS)$getSym(4)
 						);
-					setOffsets(result, getIToken($getToken(1)), (CSTNode)$getSym(5));
-					$setResult(result);
-		  $EndJava
-		./
-
-	letExpSubCSopt ::= $empty
-		/.$EmptyListAction./
-	letExpSubCSopt -> letExpSubCS		
-
-
-	letExpSubCS ::= ',' variableCS
-		/.$BeginJava
-					EList result = new BasicEList();
-					result.add($getSym(2));
-					$setResult(result);
-		  $EndJava
-		./
-
-	letExpSubCS ::= letExpSubCS ',' variableCS 
-		/.$BeginJava
-					EList result = (EList)$getSym(1);
-					result.add($getSym(3));
+					setOffsets(result, getIToken($getToken(1)), (CSTNode)$getSym(4));
 					$setResult(result);
 		  $EndJava
 		./
Index: src/org/eclipse/ocl/parser/OCLParser.g
===================================================================
RCS file: /cvsroot/modeling/org.eclipse.mdt/org.eclipse.ocl/plugins/org.eclipse.ocl/src/org/eclipse/ocl/parser/OCLParser.g,v
retrieving revision 1.2
diff -u -r1.2 OCLParser.g
--- src/org/eclipse/ocl/parser/OCLParser.g	4 Oct 2008 00:54:10 -0000	1.2
+++ src/org/eclipse/ocl/parser/OCLParser.g	19 Nov 2008 21:05:46 -0000
@@ -1,7 +1,7 @@
 --/**
 -- * <copyright>
 -- *
--- * Copyright (c) 2005, 2007 IBM Corporation and others.
+-- * Copyright (c) 2005, 2008 IBM Corporation and others.
 -- * All rights reserved.   This program and the accompanying materials
 -- * are made available under the terms of the Eclipse Public License v1.0
 -- * which accompanies this distribution, and is available at
@@ -28,7 +28,6 @@
 %options margin=4
 %options noserialize
 %options package=org.eclipse.ocl.parser
---%options template=dtParserTemplateD.g
 %options import_terminals=OCLLexer.g
 %options ast_type=CSTNode
 %options programming_language=java
@@ -234,20 +233,16 @@
 		  $EndJava
 		./
 
-	defExpressionCS ::= IDENTIFIER ':' typeCS '=' oclExpressionCS
+	defExpressionCS ::= typedVariableCS '=' oclExpressionCS
 		/.$BeginJava
-					VariableCS variableCS = createVariableCS(
-								getTokenText($getToken(1)),
-								(TypeCS)$getSym(3),
-								null
-							);
-					setOffsets(variableCS, getIToken($getToken(1)), (CSTNode)$getSym(3));
+					VariableCS variableCS = (VariableCS)$getSym(1);
+					OCLExpressionCS expressionCS = (OCLExpressionCS)$getSym(3);
 					CSTNode result = createDefExpressionCS(
 							variableCS,
 							null,
-							(OCLExpressionCS)$getSym(5)
+							expressionCS
 						);
-					setOffsets(result, variableCS, (CSTNode)$getSym(5));
+					setOffsets(result, variableCS, expressionCS);
 					$setResult(result);
 		  $EndJava
 		./
Index: src/org/eclipse/ocl/parser/OCLLexer.java
===================================================================
RCS file: /cvsroot/modeling/org.eclipse.mdt/org.eclipse.ocl/plugins/org.eclipse.ocl/src/org/eclipse/ocl/parser/OCLLexer.java,v
retrieving revision 1.2
diff -u -r1.2 OCLLexer.java
--- src/org/eclipse/ocl/parser/OCLLexer.java	28 Sep 2008 17:33:00 -0000	1.2
+++ src/org/eclipse/ocl/parser/OCLLexer.java	19 Nov 2008 21:05:45 -0000
@@ -1,7 +1,7 @@
 /**
 * <copyright>
 *
-* Copyright (c) 2005, 2008 IBM Corporation, Zeligsoft Inc., and others.
+* Copyright (c) 2005, 2008 IBM Corporation and others.
 * All rights reserved.   This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
@@ -10,11 +10,10 @@
 * Contributors:
 *   IBM - Initial API and implementation
 *   E.D.Willink - Lexer and Parser refactoring to support extensibility and flexible error handling
-*   Zeligsoft - Bug 248869
 *
 * </copyright>
 *
-* $Id: OCL_v200811051638.patch,v 1.1 2008/11/19 21:26:34 ewillink Exp $
+* $Id: OCL_v200811051638.patch,v 1.1 2008/11/19 21:26:34 ewillink Exp $
 */
 
 package org.eclipse.ocl.parser;
@@ -64,13 +63,17 @@
     	return oclEnvironment;
     }
 
+    @Override
     public int [] getKeywordKinds() { return kwLexer.getKeywordKinds(); }
+
     public int getLeftSpan() { return lexParser.getFirstToken(); }
     public AbstractParser getParser() { return parser; }
     public int getRhsFirstTokenIndex(int i) { return lexParser.getFirstToken(i); }
     public int getRhsLastTokenIndex(int i) { return lexParser.getLastToken(i); }
     public int getRightSpan() { return lexParser.getLastToken(); }
-    @Override public int getToken(int i) { return lexParser.getToken(i); }
+
+    @Override
+    public int getToken(int i) { return lexParser.getToken(i); }
 
     @Override
     public void initialize(char [] content, String filename)
Index: src/org/eclipse/ocl/parser/OCLAnalyzer.java
===================================================================
RCS file: /cvsroot/modeling/org.eclipse.mdt/org.eclipse.ocl/plugins/org.eclipse.ocl/src/org/eclipse/ocl/parser/OCLAnalyzer.java,v
retrieving revision 1.7
diff -u -r1.7 OCLAnalyzer.java
--- src/org/eclipse/ocl/parser/OCLAnalyzer.java	4 Oct 2008 00:54:10 -0000	1.7
+++ src/org/eclipse/ocl/parser/OCLAnalyzer.java	19 Nov 2008 21:05:44 -0000
@@ -57,6 +57,18 @@
 	 * and lexical analysis.
 	 * 
 	 * @param parser the syntactic (and lexical) parser
+	 * 
+	 * @since 1.3
+	 */
+	public OCLAnalyzer(AbstractOCLParser parser) {
+		super(parser);
+	}
+    
+	/**
+	 * Construct an OCL semantic analyzer that will use a given parser to perform syntactic
+	 * and lexical analysis.
+	 * 
+	 * @param parser the syntactic (and lexical) parser
 	 */
 	public OCLAnalyzer(OCLParser parser) {
 		super(parser);
@@ -82,9 +94,10 @@
 	 */
 	public OCLAnalyzer(Environment<PK, C, O, P, EL, PM, S, COA, SSA, CT, CLS, E> environment, String text) {
 		this(new OCLParser(new OCLLexer(environment, text.toCharArray())));
-		getLexer().lexToTokens(getParser());
+		getLexer().lexToTokens(getAbstractParser());
 	}
     
+	@Deprecated // Use getAbstractParser
 	@Override
 	public OCLParser getParser() {
 		return (OCLParser) super.getParser();
@@ -110,7 +123,7 @@
 	 * @return the parsed CST, or <code>null</code> if it could not be parsed
 	 */
 	public CSTNode parseConcreteSyntax() {
-		return getParser().parseTokensToCST();
+		return getAbstractParser().parseTokensToCST();
 	}
     
     /**
@@ -125,7 +138,7 @@
      * @return the OCL expression, if it successfully parsed
      */
 	public OCLExpression<C> parseAST(OCLExpressionCS cst, ConstraintKind constraintType) {
-        OCLParser parser = getParser();   
+        AbstractOCLParser parser = getAbstractParser();   
         OCLExpression<C> result = null;
         switch (constraintType) {
         case PRECONDITION:
Index: src/org/eclipse/ocl/lpg/AbstractBasicEnvironment.java
===================================================================
RCS file: /cvsroot/modeling/org.eclipse.mdt/org.eclipse.ocl/plugins/org.eclipse.ocl/src/org/eclipse/ocl/lpg/AbstractBasicEnvironment.java,v
retrieving revision 1.5
diff -u -r1.5 AbstractBasicEnvironment.java
--- src/org/eclipse/ocl/lpg/AbstractBasicEnvironment.java	4 Oct 2008 00:54:10 -0000	1.5
+++ src/org/eclipse/ocl/lpg/AbstractBasicEnvironment.java	19 Nov 2008 21:05:38 -0000
@@ -41,7 +41,8 @@
  * 
  * @since 1.2
  */
-public abstract class AbstractBasicEnvironment implements BasicEnvironment {
+public abstract class AbstractBasicEnvironment implements BasicEnvironment2 {
+
 	private BasicEnvironment parent;					// parent in environment hierarchy
 	private ProblemHandler problemHandler = null;			// handler for problem reports
 	private FormattingHelper formatter = null;				// message formatting helper
@@ -185,11 +186,34 @@
 	}
 
 	public void initASTMapping(Object astNode, CSTNode cstNode) {
-		if ((astNode != null) && (cstNode != null)) {
-			CSTNode oldCSTNode = getASTNodeToCSTNodeMap().put(astNode, cstNode);
-			cstNode.setAst(astNode);
-			if (oldCSTNode != null && OCLPlugin.shouldTrace(OCLDebugOptions.PARSING)) {
-				OCLPlugin.trace("Displaced " + oldCSTNode); //$NON-NLS-1$
+		initASTMapping(astNode, cstNode, astNode);
+	}
+
+	/**
+	 * @since 1.3
+	 */
+	public void initASTMapping(Object fromAstNode, CSTNode cstNode, Object toAstNode) {
+		if (cstNode != null) {
+			if (fromAstNode != null) {
+				Map<Object, CSTNode> nodeToCSTNodeMap = getASTNodeToCSTNodeMap();
+				CSTNode oldCSTNode = nodeToCSTNodeMap.get(fromAstNode);
+				if (oldCSTNode == null)
+					nodeToCSTNodeMap.put(fromAstNode, cstNode);
+				else if (oldCSTNode == cstNode)
+					;
+				else if (OCLPlugin.shouldTrace(OCLDebugOptions.PARSING)) {
+					OCLPlugin.trace("Preserved AST mapping of " + fromAstNode.getClass().getSimpleName() + " to " + oldCSTNode.getClass().getSimpleName() + " rather than " + cstNode.getClass().getSimpleName()); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
+				}
+			}
+			if (toAstNode != null) {
+				Object oldAstNode = cstNode.getAst();
+				if (oldAstNode == null)
+					cstNode.setAst(toAstNode);
+				else if (oldAstNode == toAstNode)
+					;
+				else if (OCLPlugin.shouldTrace(OCLDebugOptions.PARSING)) {
+					OCLPlugin.trace("Preserved CST mapping of " + cstNode.getClass().getSimpleName() + " to " + oldAstNode.getClass().getSimpleName() + " rather than " + toAstNode.getClass().getSimpleName()); //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
+				}
 			}
 		}
 	}
Index: src/org/eclipse/ocl/lpg/AbstractParser.java
===================================================================
RCS file: /cvsroot/modeling/org.eclipse.mdt/org.eclipse.ocl/plugins/org.eclipse.ocl/src/org/eclipse/ocl/lpg/AbstractParser.java,v
retrieving revision 1.3
diff -u -r1.3 AbstractParser.java
--- src/org/eclipse/ocl/lpg/AbstractParser.java	4 Oct 2008 00:54:10 -0000	1.3
+++ src/org/eclipse/ocl/lpg/AbstractParser.java	19 Nov 2008 21:05:39 -0000
@@ -19,10 +19,15 @@
  */
 package org.eclipse.ocl.lpg;
 
+import java.util.ArrayList;
+
+import lpg.lpgjavaruntime.ErrorToken;
 import lpg.lpgjavaruntime.IToken;
 import lpg.lpgjavaruntime.LexStream;
 import lpg.lpgjavaruntime.Monitor;
+import lpg.lpgjavaruntime.ParseErrorCodes;
 import lpg.lpgjavaruntime.PrsStream;
+import lpg.lpgjavaruntime.Token;
 
 import org.eclipse.ocl.cst.CSTNode;
 import org.eclipse.ocl.internal.l10n.OCLMessages;
@@ -39,6 +44,7 @@
 public abstract class AbstractParser extends PrsStream
 {
 	private final BasicEnvironment environment;
+	private int defaultRepairCount = 0;
 
 	public AbstractParser(BasicEnvironment environment) {
 		this.environment = environment;
@@ -84,6 +90,48 @@
 	public BasicEnvironment getEnvironment() {
 		return environment;
 	}
+
+    //
+    // This function returns the index of the token element
+    // containing the offset specified. If such a token does
+    // not exist, it returns the negation of the index of the 
+    // element immediately preceding the offset.
+    //
+    /**
+	 * @since 1.3
+	 */
+    public ErrorToken getErrorTokenAtCharacter(int offset)
+    {
+        ErrorToken bestToken = null;
+        for (int i = getSize(); --i >= 0; ) {
+            IToken token = getTokenAt(i);
+            if (!(token instanceof ErrorToken))
+            	break;
+            IToken errorToken = ((ErrorToken) token).getErrorToken();
+            if (offset >= errorToken.getStartOffset() &&
+                offset <= errorToken.getEndOffset()) {
+            	if ((bestToken == null) || ((bestToken.getStartOffset() <= errorToken.getStartOffset())
+            		&& (token.getEndOffset() <= errorToken.getEndOffset()))) {
+            		bestToken = (ErrorToken) token;
+            	}
+            }
+        }
+        return bestToken;
+    }
+ 
+	/**
+	 * @since 1.3
+	 */
+	public int getDefaultRepairCount() {
+		return defaultRepairCount;
+	}
+	 
+	/**
+	 * @since 1.3
+	 */
+	public int getErrorTokens() {
+		return getTokens().size() - getStreamLength();
+	}
 	
 //	@Override public AbstractLexer getLexStream() {
 //		return getLexer();
@@ -93,8 +141,91 @@
 		return (AbstractLexer) super.getLexStream();
 	}
 
+    //
+    // Overridden to search only the non-Error nodes, which are the only
+	// tokens in monotonic order.
+    //
+    @Override
+	public int getTokenIndexAtCharacter(int offset)
+    {
+        int low = 0;
+        int high = getSize();
+        while (high > low) {
+            IToken highToken = getTokenAt(high-1);
+            if (!(highToken instanceof ErrorToken))
+            	break;
+            high--;           	
+        }
+        while (high > low)
+        {
+            int mid = (high + low) / 2;
+            IToken mid_element = getTokenAt(mid);
+            if (offset >= mid_element.getStartOffset() &&
+                offset <= mid_element.getEndOffset())
+                 return mid;
+            else if (offset < mid_element.getStartOffset())
+                 high = mid;
+            else low = mid + 1;
+        }
+
+        return -(low - 1);
+    }
+ 
+	@Override
+//	public int makeErrorToken(int firsttok, int lasttok, int errortok, int kind) {
+//		return super.makeErrorToken(firsttok, lasttok > firsttok ? lasttok-1 : lasttok, errortok, kind);
+//	}
+    public int makeErrorToken(int firsttok, int lasttok, int errortok, int kind)
+    {
+//		IToken firstToken = getIToken(firsttok);
+//		IToken lastToken = getIToken(lasttok);
+//		System.out.println(
+//			"firsttok:" + firsttok + ":" + firstToken.getStartOffset() + ":" + firstToken.getEndOffset() + ":" + new String(getInputChars(), firstToken.getStartOffset(), firstToken.getEndOffset() - firstToken.getStartOffset() + 1) +
+//			" lasttok:" + lasttok + ":" + lastToken.getStartOffset() + ":" + lastToken.getEndOffset() +  ":" + new String(getInputChars(), lastToken.getStartOffset(), lastToken.getEndOffset() - lastToken.getStartOffset() + 1) +
+//			" errortok:" + errortok);
+		
+    	@SuppressWarnings("unchecked")
+        ArrayList<IToken> tokens = getTokens();
+        int index = tokens.size(); // the next index
+
+        //
+        // Note that when creating an error token, we do not remap its kind.
+        // Since this is not a lexical operation, it is the responsibility of
+        // the calling program (a parser driver) to pass to us the proper kind
+        // that it wants for an error token.
+        //
+        Token token = new ErrorToken(getIToken(firsttok),
+                                     getIToken(lasttok),
+                                     getIToken(errortok),
+                                     getStartOffset(firsttok),
+//                                     getEndOffset(lasttok > firsttok ? lasttok-1 : lasttok),
+                                     getEndOffset(lasttok),
+                                     kind)
+        {
+			@Override
+			public String toString() {
+		        if (getPrsStream() == null)
+		            return "<toString>"; //$NON-NLS-1$
+		        int startOffset = getStartOffset();
+		        int length = getEndOffset() - startOffset;
+		        if (length < 0) {
+		        	length = -length-1;
+		        	startOffset = getEndOffset();
+		        }
+		        if ((startOffset + length) > getPrsStream().getInputChars().length)
+		            return String.valueOf(IToken.EOF);
+		        return new String(getPrsStream().getInputChars(), startOffset, length);
+			}
+        	
+        };
+        token.setTokenIndex(index);
+		tokens.add(token);
+        token.setAdjunctIndex(getAdjuncts().size());
+        return index;
+    }
+
 	public CSTNode parseTokensToCST() {
-		return parseTokensToCST(null, 0);
+		return parseTokensToCST(null, defaultRepairCount);
 	}
 	
 	public abstract CSTNode parseTokensToCST(Monitor monitor, int error_repair_count);
@@ -112,10 +243,50 @@
 			environment.parserError(errorCode, leftToken, rightToken, tokenText);
 		}
 	}
+	
+    //
+    // Report error message for given error_token.
+    //
+    /**
+	 * @since 1.3
+	 */
+    public final void reportErrorTokenMessage(int error_token, String msg)
+    {
+        int firsttok = super.getFirstRealToken(error_token);
+        int lasttok = super.getLastRealToken(error_token);
+        if (firsttok > lasttok) {
+            String location =
+            	super.getFileName() + ':' +
+            	super.getEndLine(lasttok) + ':' +
+            	super.getEndColumn(lasttok) + ": "; //$NON-NLS-1$
+            reportError(ParseErrorCodes.INSERTION_CODE, location, lasttok, lasttok, msg);
+        }
+        else {
+        	String location =
+        		super.getFileName() + ':' +
+                super.getLine(error_token) + ':' +
+                super.getColumn(error_token) + ':' +
+                super.getEndLine(error_token) + ':' +
+                super.getEndColumn(error_token) + ": "; //$NON-NLS-1$
+        	reportError(ParseErrorCodes.SUBSTITUTION_CODE, location, firsttok, lasttok, msg);
+        }
+    }
+
 
 	@Override public void resetLexStream(LexStream lexStream) {
 		setLexStream((AbstractLexer)lexStream);
 	}
+    
+	/**
+	 * Sets the number of repairs to be performed by a parser capable of
+	 * performing repairs (the BacktrackingParser) unless overriden on
+	 * the specific parser invocation method.
+	 * 
+	 * @since 1.3
+	 */
+	public void setDefaultRepairCount(int defaultRepairCount) {
+		this.defaultRepairCount = defaultRepairCount;
+	}
 
 	public void setLexStream(AbstractLexer lexStream) {
 		super.resetLexStream(lexStream);
Index: src/org/eclipse/ocl/OCL.java
===================================================================
RCS file: /cvsroot/modeling/org.eclipse.mdt/org.eclipse.ocl/plugins/org.eclipse.ocl/src/org/eclipse/ocl/OCL.java,v
retrieving revision 1.5
diff -u -r1.5 OCL.java
--- src/org/eclipse/ocl/OCL.java	15 Feb 2008 05:20:03 -0000	1.5
+++ src/org/eclipse/ocl/OCL.java	19 Nov 2008 21:05:37 -0000
@@ -33,6 +33,8 @@
 import org.eclipse.ocl.lpg.ProblemHandler;
 import org.eclipse.ocl.parser.OCLAnalyzer;
 import org.eclipse.ocl.parser.ValidationVisitor;
+import org.eclipse.ocl.parser.backtracking.OCLBacktrackingLexer;
+import org.eclipse.ocl.parser.backtracking.OCLBacktrackingParser;
 import org.eclipse.ocl.types.OCLStandardLibrary;
 import org.eclipse.ocl.util.OCLUtil;
 import org.eclipse.ocl.util.ObjectUtil;
@@ -71,6 +73,7 @@
 	private List<CT> constraints = new java.util.ArrayList<CT>();
 	private Diagnostic problems;
 	
+	private int parserRepairCount = 0;
 	private boolean traceParsing = OCLPlugin.shouldTrace(OCLDebugOptions.PARSING);
     private boolean traceEvaluation = OCLPlugin.shouldTrace(OCLDebugOptions.EVALUATION);
 	
@@ -243,8 +246,20 @@
      */
 	public List<CT> parse(OCLInput input) throws ParserException {
 		OCLAnalyzer<PK, C, O, P, EL, PM, S, COA, SSA, CT, CLS, E>
-		analyzer = new OCLAnalyzer<PK, C, O, P, EL, PM, S, COA, SSA, CT, CLS, E>(
-				rootEnvironment, input.getContentAsString());
+		analyzer;
+		String contentAsString = input.getContentAsString();
+		if (parserRepairCount > 0) {
+			OCLBacktrackingLexer lexer = new OCLBacktrackingLexer(rootEnvironment, contentAsString.toCharArray());
+			OCLBacktrackingParser parser = new OCLBacktrackingParser(lexer);
+			parser.setDefaultRepairCount(parserRepairCount);
+			lexer.lexToTokens(parser);
+			analyzer = new OCLAnalyzer<PK, C, O, P, EL, PM, S, COA, SSA, CT, CLS, E>(
+					parser);
+		}
+		else
+			analyzer = new OCLAnalyzer<PK, C, O, P, EL, PM, S, COA, SSA, CT, CLS, E>(
+					rootEnvironment, contentAsString);
+			
 		analyzer.setTraceFlag(isParseTracingEnabled());
 		
 		// clear out old diagnostics
@@ -567,6 +582,42 @@
 	}
     
     /**
+     * Queries the number of repairs to be made by the parser.
+     * <br>
+     * The default zero value selects use of the determinstic parser,
+     * which terminates after one serious syntax error is detected.
+     * <br>
+     * A non-zero value selects the backtracking parser. The backtracking
+     * parser may be about three times slower.
+     * 
+     * @return the number of repairs to be attempted
+     * 
+     * @see #setParserRepairCount(int)
+     * @since 1.3
+     */
+    public int getParserRepairCount() {
+        return parserRepairCount;
+    }
+    
+    /**
+     * Sets the number of repairs to be made by the parser.
+     * <br>
+     * The default zero value selects use of the determinstic parser,
+     * which terminates after one serious syntax error is detected.
+     * <br>
+     * A non-zero value selects the backtracking parser. The backtracking
+     * parser may be about three times slower.
+      * 
+     * @param parserRepairCount whether evaluation tracing is enabled
+     * 
+     * @see #getParserRepairCount()
+     * @since 1.3
+     */
+    public void setParserRepairCount(int parserRepairCount) {
+        this.parserRepairCount = parserRepairCount;
+    }
+    
+    /**
      * Queries whether tracing of evaluation is enabled.  Tracing
      * logs the progress of evaluation to the console, which may
      * be of use in diagnosing problems.
@@ -592,7 +643,7 @@
      * <tt>org.eclipse.ocl/debug/evaluation</tt> debug option. 
      * </p>
      * 
-     * param b whether evaluation tracing is enabled
+     * @param b whether evaluation tracing is enabled
      * 
      * @see #isEvaluationTracingEnabled()
      */
Index: META-INF/MANIFEST.MF
===================================================================
RCS file: /cvsroot/modeling/org.eclipse.mdt/org.eclipse.ocl/plugins/org.eclipse.ocl/META-INF/MANIFEST.MF,v
retrieving revision 1.10
diff -u -r1.10 MANIFEST.MF
--- META-INF/MANIFEST.MF	28 Sep 2008 17:33:00 -0000	1.10
+++ META-INF/MANIFEST.MF	19 Nov 2008 21:05:36 -0000
@@ -22,6 +22,7 @@
  org.eclipse.ocl.lpg,
  org.eclipse.ocl.options,
  org.eclipse.ocl.parser,
+ org.eclipse.ocl.parser.backtracking,
  org.eclipse.ocl.types,
  org.eclipse.ocl.types.impl,
  org.eclipse.ocl.types.operations,
Index: src/org/eclipse/ocl/internal/helper/OCLSyntaxHelper.java
===================================================================
RCS file: /cvsroot/modeling/org.eclipse.mdt/org.eclipse.ocl/plugins/org.eclipse.ocl/src/org/eclipse/ocl/internal/helper/OCLSyntaxHelper.java,v
retrieving revision 1.12
diff -u -r1.12 OCLSyntaxHelper.java
--- src/org/eclipse/ocl/internal/helper/OCLSyntaxHelper.java	12 Oct 2008 01:09:50 -0000	1.12
+++ src/org/eclipse/ocl/internal/helper/OCLSyntaxHelper.java	19 Nov 2008 21:05:38 -0000
@@ -864,7 +864,7 @@
 	private List<IToken> tokenize(OCLAnalyzer<PK, C, O, P, EL, PM, S, COA, SSA, CT, CLS, E> analyzer) {
 		IToken token = null;
 		List<IToken> result = new ArrayList<IToken>();
-		AbstractParser parser = analyzer.getParser();
+		AbstractParser parser = analyzer.getAbstractParser();
 		for (;;) {
 			try {
 				token = parser.getIToken(parser.getToken());
@@ -948,7 +948,7 @@
 				OCLAnalyzer<PK, C, O, P, EL, PM, S, COA, SSA, CT, CLS, E> analyzer =
 					new OCLAnalyzer<PK, C, O, P, EL, PM, S, COA, SSA, CT, CLS, E>(
 							environment, txt);
-				AbstractParser parser = analyzer.getParser();		
+				AbstractParser parser = analyzer.getAbstractParser();		
 				List<IToken> tokens = tokenize(analyzer);
 				
 				ListIterator<IToken> iter = tokens.listIterator(tokens.size());
@@ -1099,7 +1099,7 @@
 	private List<String> parseTokensPathNameCS(
 			OCLAnalyzer<PK, C, O, P, EL, PM, S, COA, SSA, CT, CLS, E> analyzer,
 			List<IToken> tokens) {
-		AbstractParser parser = analyzer.getParser();		
+		AbstractParser parser = analyzer.getAbstractParser();		
 		ArrayList<String> path = new ArrayList<String>();
 		IToken token;
 		int index = tokens.size() - 1;
@@ -1349,7 +1349,7 @@
 					env, variables);
 		
 		if (!parseVariableDeclaration(env, mainAnalyzer)) {
-			AbstractParser parser = mainAnalyzer.getParser();		
+			AbstractParser parser = mainAnalyzer.getAbstractParser();		
 			parser.reset();
 			OCLAnalyzer<PK, C, O, P, EL, PM, S, COA, SSA, CT, CLS, E> analyzer;
 			String newTxt;
Index: src/org/eclipse/ocl/util/OCLUtil.java
===================================================================
RCS file: /cvsroot/modeling/org.eclipse.mdt/org.eclipse.ocl/plugins/org.eclipse.ocl/src/org/eclipse/ocl/util/OCLUtil.java,v
retrieving revision 1.6
diff -u -r1.6 OCLUtil.java
--- src/org/eclipse/ocl/util/OCLUtil.java	16 Oct 2008 01:57:50 -0000	1.6
+++ src/org/eclipse/ocl/util/OCLUtil.java	19 Nov 2008 21:05:49 -0000
@@ -32,6 +32,7 @@
 import org.eclipse.ocl.TypeChecker;
 import org.eclipse.ocl.lpg.AbstractBasicEnvironment;
 import org.eclipse.ocl.lpg.BasicEnvironment;
+import org.eclipse.ocl.lpg.BasicEnvironment2;
 import org.eclipse.ocl.lpg.ProblemHandler;
 import org.eclipse.ocl.options.Customizable;
 import org.eclipse.ocl.parser.OCLProblemHandler;
@@ -48,7 +49,7 @@
  */
 public final class OCLUtil {
     /** Use weak references as the keys to avoid memory leaks. */
-	private static final Map<Environment<?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?>, Reference<BasicEnvironment>> environments = new java.util.WeakHashMap<Environment<?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?>, Reference<BasicEnvironment>>();
+	private static final Map<Environment<?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?>, Reference<BasicEnvironment2>> environments = new java.util.WeakHashMap<Environment<?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?>, Reference<BasicEnvironment2>>();
 
     /** Use weak references as the keys to avoid memory leaks. */
 	private static final Map<Environment<?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?>, Reference<TypeChecker<?, ?, ?>>> typesCheckerEnvironments = new java.util.WeakHashMap<Environment<?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?>, Reference<TypeChecker<?, ?, ?>>>();
@@ -101,6 +102,8 @@
 				result = (T) getTypeChecker(env);
 			} else if (adapterType == BasicEnvironment.class) {
 				result = (T) getBasicEnvironment(env);
+			} else if (adapterType == BasicEnvironment2.class) {
+				result = (T) getBasicEnvironment(env);
 			} else if (adapterType == ProblemHandler.class) {
 				result = (T) getAdapter(env, BasicEnvironment.class).getProblemHandler();
 			} else if (adapterType == Environment.Lookup.class) {
@@ -160,11 +163,11 @@
 	 * @param env the environment for which to define an external adapter
 	 * @return the external adapter
 	 */
-	private static BasicEnvironment getBasicEnvironment(
+	private static BasicEnvironment2 getBasicEnvironment(
 	        final Environment<?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?, ?> env) {
 	    
-	    BasicEnvironment result = null;
-	    Reference<BasicEnvironment> ref = environments.get(env);
+	    BasicEnvironment2 result = null;
+	    Reference<BasicEnvironment2> ref = environments.get(env);
 	    
 	    if (ref != null) {
 	        result = ref.get();
@@ -183,7 +186,7 @@
                 }
             };
             
-            environments.put(env, new java.lang.ref.WeakReference<BasicEnvironment>(result));
+            environments.put(env, new java.lang.ref.WeakReference<BasicEnvironment2>(result));
 	    }
 	    
 	    return result;
Index: src/org/eclipse/ocl/cst/impl/CSTNodeImpl.java
===================================================================
RCS file: /cvsroot/modeling/org.eclipse.mdt/org.eclipse.ocl/plugins/org.eclipse.ocl/src/org/eclipse/ocl/cst/impl/CSTNodeImpl.java,v
retrieving revision 1.2
diff -u -r1.2 CSTNodeImpl.java
--- src/org/eclipse/ocl/cst/impl/CSTNodeImpl.java	4 Oct 2008 00:54:09 -0000	1.2
+++ src/org/eclipse/ocl/cst/impl/CSTNodeImpl.java	19 Nov 2008 21:05:37 -0000
@@ -20,8 +20,10 @@
 import lpg.lpgjavaruntime.IToken;
 import org.eclipse.emf.common.notify.Notification;
 import org.eclipse.emf.ecore.EClass;
+import org.eclipse.emf.ecore.EObject;
 import org.eclipse.emf.ecore.impl.ENotificationImpl;
 import org.eclipse.emf.ecore.impl.EObjectImpl;
+import org.eclipse.emf.ecore.resource.Resource;
 import org.eclipse.ocl.cst.CSTNode;
 import org.eclipse.ocl.cst.CSTPackage;
 
@@ -273,6 +275,8 @@
 	 * @generated
 	 */
 	public void setAst(Object newAst) {
+		assert newAst == null || newAst instanceof EObject || newAst instanceof Resource;
+		assert !(newAst instanceof CSTNode);
 		Object oldAst = ast;
 		ast = newAst;
 		if (eNotificationRequired())
Index: src/org/eclipse/ocl/lpg/BasicEnvironment2.java
===================================================================
RCS file: src/org/eclipse/ocl/lpg/BasicEnvironment2.java
diff -N src/org/eclipse/ocl/lpg/BasicEnvironment2.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ src/org/eclipse/ocl/lpg/BasicEnvironment2.java	1 Jan 1970 00:00:00 -0000
@@ -0,0 +1,41 @@
+/**
+ * <copyright>
+ *
+ * Copyright (c) 2007 IBM Corporation and others.
+ * All rights reserved.   This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *   E.D.Willink - Initial API and implementation
+ *
+ * </copyright>
+ *
+ * $Id: OCL_v200811051638.patch,v 1.1 2008/11/19 21:26:34 ewillink Exp $
+ */
+package org.eclipse.ocl.lpg;
+
+import org.eclipse.ocl.cst.CSTNode;
+
+/**
+ * A <code>BasicEnvironment2</code> provides an extended environment interface to support
+ * asymmetric as well as symmetric mappings between CST and AST.
+ * @since 1.3
+ */
+public interface BasicEnvironment2 extends BasicEnvironment
+{	
+	/**
+	 * Initialize the asymmetric mapping of an object (typically an astNode) to its originating cstNode,
+	 * and of a cstNode to its consequent object (typically an astNode)
+	 * so that AST-based analysis may report error messages exploiting the CST context, or
+	 * to support incremental AST/CST update. Any pre-existing mapping is preserved. Each mapping
+	 * involving a null object is ignored, so that for instance the toAstNode may be set null to establish
+	 * only the fromAstNode to cstNode mapping.
+	 * 
+	 * @param fromAstNode
+	 * @param cstNode
+	 * @param toAstNode
+	 */
+	void initASTMapping(Object fromAstNode, CSTNode cstNode, Object toAstNode);
+}
Index: src/org/eclipse/ocl/parser/backtracking/OCLBacktrackingLexer.java
===================================================================
RCS file: src/org/eclipse/ocl/parser/backtracking/OCLBacktrackingLexer.java
diff -N src/org/eclipse/ocl/parser/backtracking/OCLBacktrackingLexer.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ src/org/eclipse/ocl/parser/backtracking/OCLBacktrackingLexer.java	1 Jan 1970 00:00:00 -0000
@@ -0,0 +1,634 @@
+/**
+* <copyright>
+*
+* Copyright (c) 2005, 2008 IBM Corporation and others.
+* All rights reserved.   This program and the accompanying materials
+* are made available under the terms of the Eclipse Public License v1.0
+* which accompanies this distribution, and is available at
+* http://www.eclipse.org/legal/epl-v10.html
+*
+* Contributors:
+*   IBM - Initial API and implementation
+*   E.D.Willink - Lexer and Parser refactoring to support extensibility and flexible error handling
+*
+* </copyright>
+*
+* $Id: OCL_v200811051638.patch,v 1.1 2008/11/19 21:26:34 ewillink Exp $
+*/
+
+package org.eclipse.ocl.parser.backtracking;
+
+import lpg.lpgjavaruntime.*;
+import org.eclipse.ocl.lpg.AbstractLexer;
+import org.eclipse.ocl.lpg.AbstractParser;
+import org.eclipse.ocl.Environment;
+import org.eclipse.ocl.lpg.BasicEnvironment;
+import org.eclipse.ocl.util.OCLUtil;
+
+@SuppressWarnings("nls")
+public class OCLBacktrackingLexer extends AbstractLexer implements OCLBacktrackingParsersym, OCLBacktrackingLexersym, RuleAction
+{
+    private static ParseTable prs = new OCLBacktrackingLexerprs();
+    //
+    // The Lexer contains an array of characters as the input stream to be parsed.
+    // There are methods to retrieve and classify characters.
+    // The lexparser "token" is implemented simply as the index of the next character in the array.
+    // The Lexer extends the abstract class LpgLexStream with an implementation of the abstract
+    // method getKind.  The template defines the Lexer class and the lexer() method.
+    // A driver creates the action class, "Lexer", passing an Option object to the constructor.
+    //
+    protected OCLBacktrackingKWLexer kwLexer;
+    protected boolean printTokens;
+    private AbstractParser parser;
+    private LexParser lexParser = new LexParser(this, prs, this);
+    
+    private final Environment<?,?,?,?,?,?,?,?,?,?,?,?> oclEnvironment;
+
+    public OCLBacktrackingLexer(Environment<?,?,?,?,?,?,?,?,?,?,?,?> environment) {
+        super(OCLUtil.getAdapter(environment, BasicEnvironment.class));
+        oclEnvironment = environment;
+    }
+    
+	public OCLBacktrackingLexer(Environment<?,?,?,?,?,?,?,?,?,?,?,?> environment, char[] chars) {
+		this(environment, chars, "OCL", ECLIPSE_TAB_VALUE);
+		kwLexer = new OCLBacktrackingKWLexer(getInputChars(), TK_IDENTIFIER);
+	}
+
+    public OCLBacktrackingLexer(Environment<?,?,?,?,?,?,?,?,?,?,?,?> environment, char[] input_chars, String filename, int tab)  {
+        super(OCLUtil.getAdapter(environment, BasicEnvironment.class), input_chars, filename, tab);
+        oclEnvironment = environment;
+    }
+    
+	public Environment<?,?,?,?,?,?,?,?,?,?,?,?> getOCLEnvironment() {
+    	return oclEnvironment;
+    }
+
+    @Override
+    public int [] getKeywordKinds() { return kwLexer.getKeywordKinds(); }
+
+    public int getLeftSpan() { return lexParser.getFirstToken(); }
+    public AbstractParser getParser() { return parser; }
+    public int getRhsFirstTokenIndex(int i) { return lexParser.getFirstToken(i); }
+    public int getRhsLastTokenIndex(int i) { return lexParser.getLastToken(i); }
+    public int getRightSpan() { return lexParser.getLastToken(); }
+
+    @Override
+    public int getToken(int i) { return lexParser.getToken(i); }
+
+    @Override
+    public void initialize(char [] content, String filename)
+    {
+        super.initialize(content, filename);
+        if (kwLexer == null)
+             kwLexer = new OCLBacktrackingKWLexer(getInputChars(), TK_IDENTIFIER);
+        else
+             kwLexer.setInputChars(getInputChars());
+    }
+
+    @Override
+    public String[] orderedExportedSymbols() { return OCLBacktrackingParsersym.orderedTerminalSymbols; }
+    
+    @Override
+    public void setInputChars(char[] inputChars) {
+		super.setInputChars(inputChars);
+		kwLexer = new OCLBacktrackingKWLexer(getInputChars(), TK_IDENTIFIER);
+	}
+    
+    @Override
+    public void lexToTokens(Monitor monitor, AbstractParser parser)
+    {
+        if (getInputChars() == null)
+            throw new NullPointerException("LexStream was not initialized");
+
+        this.parser = parser;
+
+        parser.makeToken(0, 0, 0); // Token list must start with a bad token
+            
+        lexParser.parseCharacters(monitor);  // Lex the input characters
+            
+        int i = getStreamIndex();
+        parser.makeToken(i, i, TK_EOF_TOKEN); // and end with the end of file token
+        parser.setStreamLength(parser.getSize());
+            
+        return;
+    }
+    
+    final void makeToken(int kind)
+    {
+        int startOffset = getLeftSpan(),
+            endOffset = getRightSpan();
+        makeToken(startOffset, endOffset, kind);
+        if (printTokens) printValue(startOffset, endOffset);
+    }
+
+    final void makeComment(int kind)
+    {
+        int startOffset = getLeftSpan(),
+            endOffset = getRightSpan();
+        super.getPrsStream().makeAdjunct(startOffset, endOffset, kind);
+    }
+
+    final void skipToken()
+    {
+        if (printTokens) printValue(getLeftSpan(), getRightSpan());
+    }
+    
+    final void checkForKeyWord()
+    {
+        int startOffset = getLeftSpan(),
+            endOffset = getRightSpan(),
+        kwKind = kwLexer.lexer(startOffset, endOffset);
+        makeToken(startOffset, endOffset, kwKind);
+        if (printTokens) printValue(startOffset, endOffset);
+    }
+    
+    final void printValue(int startOffset, int endOffset)
+    {
+        String s = new String(getInputChars(), startOffset, endOffset - startOffset + 1);
+        System.out.print(s);
+    }
+
+    //
+    //
+    //
+    public final static int tokenKind[] =
+    {
+        Char_CtlCharNotWS,    // 000    0x00
+        Char_CtlCharNotWS,    // 001    0x01
+        Char_CtlCharNotWS,    // 002    0x02
+        Char_CtlCharNotWS,    // 003    0x03
+        Char_CtlCharNotWS,    // 004    0x04
+        Char_CtlCharNotWS,    // 005    0x05
+        Char_CtlCharNotWS,    // 006    0x06
+        Char_CtlCharNotWS,    // 007    0x07
+        Char_CtlCharNotWS,    // 008    0x08
+        Char_HT,              // 009    0x09
+        Char_LF,              // 010    0x0A
+        Char_CtlCharNotWS,    // 011    0x0B
+        Char_FF,              // 012    0x0C
+        Char_CR,              // 013    0x0D
+        Char_CtlCharNotWS,    // 014    0x0E
+        Char_CtlCharNotWS,    // 015    0x0F
+        Char_CtlCharNotWS,    // 016    0x10
+        Char_CtlCharNotWS,    // 017    0x11
+        Char_CtlCharNotWS,    // 018    0x12
+        Char_CtlCharNotWS,    // 019    0x13
+        Char_CtlCharNotWS,    // 020    0x14
+        Char_CtlCharNotWS,    // 021    0x15
+        Char_CtlCharNotWS,    // 022    0x16
+        Char_CtlCharNotWS,    // 023    0x17
+        Char_CtlCharNotWS,    // 024    0x18
+        Char_CtlCharNotWS,    // 025    0x19
+        Char_CtlCharNotWS,    // 026    0x1A
+        Char_CtlCharNotWS,    // 027    0x1B
+        Char_CtlCharNotWS,    // 028    0x1C
+        Char_CtlCharNotWS,    // 029    0x1D
+        Char_CtlCharNotWS,    // 030    0x1E
+        Char_CtlCharNotWS,    // 031    0x1F
+        Char_Space,           // 032    0x20
+        Char_Exclamation,     // 033    0x21
+        Char_DoubleQuote,     // 034    0x22
+        Char_Sharp,           // 035    0x23
+        Char_DollarSign,      // 036    0x24
+        Char_Percent,         // 037    0x25
+        Char_Ampersand,       // 038    0x26
+        Char_SingleQuote,     // 039    0x27
+        Char_LeftParen,       // 040    0x28
+        Char_RightParen,      // 041    0x29
+        Char_Star,            // 042    0x2A
+        Char_Plus,            // 043    0x2B
+        Char_Comma,           // 044    0x2C
+        Char_Minus,           // 045    0x2D
+        Char_Dot,             // 046    0x2E
+        Char_Slash,           // 047    0x2F
+        Char_0,               // 048    0x30
+        Char_1,               // 049    0x31
+        Char_2,               // 050    0x32
+        Char_3,               // 051    0x33
+        Char_4,               // 052    0x34
+        Char_5,               // 053    0x35
+        Char_6,               // 054    0x36
+        Char_7,               // 055    0x37
+        Char_8,               // 056    0x38
+        Char_9,               // 057    0x39
+        Char_Colon,           // 058    0x3A
+        Char_SemiColon,       // 059    0x3B
+        Char_LessThan,        // 060    0x3C
+        Char_Equal,           // 061    0x3D
+        Char_GreaterThan,     // 062    0x3E
+        Char_QuestionMark,    // 063    0x3F
+        Char_AtSign,          // 064    0x40
+        Char_A,               // 065    0x41
+        Char_B,               // 066    0x42
+        Char_C,               // 067    0x43
+        Char_D,               // 068    0x44
+        Char_E,               // 069    0x45
+        Char_F,               // 070    0x46
+        Char_G,               // 071    0x47
+        Char_H,               // 072    0x48
+        Char_I,               // 073    0x49
+        Char_J,               // 074    0x4A
+        Char_K,               // 075    0x4B
+        Char_L,               // 076    0x4C
+        Char_M,               // 077    0x4D
+        Char_N,               // 078    0x4E
+        Char_O,               // 079    0x4F
+        Char_P,               // 080    0x50
+        Char_Q,               // 081    0x51
+        Char_R,               // 082    0x52
+        Char_S,               // 083    0x53
+        Char_T,               // 084    0x54
+        Char_U,               // 085    0x55
+        Char_V,               // 086    0x56
+        Char_W,               // 087    0x57
+        Char_X,               // 088    0x58
+        Char_Y,               // 089    0x59
+        Char_Z,               // 090    0x5A
+        Char_LeftBracket,     // 091    0x5B
+        Char_BackSlash,       // 092    0x5C
+        Char_RightBracket,    // 093    0x5D
+        Char_Caret,           // 094    0x5E
+        Char__,               // 095    0x5F
+        Char_BackQuote,       // 096    0x60
+        Char_a,               // 097    0x61
+        Char_b,               // 098    0x62
+        Char_c,               // 099    0x63
+        Char_d,               // 100    0x64
+        Char_e,               // 101    0x65
+        Char_f,               // 102    0x66
+        Char_g,               // 103    0x67
+        Char_h,               // 104    0x68
+        Char_i,               // 105    0x69
+        Char_j,               // 106    0x6A
+        Char_k,               // 107    0x6B
+        Char_l,               // 108    0x6C
+        Char_m,               // 109    0x6D
+        Char_n,               // 110    0x6E
+        Char_o,               // 111    0x6F
+        Char_p,               // 112    0x70
+        Char_q,               // 113    0x71
+        Char_r,               // 114    0x72
+        Char_s,               // 115    0x73
+        Char_t,               // 116    0x74
+        Char_u,               // 117    0x75
+        Char_v,               // 118    0x76
+        Char_w,               // 119    0x77
+        Char_x,               // 120    0x78
+        Char_y,               // 121    0x79
+        Char_z,               // 122    0x7A
+        Char_LeftBrace,       // 123    0x7B
+        Char_VerticalBar,     // 124    0x7C
+        Char_RightBrace,      // 125    0x7D
+        Char_Tilde,           // 126    0x7E
+        Char_CtlCharNotWS,    // 127    0x7F
+
+        Char_Acute,           // for the acute accent 0xb4
+        Char_AfterASCIINotAcute,  // for all chars in range 0x80..0xfffe excluding the acute accent
+        Char_EOF              // for '\uffff' or 65535 
+    };
+            
+    @Override public final int getKind(int i)  // Classify character at ith location
+    {
+        char c = (i >= getStreamLength() ? '\uffff' : getCharValue(i));
+        return (c < 128)? // ASCII Character
+                  tokenKind[c] :
+                  (c == '\uffff')?
+                       Char_EOF :
+                       (c == '\u00b4')?
+                       Char_Acute :
+                           Char_AfterASCIINotAcute;
+    }
+
+    public void ruleAction( int ruleNumber)
+    {
+        switch(ruleNumber)
+        {
+ 
+            //
+            // Rule 1:  Token ::= Identifier
+            //
+            case 1: { 
+				checkForKeyWord();
+	            break;
+            }
+	 
+            //
+            // Rule 2:  Token ::= EscapedSQ
+            //
+            case 2: { 
+				makeToken(TK_STRING_LITERAL);
+	            break;
+            }
+	 
+            //
+            // Rule 3:  Token ::= SingleQuote SLNotSQ SingleQuote
+            //
+            case 3: { 
+				makeToken(TK_STRING_LITERAL);
+	            break;
+            }
+	 
+            //
+            // Rule 4:  Token ::= Acute SLNotSQOpt Acute
+            //
+            case 4: { 
+				makeToken(TK_STRING_LITERAL);
+	            break;
+            }
+	 
+            //
+            // Rule 5:  Token ::= BackQuote SLNotSQOpt Acute
+            //
+            case 5: { 
+				makeToken(TK_STRING_LITERAL);
+	            break;
+            }
+	 
+            //
+            // Rule 6:  Token ::= IntegerLiteral
+            //
+            case 6: { 
+				makeToken(TK_INTEGER_LITERAL);
+	            break;
+            }
+	 
+            //
+            // Rule 7:  Token ::= RealLiteral
+            //
+            case 7: { 
+				makeToken(TK_REAL_LITERAL);
+	            break;
+            }
+	 
+            //
+            // Rule 8:  Token ::= NumericOperation
+            //
+            case 8: { 
+				makeToken(TK_NUMERIC_OPERATION);
+	            break;
+            }
+	 
+            //
+            // Rule 9:  Token ::= IntegerRangeStart
+            //
+            case 9: { 
+				makeToken(TK_INTEGER_RANGE_START);
+	            break;
+            }
+	 
+            //
+            // Rule 10:  Token ::= SLC
+            //
+            case 10: { 
+				skipToken();
+	            break;
+            }
+	 
+            //
+            // Rule 11:  Token ::= / * Inside Stars /
+            //
+            case 11: { 
+                skipToken();
+                break;
+            }
+     
+            //
+            // Rule 12:  Token ::= WS
+            //
+            case 12: { 
+				skipToken();
+	            break;
+            }
+	 
+            //
+            // Rule 13:  Token ::= +
+            //
+            case 13: { 
+				makeToken(TK_PLUS);
+	            break;
+            }
+	 
+            //
+            // Rule 14:  Token ::= -
+            //
+            case 14: { 
+				makeToken(TK_MINUS);
+	            break;
+            }
+	 
+            //
+            // Rule 15:  Token ::= *
+            //
+            case 15: { 
+				makeToken(TK_MULTIPLY);
+	            break;
+            }
+	 
+            //
+            // Rule 16:  Token ::= /
+            //
+            case 16: { 
+				makeToken(TK_DIVIDE);
+	            break;
+            }
+	 
+            //
+            // Rule 17:  Token ::= (
+            //
+            case 17: { 
+				makeToken(TK_LPAREN);
+	            break;
+            }
+	 
+            //
+            // Rule 18:  Token ::= )
+            //
+            case 18: { 
+				makeToken(TK_RPAREN);
+	            break;
+            }
+	 
+            //
+            // Rule 19:  Token ::= >
+            //
+            case 19: { 
+				makeToken(TK_GREATER);
+	            break;
+            }
+	 
+            //
+            // Rule 20:  Token ::= <
+            //
+            case 20: { 
+				makeToken(TK_LESS);
+	            break;
+            }
+	 
+            //
+            // Rule 21:  Token ::= =
+            //
+            case 21: { 
+				makeToken(TK_EQUAL);
+	            break;
+            }
+	 
+            //
+            // Rule 22:  Token ::= > =
+            //
+            case 22: { 
+				makeToken(TK_GREATER_EQUAL);
+	            break;
+            }
+	 
+            //
+            // Rule 23:  Token ::= < =
+            //
+            case 23: { 
+				makeToken(TK_LESS_EQUAL);
+	            break;
+            }
+	 
+            //
+            // Rule 24:  Token ::= < >
+            //
+            case 24: { 
+				makeToken(TK_NOT_EQUAL);
+	            break;
+            }
+	 
+            //
+            // Rule 25:  Token ::= [
+            //
+            case 25: { 
+				makeToken(TK_LBRACKET);
+	            break;
+            }
+	 
+            //
+            // Rule 26:  Token ::= ]
+            //
+            case 26: { 
+				makeToken(TK_RBRACKET);
+	            break;
+            }
+	 
+            //
+            // Rule 27:  Token ::= {
+            //
+            case 27: { 
+				makeToken(TK_LBRACE);
+	            break;
+            }
+	 
+            //
+            // Rule 28:  Token ::= }
+            //
+            case 28: { 
+				makeToken(TK_RBRACE);
+	            break;
+            }
+	 
+            //
+            // Rule 29:  Token ::= - >
+            //
+            case 29: { 
+				makeToken(TK_ARROW);
+	            break;
+            }
+	 
+            //
+            // Rule 30:  Token ::= |
+            //
+            case 30: { 
+				makeToken(TK_BAR);
+	            break;
+            }
+	 
+            //
+            // Rule 31:  Token ::= ,
+            //
+            case 31: { 
+				makeToken(TK_COMMA);
+	            break;
+            }
+	 
+            //
+            // Rule 32:  Token ::= :
+            //
+            case 32: { 
+				makeToken(TK_COLON);
+	            break;
+            }
+	 
+            //
+            // Rule 33:  Token ::= : :
+            //
+            case 33: { 
+				makeToken(TK_COLONCOLON);
+	            break;
+            }
+	 
+            //
+            // Rule 34:  Token ::= ;
+            //
+            case 34: { 
+				makeToken(TK_SEMICOLON);
+	            break;
+            }
+	 
+            //
+            // Rule 35:  Token ::= .
+            //
+            case 35: { 
+				makeToken(TK_DOT);
+	            break;
+            }
+	 
+            //
+            // Rule 36:  Token ::= . .
+            //
+            case 36: { 
+				makeToken(TK_DOTDOT);
+	            break;
+            }
+	 
+            //
+            // Rule 37:  Token ::= @ p r e
+            //
+            case 37: { 
+				makeToken(TK_ATPRE);
+	            break;
+            }
+	 
+            //
+            // Rule 38:  Token ::= ^
+            //
+            case 38: { 
+				makeToken(TK_CARET);
+	            break;
+            }
+	 
+            //
+            // Rule 39:  Token ::= ^ ^
+            //
+            case 39: { 
+				makeToken(TK_CARETCARET);
+	            break;
+            }
+	 
+            //
+            // Rule 40:  Token ::= ?
+            //
+            case 40: { 
+				makeToken(TK_QUESTIONMARK);
+	            break;
+            }
+	
+    
+            default:
+                break;
+        }
+        return;
+    }
+}
+
Index: src/org/eclipse/ocl/parser/backtracking/OCLParserErrors.java
===================================================================
RCS file: src/org/eclipse/ocl/parser/backtracking/OCLParserErrors.java
diff -N src/org/eclipse/ocl/parser/backtracking/OCLParserErrors.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ src/org/eclipse/ocl/parser/backtracking/OCLParserErrors.java	1 Jan 1970 00:00:00 -0000
@@ -0,0 +1,33 @@
+package org.eclipse.ocl.parser.backtracking;
+
+/**
+ * @since 1.3
+ */
+public class OCLParserErrors
+{
+	public static final String EXTRA_TOKENS = "\"\""; //$NON-NLS-1$
+	public static final String MISSING_AT_PRE = "\"@pre\" or \"(\""; //$NON-NLS-1$
+	public static final String MISSING_COLON = "\":\""; //$NON-NLS-1$
+	public static final String MISSING_CONTEXT = "\"context\""; //$NON-NLS-1$
+	public static final String MISSING_ELSE_ENDIF = "\"else <expr> endif\""; //$NON-NLS-1$
+	public static final String MISSING_ENDIF = "\"endif\""; //$NON-NLS-1$
+	public static final String MISSING_ENDPACKAGE = "\"endpackage\""; //$NON-NLS-1$
+	public static final String MISSING_EQUALS = "\"=\""; //$NON-NLS-1$
+	public static final String MISSING_EXPR = "\"<expr>\""; //$NON-NLS-1$
+	public static final String MISSING_IDENTIFIER = "\"<identifier>\""; //$NON-NLS-1$
+	public static final String MISSING_INV_OR_DEF = "\"inv\" or \"def\""; //$NON-NLS-1$
+	public static final String MISSING_LBRACE = "\"{\""; //$NON-NLS-1$
+	public static final String MISSING_LPAREN = "\"(\""; //$NON-NLS-1$
+	public static final String MISSING_MESSAGE_ARGUMENTS = "\"( <comma separated message arguments> )\""; //$NON-NLS-1$
+	public static final String MISSING_PARAMETER = "\"<parameter>\""; //$NON-NLS-1$
+	public static final String MISSING_PARAMETERS = "\"<variable>\""; //$NON-NLS-1$
+	public static final String MISSING_PATH_NAME = "\"<pathName>\""; //$NON-NLS-1$
+	public static final String MISSING_RBRACK = "\"]\""; //$NON-NLS-1$
+	public static final String MISSING_RPAREN = "\")\""; //$NON-NLS-1$
+	public static final String MISSING_SIMPLE_NAME = "\"<simpleName>\""; //$NON-NLS-1$
+	public static final String MISSING_SIMPLE_NAME_OPT = "\"<simpleName>\" or \"<empty>\""; //$NON-NLS-1$
+	public static final String MISSING_THEN_ELSE = "\"then <expr> else <expr>\""; //$NON-NLS-1$
+	public static final String MISSING_THEN_ELSE_ENDIF = "\"then <expr> else <expr> endif\""; //$NON-NLS-1$
+	public static final String MISSING_VARIABLE_TYPE = "\": <type>\""; //$NON-NLS-1$
+	public static final String MISSING_VARIABLES = "\"<comma separated variables>\""; //$NON-NLS-1$
+}
Index: src/org/eclipse/ocl/parser/backtracking/OCLBacktrackingKWLexer.l
===================================================================
RCS file: src/org/eclipse/ocl/parser/backtracking/OCLBacktrackingKWLexer.l
diff -N src/org/eclipse/ocl/parser/backtracking/OCLBacktrackingKWLexer.l
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ src/org/eclipse/ocl/parser/backtracking/OCLBacktrackingKWLexer.l	1 Jan 1970 00:00:00 -0000
@@ -0,0 +1,77 @@
+
+Options in effect for ./OCLBacktrackingKWLexer.g:
+
+    ACTION-BLOCK=("OCLBacktrackingKWLexer.java","/.","./")
+
+    AST-DIRECTORY=""  AST-TYPE="Ast"  NOATTRIBUTES  NOAUTOMATIC-AST  NOBACKTRACK
+    BYTE  CONFLICTS  DAT-DIRECTORY="./"  
+    DAT-FILE="OCLBacktrackingKWLexerdcl.data"  
+    DCL-FILE="OCLBacktrackingKWLexerdcl.java"  NODEBUG  
+    DEF-FILE="OCLBacktrackingKWLexerdef.java"  NOEDIT  NOERROR-MAPS  ESCAPE='$'
+    EXPORT-TERMINALS=("OCLBacktrackingParsersym.java","TK_","")  
+    EXTENDS-PARSETABLE  FACTORY="new "  FILE-PREFIX="OCLBacktrackingKWLexer"  
+    NOFIRST  NOFOLLOW  NOGOTO-DEFAULT  GRM-FILE="./OCLBacktrackingKWLexer.g"  
+    IMP-FILE="OCLBacktrackingKWLexerimp.java"  
+    INCLUDE-DIRECTORY=".;..;../../lpg"  NOLIST  MARGIN=4  MAX-CASES=1024  
+    NAMES=OPTIMIZED  NONT-CHECK  OR_MARKER='|'  
+    PACKAGE="org.eclipse.ocl.parser.backtracking"  NOPARENT-SAVE  
+    PARSETABLE-INTERFACES="lpg.lpgjavaruntime.ParseTable"  PREFIX="Char_"  
+    PRIORITY  PROGRAMMING_LANGUAGE=JAVA  
+    PRS-FILE="OCLBacktrackingKWLexerprs.java"  NOQUIET  READ-REDUCE  
+    REMAP-TERMINALS  NOSCOPES  NOSERIALIZE  NOSHIFT-DEFAULT  
+    NOSINGLE-PRODUCTIONS  SLR  NOSOFT-KEYWORDS  NOSTATES  SUFFIX=""  
+    SYM-FILE="OCLBacktrackingKWLexersym.java"  
+    TAB-FILE="OCLBacktrackingKWLexer.t"  TABLE  
+    TEMPLATE="../../lpg/KeywordTemplateD.g"  TRACE=CONFLICTS  NOVARIABLES  
+    NOVERBOSE  NOVISITOR  VISITOR-TYPE="Visitor"  WARNINGS  NOXREF  
+
+../OCLKWLexer.g:167:9:167:11:3075:3077: WARNING:Respecification of the eof symbol
+The macro "$Id" used in file ../OCLKWLexer.g at line 72 is undefined. No susbtitution made
+The macro "$" used in file ../OCLKWLexer.g at line 72 is undefined. No susbtitution made
+The macro "$" used in file ../../lpg/KWLexerMap.g at line 10 is undefined. No susbtitution made
+*** The following Terminals are useless: 
+        DollarSign  z  D  E  F  G  H  J  L  P  Q  W  X  Y  Z  
+
+
+
+./OCLBacktrackingKWLexer.g is SLR(1).
+
+
+Number of Terminals: 54
+Number of Nonterminals: 1
+Number of Productions: 64
+Number of Items: 467
+Number of States: 256
+Number of Shift actions: 254
+Number of Goto actions: 1
+Number of Shift/Reduce actions: 61
+Number of Goto/Reduce actions: 0
+Number of Reduce actions: 3
+Number of Shift-Reduce conflicts: 0
+Number of Reduce-Reduce conflicts: 0
+
+Number of entries in base Action Table: 257
+Additional space required for compaction of Action Table: 0.3%
+
+Number of unique terminal states: 256
+Number of Shift actions saved by merging: 0
+Number of Conflict points saved by merging: 0
+Number of Reduce actions saved by merging: 0
+Number of Reduce saved by default: 2
+
+Number of entries in Terminal Action Table: 572
+Additional space required for compaction of Terminal Table: 2.0%
+
+Actions in Compressed Tables:
+     Number of Shifts: 254
+     Number of Shift/Reduces: 61
+     Number of Gotos: 1
+     Number of Goto/Reduces: 0
+     Number of Reduces: 1
+     Number of Defaults: 2
+
+Parsing Tables storage:
+    Storage required for BASE_CHECK: 64 Bytes
+    Storage required for BASE_ACTION: 646 Bytes
+    Storage required for TERM_CHECK: 636 Bytes
+    Storage required for TERM_ACTION: 1170 Bytes
Index: src/org/eclipse/ocl/parser/backtracking/OCLBacktrackingLexer.g
===================================================================
RCS file: src/org/eclipse/ocl/parser/backtracking/OCLBacktrackingLexer.g
diff -N src/org/eclipse/ocl/parser/backtracking/OCLBacktrackingLexer.g
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ src/org/eclipse/ocl/parser/backtracking/OCLBacktrackingLexer.g	1 Jan 1970 00:00:00 -0000
@@ -0,0 +1,41 @@
+--/**
+-- * <copyright>
+-- *
+-- * Copyright (c) 2008 Eclipse.org and others.
+-- * All rights reserved.   This program and the accompanying materials
+-- * are made available under the terms of the Eclipse Public License v1.0
+-- * which accompanies this distribution, and is available at
+-- * http://www.eclipse.org/legal/epl-v10.html
+-- *
+-- * Contributors:
+-- *   IBM - Initial API and implementation
+-- *   E.D.Willink - Lexer and Parser refactoring to support extensibility and flexible error handling
+-- *
+-- * </copyright>
+-- *
+-- * $Id: OCL_v200811051638.patch,v 1.1 2008/11/19 21:26:34 ewillink Exp $
+-- */
+--
+-- The OCL Backtracking Lexer, which is nominally identical to the
+-- normal Lexer, however the extra ERROR_TOKEN symbol makes it difficult
+-- to share reliably.
+--
+
+%options escape=$
+%options la=2
+%options fp=OCLBacktrackingLexer,prefix=Char_
+%options single-productions
+%options noserialize
+%options package=org.eclipse.ocl.parser.backtracking
+%options template=../../lpg/LexerTemplateD.g
+%options filter=OCLBacktrackingKWLexer.g
+%options export_terminals=("OCLBacktrackingParsersym.java", "TK_")
+%options include_directory="..;../../lpg"
+
+$Include
+	OCLLexer.g
+$End
+
+$Define
+	$kw_lexer_class /.OCLBacktrackingKWLexer./
+$End
Index: src/org/eclipse/ocl/parser/backtracking/OCLBacktrackingParsersym.java
===================================================================
RCS file: src/org/eclipse/ocl/parser/backtracking/OCLBacktrackingParsersym.java
diff -N src/org/eclipse/ocl/parser/backtracking/OCLBacktrackingParsersym.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ src/org/eclipse/ocl/parser/backtracking/OCLBacktrackingParsersym.java	1 Jan 1970 00:00:00 -0000
@@ -0,0 +1,243 @@
+/**
+* <copyright>
+*
+* Copyright (c) 2005, 2008 IBM Corporation, Zeligsoft Inc., and others.
+* All rights reserved.   This program and the accompanying materials
+* are made available under the terms of the Eclipse Public License v1.0
+* which accompanies this distribution, and is available at
+* http://www.eclipse.org/legal/epl-v10.html
+*
+* Contributors:
+*   IBM - Initial API and implementation
+*   E.D.Willink - Elimination of some shift-reduce conflicts
+*   E.D.Willink - Remove unnecessary warning suppression
+*   E.D.Willink - Bugs 225493, 243976
+*   Zeligsoft - Bug 243976
+*
+* </copyright>
+*
+* $Id: OCL_v200811051638.patch,v 1.1 2008/11/19 21:26:34 ewillink Exp $
+*/
+
+package org.eclipse.ocl.parser.backtracking;
+
+/**
+ * @noimplement This interface is not intended to be implemented by clients.
+ */
+@SuppressWarnings("nls")
+public interface OCLBacktrackingParsersym {
+	/**
+	 * Token kind codes.
+	 * 
+	 * @noreference These constants are not intended to be referenced by clients.
+	 */
+    public final static int
+      TK_NUMERIC_OPERATION = 61,
+      TK_STRING_LITERAL = 62,
+      TK_INTEGER_LITERAL = 63,
+      TK_REAL_LITERAL = 64,
+      TK_PLUS = 28,
+      TK_MINUS = 29,
+      TK_MULTIPLY = 8,
+      TK_DIVIDE = 9,
+      TK_GREATER = 10,
+      TK_LESS = 11,
+      TK_EQUAL = 5,
+      TK_GREATER_EQUAL = 12,
+      TK_LESS_EQUAL = 13,
+      TK_NOT_EQUAL = 7,
+      TK_LPAREN = 2,
+      TK_RPAREN = 3,
+      TK_LBRACE = 94,
+      TK_RBRACE = 74,
+      TK_LBRACKET = 95,
+      TK_RBRACKET = 79,
+      TK_ARROW = 85,
+      TK_BAR = 70,
+      TK_COMMA = 31,
+      TK_COLON = 37,
+      TK_COLONCOLON = 80,
+      TK_SEMICOLON = 81,
+      TK_DOT = 86,
+      TK_DOTDOT = 87,
+      TK_ATPRE = 75,
+      TK_CARET = 88,
+      TK_CARETCARET = 89,
+      TK_QUESTIONMARK = 96,
+      TK_self = 30,
+      TK_inv = 76,
+      TK_pre = 71,
+      TK_post = 72,
+      TK_context = 77,
+      TK_package = 97,
+      TK_endpackage = 82,
+      TK_def = 78,
+      TK_if = 69,
+      TK_then = 90,
+      TK_else = 91,
+      TK_endif = 83,
+      TK_and = 25,
+      TK_or = 26,
+      TK_xor = 27,
+      TK_not = 53,
+      TK_implies = 92,
+      TK_let = 68,
+      TK_in = 84,
+      TK_true = 65,
+      TK_false = 66,
+      TK_body = 6,
+      TK_derive = 14,
+      TK_init = 15,
+      TK_null = 38,
+      TK_attr = 100,
+      TK_oper = 101,
+      TK_Set = 32,
+      TK_Bag = 33,
+      TK_Sequence = 34,
+      TK_Collection = 35,
+      TK_OrderedSet = 36,
+      TK_iterate = 39,
+      TK_forAll = 40,
+      TK_exists = 41,
+      TK_isUnique = 42,
+      TK_any = 43,
+      TK_one = 44,
+      TK_collect = 45,
+      TK_select = 46,
+      TK_reject = 47,
+      TK_collectNested = 48,
+      TK_sortedBy = 49,
+      TK_closure = 50,
+      TK_oclIsKindOf = 54,
+      TK_oclIsTypeOf = 55,
+      TK_oclAsType = 56,
+      TK_oclIsNew = 57,
+      TK_oclIsUndefined = 58,
+      TK_oclIsInvalid = 59,
+      TK_oclIsInState = 60,
+      TK_allInstances = 51,
+      TK_String = 16,
+      TK_Integer = 17,
+      TK_UnlimitedNatural = 18,
+      TK_Real = 19,
+      TK_Boolean = 20,
+      TK_Tuple = 52,
+      TK_OclAny = 21,
+      TK_OclVoid = 22,
+      TK_Invalid = 23,
+      TK_OclMessage = 24,
+      TK_OclInvalid = 67,
+      TK_EOF_TOKEN = 73,
+      TK_IDENTIFIER = 4,
+      TK_INTEGER_RANGE_START = 98,
+      TK_ERROR_TOKEN = 1,
+      TK_ERROR_simpleNameCS = 99,
+      TK_ERROR_Garbage = 93;
+
+      public final static String orderedTerminalSymbols[] = {
+                 "",
+                 "ERROR_TOKEN",
+                 "LPAREN",
+                 "RPAREN",
+                 "IDENTIFIER",
+                 "EQUAL",
+                 "body",
+                 "NOT_EQUAL",
+                 "MULTIPLY",
+                 "DIVIDE",
+                 "GREATER",
+                 "LESS",
+                 "GREATER_EQUAL",
+                 "LESS_EQUAL",
+                 "derive",
+                 "init",
+                 "String",
+                 "Integer",
+                 "UnlimitedNatural",
+                 "Real",
+                 "Boolean",
+                 "OclAny",
+                 "OclVoid",
+                 "Invalid",
+                 "OclMessage",
+                 "and",
+                 "or",
+                 "xor",
+                 "PLUS",
+                 "MINUS",
+                 "self",
+                 "COMMA",
+                 "Set",
+                 "Bag",
+                 "Sequence",
+                 "Collection",
+                 "OrderedSet",
+                 "COLON",
+                 "null",
+                 "iterate",
+                 "forAll",
+                 "exists",
+                 "isUnique",
+                 "any",
+                 "one",
+                 "collect",
+                 "select",
+                 "reject",
+                 "collectNested",
+                 "sortedBy",
+                 "closure",
+                 "allInstances",
+                 "Tuple",
+                 "not",
+                 "oclIsKindOf",
+                 "oclIsTypeOf",
+                 "oclAsType",
+                 "oclIsNew",
+                 "oclIsUndefined",
+                 "oclIsInvalid",
+                 "oclIsInState",
+                 "NUMERIC_OPERATION",
+                 "STRING_LITERAL",
+                 "INTEGER_LITERAL",
+                 "REAL_LITERAL",
+                 "true",
+                 "false",
+                 "OclInvalid",
+                 "let",
+                 "if",
+                 "BAR",
+                 "pre",
+                 "post",
+                 "EOF_TOKEN",
+                 "RBRACE",
+                 "ATPRE",
+                 "inv",
+                 "context",
+                 "def",
+                 "RBRACKET",
+                 "COLONCOLON",
+                 "SEMICOLON",
+                 "endpackage",
+                 "endif",
+                 "in",
+                 "ARROW",
+                 "DOT",
+                 "DOTDOT",
+                 "CARET",
+                 "CARETCARET",
+                 "then",
+                 "else",
+                 "implies",
+                 "ERROR_Garbage",
+                 "LBRACE",
+                 "LBRACKET",
+                 "QUESTIONMARK",
+                 "package",
+                 "INTEGER_RANGE_START",
+                 "ERROR_simpleNameCS",
+                 "attr",
+                 "oper"
+             };
+
+    public final static boolean isValidForParser = true;
+}
Index: src/org/eclipse/ocl/parser/backtracking/OCLBacktrackingKWLexer.g
===================================================================
RCS file: src/org/eclipse/ocl/parser/backtracking/OCLBacktrackingKWLexer.g
diff -N src/org/eclipse/ocl/parser/backtracking/OCLBacktrackingKWLexer.g
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ src/org/eclipse/ocl/parser/backtracking/OCLBacktrackingKWLexer.g	1 Jan 1970 00:00:00 -0000
@@ -0,0 +1,34 @@
+--/**
+-- * <copyright>
+-- *
+-- * Copyright (c) 2008 IBM Corporation and others.
+-- * All rights reserved.   This program and the accompanying materials
+-- * are made available under the terms of the Eclipse Public License v1.0
+-- * which accompanies this distribution, and is available at
+-- * http://www.eclipse.org/legal/epl-v10.html
+-- *
+-- * Contributors:
+-- *   IBM - Initial API and implementation
+-- *   E.D.Willink - Lexer and Parser refactoring to support extensibility and flexible error handling
+-- *
+-- * </copyright>
+-- *
+-- * $Id: OCL_v200811051638.patch,v 1.1 2008/11/19 21:26:34 ewillink Exp $
+-- */
+--
+-- The OCL Backtracking KeyWord Lexer, which is nominally identical to the
+-- normal KeyWord Lexer, however the extra ERROR_TOKEN symbol makes it difficult
+-- to share reliably.
+--
+
+%Options slr
+%Options fp=OCLBacktrackingKWLexer,prefix=Char_
+%options noserialize
+%options package=org.eclipse.ocl.parser.backtracking
+%options template=../../lpg/KeywordTemplateD.g
+%options export_terminals=("OCLBacktrackingParsersym.java", "TK_")
+%options include_directory="..;../../lpg"
+
+$Include
+	OCLKWLexer.g
+$End
Index: src/org/eclipse/ocl/parser/backtracking/OCLParserErrors.g
===================================================================
RCS file: src/org/eclipse/ocl/parser/backtracking/OCLParserErrors.g
diff -N src/org/eclipse/ocl/parser/backtracking/OCLParserErrors.g
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ src/org/eclipse/ocl/parser/backtracking/OCLParserErrors.g	1 Jan 1970 00:00:00 -0000
@@ -0,0 +1,211 @@
+--/**
+-- * <copyright>
+-- *
+-- * Copyright (c) 2008 Eclipse.org and others.
+-- * All rights reserved.   This program and the accompanying materials
+-- * are made available under the terms of the Eclipse Public License v1.0
+-- * which accompanies this distribution, and is available at
+-- * http://www.eclipse.org/legal/epl-v10.html
+-- *
+-- * Contributors:
+-- *   E.D. Willink - Initial API and implementation
+-- *
+-- * </copyright>
+-- *
+-- * $Id: OCL_v200811051638.patch,v 1.1 2008/11/19 21:26:34 ewillink Exp $
+-- */
+--
+-- Additional ERROR_TOKEN rules for The OCL Parser
+--
+
+$Include
+	OCLParser.g
+$End
+
+$Include
+	EssentialOCLErrors.g
+$End
+
+$Rules
+
+	classifierContextDeclCS ::= context pathNameCS ERROR_TOKEN
+		/.$BeginJava
+					reportErrorTokenMessage($getToken(3), OCLParserErrors.MISSING_INV_OR_DEF);
+					CSTNode result = createClassifierContextDeclCS(
+							(PathNameCS)$getSym(2),
+							new BasicEList<InvOrDefCS>()
+						);
+					setOffsets(result, getIToken($getToken(1)), getIToken($getToken(3)));
+					$setResult(result);
+		  $EndJava
+		./
+
+	contextDeclCS99 ::= ERROR_TOKEN
+		/.$BeginJava
+					reportErrorTokenMessage($getToken(1), OCLParserErrors.MISSING_CONTEXT);
+					$setResult(new BasicEList());
+		  $EndJava
+		./
+		
+	defExpressionCS ::= typedVariableCS ERROR_TOKEN
+		/.$BeginJava
+					reportErrorTokenMessage($getToken(2), OCLParserErrors.MISSING_EQUALS);
+					VariableCS variableCS = (VariableCS)$getSym(1);
+					CSTNode result = createDefExpressionCS(
+							variableCS,
+							null,
+							null
+						);
+					setOffsets(result, variableCS, getIToken($getToken(2)));
+					$setResult(result);
+		  $EndJava
+		./
+	defExpressionCS ::= IDENTIFIER ERROR_Colon
+		/.$BeginJava
+					VariableCS variableCS = createVariableCS(
+								getTokenText($getToken(1)),
+								null,
+								null
+							);
+					setOffsets(variableCS, getIToken($getToken(1)), (CSTNode)$getSym(3));
+					CSTNode result = createDefExpressionCS(
+							variableCS,
+							null,
+							null
+						);
+					setOffsets(result, variableCS, getIToken($getToken(2)));
+					$setResult(result);
+		  $EndJava
+		./
+
+	initOrDerValueCS ::= initOrDerValueCSopt init ERROR_Colon
+		/.$BeginJava
+					CSTNode result = createInitValueCS(
+							(InitOrDerValueCS)$getSym(1),
+							null
+						);
+					if ($getSym(1) != null) {
+						setOffsets(result, (CSTNode)$getSym(1), getIToken($getToken(3)));
+					} else {
+						setOffsets(result, getIToken($getToken(2)), getIToken($getToken(3)));
+					}
+					$setResult(result);
+		  $EndJava
+		./
+	initOrDerValueCS ::= initOrDerValueCSopt derive ERROR_Colon
+		/.$BeginJava
+					CSTNode result = createDerValueCS(
+							(InitOrDerValueCS)$getSym(1),
+							null
+						);
+					if ($getSym(1) != null) {
+						setOffsets(result, (CSTNode)$getSym(1), getIToken($getToken(3)));
+					} else {
+						setOffsets(result, getIToken($getToken(2)), getIToken($getToken(3)));
+					}
+					$setResult(result);
+		  $EndJava
+		./
+		
+	invOrDefCS ::= inv simpleNameCS ERROR_Colon
+		/.$BeginJava
+					CSTNode result = createInvCS(
+							(SimpleNameCS)$getSym(2),
+							null
+						);
+					setOffsets(result, getIToken($getToken(1)), getIToken($getToken(3)));
+					$setResult(result);
+		  $EndJava
+		./	
+	invOrDefCS ::= def simpleNameCS ERROR_Colon
+		/.$BeginJava
+					CSTNode result = createDefCS(
+							(SimpleNameCS)$getSym(2),
+							null
+						);
+					setOffsets(result, getIToken($getToken(1)), getIToken($getToken(3)));
+					$setResult(result);
+		  $EndJava
+		./
+
+	packageDeclarationCS ::= package pathNameCS contextDeclCSmopt ERROR_Empty endpackage
+		/.$BeginJava
+					CSTNode result = createPackageDeclarationCS(
+							(PathNameCS)$getSym(2),
+							(EList)$getSym(3)
+						);
+					setOffsets(result, getIToken($getToken(1)), getIToken($getToken(5)));
+					$setResult(result);
+		  $EndJava
+		./
+	packageDeclarationCS ::= package pathNameCS contextDeclCSmopt ERROR_TOKEN
+		/.$BeginJava
+					reportErrorTokenMessage($getToken(4), OCLParserErrors.MISSING_ENDPACKAGE);
+					CSTNode result = createPackageDeclarationCS(
+							(PathNameCS)$getSym(2),
+							(EList)$getSym(3)
+						);
+					setOffsets(result, getIToken($getToken(1)), getIToken($getToken(4)));
+					$setResult(result);
+		  $EndJava
+		./
+	packageDeclarationCS ::= package ERROR_PathNameCS
+		/.$BeginJava
+					CSTNode result = createPackageDeclarationCS(
+							(PathNameCS)$getSym(2),
+							new BasicEList()
+						);
+					setOffsets(result, getIToken($getToken(1)), getIToken($getToken(2)));
+					$setResult(result);
+		  $EndJava
+		./
+		
+	prePostOrBodyDeclCS ::= pre simpleNameCS ERROR_Colon
+		/.$BeginJava
+					CSTNode result = createPrePostOrBodyDeclCS(
+							PrePostOrBodyEnum.PRE_LITERAL,
+							(SimpleNameCS)$getSym(2),
+							createInvalidLiteralExpCS(getTokenText($getToken(3)))
+						);
+					setOffsets(result, getIToken($getToken(1)), getIToken($getToken(3)));
+					$setResult(result);
+		  $EndJava
+		./
+	prePostOrBodyDeclCS ::= post simpleNameCS ERROR_Colon
+		/.$BeginJava
+					CSTNode result = createPrePostOrBodyDeclCS(
+							PrePostOrBodyEnum.POST_LITERAL,
+							(SimpleNameCS)$getSym(2),
+							createInvalidLiteralExpCS(getTokenText($getToken(3)))
+						);
+					setOffsets(result, getIToken($getToken(1)), getIToken($getToken(3)));
+					$setResult(result);
+		  $EndJava
+		./
+	prePostOrBodyDeclCS ::= body simpleNameCS ERROR_Colon
+		/.$BeginJava
+					CSTNode result = createPrePostOrBodyDeclCS(
+							PrePostOrBodyEnum.BODY_LITERAL,
+							(SimpleNameCS)$getSym(2),
+							createInvalidLiteralExpCS(getTokenText($getToken(3)))
+						);
+					setOffsets(result, getIToken($getToken(1)), getIToken($getToken(3)));
+					$setResult(result);
+		  $EndJava
+		./
+		
+	propertyContextCS ::= context pathNameCS '::' ERROR_SimpleNameCS
+		/.$BeginJava
+					SimpleNameCS simpleNameCS = (SimpleNameCS)$getSym(4);
+					CSTNode result = createPropertyContextCS(
+							(PathNameCS)$getSym(2),
+							simpleNameCS,
+							null,
+							null
+						);
+					setOffsets(result, getIToken($getToken(1)), simpleNameCS);
+					$setResult(result);
+		  $EndJava
+		./
+		
+$End
Index: src/org/eclipse/ocl/parser/backtracking/OCLBacktrackingParser.java
===================================================================
RCS file: src/org/eclipse/ocl/parser/backtracking/OCLBacktrackingParser.java
diff -N src/org/eclipse/ocl/parser/backtracking/OCLBacktrackingParser.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ src/org/eclipse/ocl/parser/backtracking/OCLBacktrackingParser.java	1 Jan 1970 00:00:00 -0000
@@ -0,0 +1,2867 @@
+/**
+* <copyright>
+*
+* Copyright (c) 2005, 2008 IBM Corporation, Zeligsoft Inc., and others.
+* All rights reserved.   This program and the accompanying materials
+* are made available under the terms of the Eclipse Public License v1.0
+* which accompanies this distribution, and is available at
+* http://www.eclipse.org/legal/epl-v10.html
+*
+* Contributors:
+*   IBM - Initial API and implementation
+*   E.D.Willink - Elimination of some shift-reduce conflicts
+*   E.D.Willink - Remove unnecessary warning suppression
+*   E.D.Willink - Bugs 225493, 243976
+*   Zeligsoft - Bug 243976
+*
+* </copyright>
+*
+* $Id: OCL_v200811051638.patch,v 1.1 2008/11/19 21:26:34 ewillink Exp $
+*/
+
+package org.eclipse.ocl.parser.backtracking;
+
+import org.eclipse.emf.common.util.BasicEList;
+import org.eclipse.emf.common.util.EList;
+import org.eclipse.ocl.cst.CSTNode;
+import org.eclipse.ocl.cst.CallExpCS;
+import org.eclipse.ocl.cst.CollectionTypeIdentifierEnum;
+import org.eclipse.ocl.cst.DotOrArrowEnum;
+import org.eclipse.ocl.cst.IntegerLiteralExpCS;
+import org.eclipse.ocl.cst.IsMarkedPreCS;
+import org.eclipse.ocl.cst.MessageExpCS;
+import org.eclipse.ocl.cst.OCLExpressionCS;
+import org.eclipse.ocl.cst.OCLMessageArgCS;
+import org.eclipse.ocl.cst.OperationCallExpCS;
+import org.eclipse.ocl.cst.PathNameCS;
+import org.eclipse.ocl.cst.SimpleNameCS;
+import org.eclipse.ocl.cst.SimpleTypeEnum;
+import org.eclipse.ocl.cst.StateExpCS;
+import org.eclipse.ocl.cst.TypeCS;
+import org.eclipse.ocl.cst.VariableCS;
+import org.eclipse.ocl.util.OCLStandardLibraryUtil;
+import org.eclipse.ocl.utilities.PredefinedType;
+
+import lpg.lpgjavaruntime.BadParseException;
+import lpg.lpgjavaruntime.BadParseSymFileException;
+import lpg.lpgjavaruntime.BacktrackingParser;
+import lpg.lpgjavaruntime.DiagnoseParser;
+import lpg.lpgjavaruntime.IToken;
+import lpg.lpgjavaruntime.Monitor;
+import lpg.lpgjavaruntime.NotBacktrackParseTableException;
+import lpg.lpgjavaruntime.ParseTable;
+import lpg.lpgjavaruntime.RuleAction;
+
+import org.eclipse.ocl.Environment;
+import org.eclipse.ocl.cst.DefExpressionCS;
+import org.eclipse.ocl.cst.InitOrDerValueCS;
+import org.eclipse.ocl.cst.InvOrDefCS;
+import org.eclipse.ocl.cst.OperationCS;
+import org.eclipse.ocl.cst.PackageDeclarationCS;
+import org.eclipse.ocl.cst.PrePostOrBodyEnum;
+
+	import org.eclipse.ocl.parser.AbstractOCLParser;
+
+public class OCLBacktrackingParser extends AbstractOCLParser implements RuleAction
+{
+	protected static ParseTable prs = new OCLBacktrackingParserprs();
+	private BacktrackingParser dtParser;
+
+	public OCLBacktrackingParser(OCLBacktrackingLexer lexer) {
+		super(lexer);
+	}
+
+	public int getEOFTokenKind() { return OCLBacktrackingParserprs.EOFT_SYMBOL; }
+
+	public Environment<?,?,?,?,?,?,?,?,?,?,?,?> getOCLEnvironment() {
+		return getLexer().getOCLEnvironment();
+	}
+	
+	@Override 
+	public OCLBacktrackingLexer getLexer() {
+		return (OCLBacktrackingLexer)super.getLexer();
+	}
+
+	public String getTokenKindName(int kind) { return OCLBacktrackingParsersym.orderedTerminalSymbols[kind]; }			
+
+	@Override
+	public String[] orderedTerminalSymbols() { return OCLBacktrackingParsersym.orderedTerminalSymbols; }
+		
+	@SuppressWarnings("nls")
+	@Override
+	public CSTNode parseTokensToCST(Monitor monitor, int error_repair_count) {
+		ParseTable prsTable = new OCLBacktrackingParserprs();
+
+		try {
+			dtParser = new BacktrackingParser(monitor, this, prsTable, this);
+		}
+		catch (NotBacktrackParseTableException e) {
+            throw new RuntimeException("****Error: Regenerate OCLBacktrackingParserprs.java with -BACKTRACK option");
+		}
+		catch (BadParseSymFileException e) {
+			throw new RuntimeException("****Error: Bad Parser Symbol File -- OCLBacktrackingParsersym.java. Regenerate OCLBacktrackingParserprs.java");
+		}
+
+		try {
+			return (CSTNode) dtParser.parse(error_repair_count);
+		}
+		catch (BadParseException e) {
+			reset(e.error_token); // point to error token
+
+			DiagnoseParser diagnoseParser = new DiagnoseParser(this, prsTable);
+			diagnoseParser.diagnose(e.error_token);
+		}
+
+		return null;
+	}
+
+    /**
+     * Initializes a concrete-syntax node's start and end offsets from the
+     * current token in the parser stream.
+     * 
+     * @param cstNode a concrete-syntax node
+     * 
+     * @since 1.2
+     */
+	protected void setOffsets(CSTNode cstNode) {
+		IToken firstToken = getIToken(dtParser.getToken(1));
+		cstNode.setStartToken(firstToken);
+		cstNode.setEndToken(firstToken);
+		cstNode.setStartOffset(firstToken.getStartOffset());
+		cstNode.setEndOffset(firstToken.getEndOffset()-1);
+	}
+
+
+
+	@SuppressWarnings("unchecked")
+	public void ruleAction(int ruleNumber)
+	{
+		switch (ruleNumber) {
+		
+ 
+			//
+			// Rule 46:  binaryName ::= binaryIdentifier
+			//
+			case 46:
+ 
+			//
+			// Rule 47:  keywordAsName ::= keywordAsIdentifier
+			//
+			case 47:
+ 
+			//
+			// Rule 48:  keywordAsName1 ::= keywordAsIdentifier1
+			//
+			case 48:
+ 
+			//
+			// Rule 49:  unaryName ::= unaryIdentifier
+			//
+			case 49: {
+				
+				SimpleNameCS result = createSimpleNameCS(
+							SimpleTypeEnum.IDENTIFIER_LITERAL,
+							getTokenText(dtParser.getToken(1))
+						);
+				setOffsets(result, getIToken(dtParser.getToken(1)));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 50:  iterateName ::= iterate
+			//
+			case 50:
+ 
+			//
+			// Rule 51:  iteratorName ::= iteratorIdentifier
+			//
+			case 51:
+ 
+			//
+			// Rule 52:  oclIsInStateName ::= oclIsInState
+			//
+			case 52: {
+				
+				SimpleNameCS result = createSimpleNameCS(
+							SimpleTypeEnum.KEYWORD_LITERAL,
+							getTokenText(dtParser.getToken(1))
+						);
+				setOffsets(result, getIToken(dtParser.getToken(1)));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 55:  operationCS1 ::= IDENTIFIER ( parametersCSopt ) : typeCSopt
+			//
+			case 55: {
+				
+				CSTNode result = createOperationCS(
+						getTokenText(dtParser.getToken(1)),
+						(EList)dtParser.getSym(3),
+						(TypeCS)dtParser.getSym(6)
+					);
+				if (dtParser.getSym(6) != null) {
+					setOffsets(result, getIToken(dtParser.getToken(1)), (CSTNode)dtParser.getSym(6));
+				} else {
+					setOffsets(result, getIToken(dtParser.getToken(1)), getIToken(dtParser.getToken(5)));
+				}
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 56:  operationCS2 ::= pathNameCS :: simpleNameCS ( parametersCSopt ) : typeCSopt
+			//
+			case 56: {
+				
+				CSTNode result = createOperationCS(
+						(PathNameCS)dtParser.getSym(1),
+						(SimpleNameCS)dtParser.getSym(3),
+						(EList)dtParser.getSym(5),
+						(TypeCS)dtParser.getSym(8)
+					);
+				if (dtParser.getSym(8) != null) {
+					setOffsets(result, (CSTNode)dtParser.getSym(1), (CSTNode)dtParser.getSym(8));
+				} else {
+					setOffsets(result, (CSTNode)dtParser.getSym(1), getIToken(dtParser.getToken(7)));
+				}
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 57:  parametersCSopt ::= $Empty
+			//
+			case 57:
+				dtParser.setSym1(new BasicEList());
+				break;
+ 
+			//
+			// Rule 59:  parametersCS ::= variableCS
+			//
+			case 59: {
+				
+				EList result = new BasicEList();
+				result.add(dtParser.getSym(1));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 60:  parametersCS ::= parametersCS , variableCS
+			//
+			case 60: {
+				
+				EList result = (EList)dtParser.getSym(1);
+				result.add(dtParser.getSym(3));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 61:  simpleNameCSopt ::= $Empty
+			//
+			case 61:
+				dtParser.setSym1(null);
+				break;
+ 
+			//
+			// Rule 67:  impliesExpCS ::= impliesExpCS implies andOrXorExpCS
+			//
+			case 67:
+ 
+			//
+			// Rule 68:  impliesWithLet ::= impliesExpCS implies andOrXorWithLet
+			//
+			case 68:
+ 
+			//
+			// Rule 71:  andOrXorExpCS ::= andOrXorExpCS and equalityExpCS
+			//
+			case 71:
+ 
+			//
+			// Rule 72:  andOrXorExpCS ::= andOrXorExpCS or equalityExpCS
+			//
+			case 72:
+ 
+			//
+			// Rule 73:  andOrXorExpCS ::= andOrXorExpCS xor equalityExpCS
+			//
+			case 73:
+ 
+			//
+			// Rule 74:  andOrXorWithLet ::= andOrXorExpCS and equalityWithLet
+			//
+			case 74:
+ 
+			//
+			// Rule 75:  andOrXorWithLet ::= andOrXorExpCS or equalityWithLet
+			//
+			case 75:
+ 
+			//
+			// Rule 76:  andOrXorWithLet ::= andOrXorExpCS xor equalityWithLet
+			//
+			case 76: {
+				
+				SimpleNameCS simpleNameCS = createSimpleNameCS(
+							SimpleTypeEnum.STRING_LITERAL,
+							getTokenText(dtParser.getToken(2))
+						);
+				setOffsets(simpleNameCS, getIToken(dtParser.getToken(2)));
+				EList args = new BasicEList();
+				args.add(dtParser.getSym(3));
+				CSTNode result = createOperationCallExpCS(
+						(OCLExpressionCS)dtParser.getSym(1),
+						simpleNameCS,
+						args
+					);
+				setOffsets(result, (CSTNode)dtParser.getSym(1), (CSTNode)dtParser.getSym(3));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 79:  equalityExpCS ::= equalityExpCS = relationalExpCS
+			//
+			case 79:
+ 
+			//
+			// Rule 80:  equalityWithLet ::= equalityExpCS = relationalWithLet
+			//
+			case 80: {
+				
+				SimpleNameCS simpleNameCS = createSimpleNameCS(
+							SimpleTypeEnum.STRING_LITERAL,
+							OCLStandardLibraryUtil.getOperationName(PredefinedType.EQUAL)
+						);
+				setOffsets(simpleNameCS, getIToken(dtParser.getToken(2)));
+				EList args = new BasicEList();
+				args.add(dtParser.getSym(3));
+				CSTNode result = createOperationCallExpCS(
+						(OCLExpressionCS)dtParser.getSym(1),
+						simpleNameCS,
+						args
+					);
+				setOffsets(result, (CSTNode)dtParser.getSym(1), (CSTNode)dtParser.getSym(3));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 81:  equalityExpCS ::= equalityExpCS <> relationalExpCS
+			//
+			case 81:
+ 
+			//
+			// Rule 82:  equalityWithLet ::= equalityExpCS <> relationalWithLet
+			//
+			case 82: {
+				
+				SimpleNameCS simpleNameCS = createSimpleNameCS(
+							SimpleTypeEnum.STRING_LITERAL,
+							OCLStandardLibraryUtil.getOperationName(PredefinedType.NOT_EQUAL)
+						);
+				setOffsets(simpleNameCS, getIToken(dtParser.getToken(2)));
+				EList args = new BasicEList();
+				args.add(dtParser.getSym(3));
+				CSTNode result = createOperationCallExpCS(
+						(OCLExpressionCS)dtParser.getSym(1),
+						simpleNameCS,
+						args
+					);
+				setOffsets(result, (CSTNode)dtParser.getSym(1), (CSTNode)dtParser.getSym(3));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 85:  relationalExpCS ::= relationalExpCS > ifExpCSPrec
+			//
+			case 85:
+ 
+			//
+			// Rule 86:  relationalWithLet ::= relationalExpCS > additiveWithLet
+			//
+			case 86: {
+				
+				SimpleNameCS simpleNameCS = createSimpleNameCS(
+							SimpleTypeEnum.STRING_LITERAL,
+							OCLStandardLibraryUtil.getOperationName(PredefinedType.GREATER_THAN)
+						);
+				setOffsets(simpleNameCS, getIToken(dtParser.getToken(2)));
+				EList args = new BasicEList();
+				args.add(dtParser.getSym(3));
+				CSTNode result = createOperationCallExpCS(
+						(OCLExpressionCS)dtParser.getSym(1),
+						simpleNameCS,
+						args
+					);
+				setOffsets(result, (CSTNode)dtParser.getSym(1), (CSTNode)dtParser.getSym(3));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 87:  relationalExpCS ::= relationalExpCS < ifExpCSPrec
+			//
+			case 87:
+ 
+			//
+			// Rule 88:  relationalWithLet ::= relationalExpCS < additiveWithLet
+			//
+			case 88: {
+				
+				SimpleNameCS simpleNameCS = createSimpleNameCS(
+							SimpleTypeEnum.STRING_LITERAL,
+							OCLStandardLibraryUtil.getOperationName(PredefinedType.LESS_THAN)
+						);
+				setOffsets(simpleNameCS, getIToken(dtParser.getToken(2)));
+				EList args = new BasicEList();
+				args.add(dtParser.getSym(3));
+				CSTNode result = createOperationCallExpCS(
+						(OCLExpressionCS)dtParser.getSym(1),
+						simpleNameCS,
+						args
+					);
+				setOffsets(result, (CSTNode)dtParser.getSym(1), (CSTNode)dtParser.getSym(3));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 89:  relationalExpCS ::= relationalExpCS >= ifExpCSPrec
+			//
+			case 89:
+ 
+			//
+			// Rule 90:  relationalWithLet ::= relationalExpCS >= additiveWithLet
+			//
+			case 90: {
+				
+				SimpleNameCS simpleNameCS = createSimpleNameCS(
+							SimpleTypeEnum.STRING_LITERAL,
+							OCLStandardLibraryUtil.getOperationName(PredefinedType.GREATER_THAN_EQUAL)
+						);
+				setOffsets(simpleNameCS, getIToken(dtParser.getToken(2)));
+				EList args = new BasicEList();
+				args.add(dtParser.getSym(3));
+				CSTNode result = createOperationCallExpCS(
+						(OCLExpressionCS)dtParser.getSym(1),
+						simpleNameCS,
+						args
+					);
+				setOffsets(result, (CSTNode)dtParser.getSym(1), (CSTNode)dtParser.getSym(3));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 91:  relationalExpCS ::= relationalExpCS <= ifExpCSPrec
+			//
+			case 91:
+ 
+			//
+			// Rule 92:  relationalWithLet ::= relationalExpCS <= additiveWithLet
+			//
+			case 92: {
+				
+				SimpleNameCS simpleNameCS = createSimpleNameCS(
+							SimpleTypeEnum.STRING_LITERAL,
+							OCLStandardLibraryUtil.getOperationName(PredefinedType.LESS_THAN_EQUAL)
+						);
+				setOffsets(simpleNameCS, getIToken(dtParser.getToken(2)));
+				EList args = new BasicEList();
+				args.add(dtParser.getSym(3));
+				CSTNode result = createOperationCallExpCS(
+						(OCLExpressionCS)dtParser.getSym(1),
+						simpleNameCS,
+						args
+					);
+				setOffsets(result, (CSTNode)dtParser.getSym(1), (CSTNode)dtParser.getSym(3));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 97:  additiveExpCS ::= additiveExpCS + multiplicativeExpCS
+			//
+			case 97:
+ 
+			//
+			// Rule 98:  additiveWithLet ::= additiveExpCS + multiplicativeWithLet
+			//
+			case 98: {
+				
+				SimpleNameCS simpleNameCS = createSimpleNameCS(
+							SimpleTypeEnum.STRING_LITERAL,
+							OCLStandardLibraryUtil.getOperationName(PredefinedType.PLUS)
+						);
+				setOffsets(simpleNameCS, getIToken(dtParser.getToken(2)));
+				EList args = new BasicEList();
+				args.add(dtParser.getSym(3));
+				CSTNode result = createOperationCallExpCS(
+						(OCLExpressionCS)dtParser.getSym(1),
+						simpleNameCS,
+						args
+					);
+				setOffsets(result, (CSTNode)dtParser.getSym(1), (CSTNode)dtParser.getSym(3));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 99:  additiveExpCS ::= additiveExpCS - multiplicativeExpCS
+			//
+			case 99:
+ 
+			//
+			// Rule 100:  additiveWithLet ::= additiveExpCS - multiplicativeWithLet
+			//
+			case 100: {
+				
+				SimpleNameCS simpleNameCS = createSimpleNameCS(
+							SimpleTypeEnum.STRING_LITERAL,
+							OCLStandardLibraryUtil.getOperationName(PredefinedType.MINUS)
+						);
+				setOffsets(simpleNameCS, getIToken(dtParser.getToken(2)));
+				EList args = new BasicEList();
+				args.add(dtParser.getSym(3));
+				CSTNode result = createOperationCallExpCS(
+						(OCLExpressionCS)dtParser.getSym(1),
+						simpleNameCS,
+						args
+					);
+				setOffsets(result, (CSTNode)dtParser.getSym(1), (CSTNode)dtParser.getSym(3));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 103:  multiplicativeExpCS ::= multiplicativeExpCS * unaryExpCS
+			//
+			case 103:
+ 
+			//
+			// Rule 104:  multiplicativeWithLet ::= multiplicativeExpCS * unaryWithLet
+			//
+			case 104: {
+				
+				SimpleNameCS simpleNameCS = createSimpleNameCS(
+							SimpleTypeEnum.STRING_LITERAL,
+							OCLStandardLibraryUtil.getOperationName(PredefinedType.TIMES)
+						);
+				setOffsets(simpleNameCS, getIToken(dtParser.getToken(2)));
+				EList args = new BasicEList();
+				args.add(dtParser.getSym(3));
+				CSTNode result = createOperationCallExpCS(
+						(OCLExpressionCS)dtParser.getSym(1),
+						simpleNameCS,
+						args
+					);
+				setOffsets(result, (CSTNode)dtParser.getSym(1), (CSTNode)dtParser.getSym(3));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 105:  multiplicativeExpCS ::= multiplicativeExpCS / unaryExpCS
+			//
+			case 105:
+ 
+			//
+			// Rule 106:  multiplicativeWithLet ::= multiplicativeExpCS / unaryWithLet
+			//
+			case 106: {
+				
+				SimpleNameCS simpleNameCS = createSimpleNameCS(
+							SimpleTypeEnum.STRING_LITERAL,
+							OCLStandardLibraryUtil.getOperationName(PredefinedType.DIVIDE)
+						);
+				setOffsets(simpleNameCS, getIToken(dtParser.getToken(2)));
+				EList args = new BasicEList();
+				args.add(dtParser.getSym(3));
+				CSTNode result = createOperationCallExpCS(
+						(OCLExpressionCS)dtParser.getSym(1),
+						simpleNameCS,
+						args
+					);
+				setOffsets(result, (CSTNode)dtParser.getSym(1), (CSTNode)dtParser.getSym(3));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 109:  unaryExpCS ::= - unaryExpCS
+			//
+			case 109: {
+				
+				SimpleNameCS simpleNameCS = createSimpleNameCS(
+							SimpleTypeEnum.STRING_LITERAL,
+							OCLStandardLibraryUtil.getOperationName(PredefinedType.MINUS)
+						);
+				setOffsets(simpleNameCS, getIToken(dtParser.getToken(1)));
+				CSTNode result = createOperationCallExpCS(
+						(OCLExpressionCS)dtParser.getSym(2),
+						simpleNameCS,
+						new BasicEList()
+					);
+				setOffsets(result, getIToken(dtParser.getToken(1)), (CSTNode)dtParser.getSym(2));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 110:  unaryExpCS ::= not unaryExpCS
+			//
+			case 110: {
+				
+				SimpleNameCS simpleNameCS = createSimpleNameCS(
+							SimpleTypeEnum.STRING_LITERAL,
+							getTokenText(dtParser.getToken(1))
+						);
+				setOffsets(simpleNameCS, getIToken(dtParser.getToken(1)));
+				CSTNode result = createOperationCallExpCS(
+						(OCLExpressionCS)dtParser.getSym(2),
+						simpleNameCS,
+						new BasicEList()
+					);
+				setOffsets(result, getIToken(dtParser.getToken(1)), (CSTNode)dtParser.getSym(2));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 112:  dotArrowExpCS ::= dotArrowExpCS callExpCS
+			//
+			case 112: {
+				
+				CallExpCS result = (CallExpCS)dtParser.getSym(2);
+				result.setSource((OCLExpressionCS)dtParser.getSym(1));
+				setOffsets(result, (CSTNode)dtParser.getSym(1), result);
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 113:  dotArrowExpCS ::= dotArrowExpCS messageExpCS
+			//
+			case 113: {
+				
+				MessageExpCS result = (MessageExpCS)dtParser.getSym(2);
+				result.setTarget((OCLExpressionCS)dtParser.getSym(1));
+				setOffsets(result, (CSTNode)dtParser.getSym(1), (CSTNode)dtParser.getSym(2));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 114:  dotArrowExpCS ::= NUMERIC_OPERATION ( argumentsCSopt )
+			//
+			case 114: {
+				
+				// NUMERIC_OPERATION -> Integer '.' Identifier
+				String text = getTokenText(dtParser.getToken(1));
+				int index = text.indexOf('.');
+				String integer = text.substring(0, index);
+				String simpleName = text.substring(index + 1);
+
+				// create the IntegerLiteralExpCS
+				IToken numericToken = getIToken(dtParser.getToken(1));
+				int startOffset = numericToken.getStartOffset();
+				int endOffset = startOffset + integer.length() - 1; // inclusive
+
+				IntegerLiteralExpCS integerLiteralExpCS = createIntegerLiteralExpCS(integer);
+				integerLiteralExpCS.setStartOffset(startOffset);
+				integerLiteralExpCS.setEndOffset(endOffset);
+				integerLiteralExpCS.setStartToken(numericToken);
+				integerLiteralExpCS.setEndToken(numericToken);
+
+				startOffset = endOffset + 2; // end of integerLiteral + 1('.') + 1(start of simpleName)
+				endOffset = getIToken(dtParser.getToken(1)).getEndOffset();
+
+				// create the SimpleNameCS
+				SimpleNameCS simpleNameCS = createSimpleNameCS(
+							SimpleTypeEnum.IDENTIFIER_LITERAL,
+							simpleName
+						);
+				simpleNameCS.setStartOffset(startOffset);
+				simpleNameCS.setEndOffset(endOffset);
+				simpleNameCS.setStartToken(numericToken);
+				simpleNameCS.setEndToken(numericToken);
+
+				// create the OperationCallExpCS
+				CSTNode result = createOperationCallExpCS(
+						integerLiteralExpCS,
+						simpleNameCS,
+						(EList)dtParser.getSym(3)
+					);
+				setOffsets(result, getIToken(dtParser.getToken(1)), getIToken(dtParser.getToken(4)));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 115:  dotArrowExpCS ::= pathNameCS :: simpleNameCS ( argumentsCSopt )
+			//
+			case 115: {
+				
+				OperationCallExpCS result = createOperationCallExpCS(
+						(PathNameCS)dtParser.getSym(1),
+						(SimpleNameCS)dtParser.getSym(3),
+						(EList)dtParser.getSym(5)
+					);
+				setOffsets(result, (CSTNode)dtParser.getSym(1), getIToken(dtParser.getToken(6)));
+				result.setAccessor(DotOrArrowEnum.DOT_LITERAL);
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 120:  oclExpCS ::= ( oclExpressionCS )
+			//
+			case 120: {
+				
+				CSTNode result = (CSTNode)dtParser.getSym(2);
+				setOffsets(result, getIToken(dtParser.getToken(1)), getIToken(dtParser.getToken(3)));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 121:  variableExpCS ::= simpleNameCS isMarkedPreCS
+			//
+			case 121:
+ 
+			//
+			// Rule 122:  variableExpCS ::= keywordAsName1 isMarkedPreCS
+			//
+			case 122: {
+				
+				IsMarkedPreCS isMarkedPreCS = (IsMarkedPreCS)dtParser.getSym(2);
+				CSTNode result = createVariableExpCS(
+						(SimpleNameCS)dtParser.getSym(1),
+						new BasicEList(),
+						isMarkedPreCS
+					);
+				if (isMarkedPreCS.isPre()) {
+					setOffsets(result, (CSTNode)dtParser.getSym(1), (CSTNode)dtParser.getSym(2));
+				} else {
+					setOffsets(result, (CSTNode)dtParser.getSym(1));
+				}
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 123:  variableExpCS ::= simpleNameCS [ argumentsCS ] isMarkedPreCS
+			//
+			case 123:
+ 
+			//
+			// Rule 124:  variableExpCS ::= keywordAsName1 [ argumentsCS ] isMarkedPreCS
+			//
+			case 124: {
+				
+				IsMarkedPreCS isMarkedPreCS = (IsMarkedPreCS)dtParser.getSym(5);
+				CSTNode result = createVariableExpCS(
+						(SimpleNameCS)dtParser.getSym(1),
+						(EList)dtParser.getSym(3),
+						isMarkedPreCS
+					);
+				if (isMarkedPreCS.isPre()) {
+					setOffsets(result, (CSTNode)dtParser.getSym(1), (CSTNode)dtParser.getSym(5));
+				} else {
+					setOffsets(result, (CSTNode)dtParser.getSym(1), getIToken(dtParser.getToken(4)));
+				}
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 126:  simpleNameCS ::= self
+			//
+			case 126: {
+				
+				CSTNode result = createSimpleNameCS(
+						SimpleTypeEnum.SELF_LITERAL,
+						getTokenText(dtParser.getToken(1))
+					);
+				setOffsets(result, getIToken(dtParser.getToken(1)));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 127:  simpleNameCS ::= IDENTIFIER
+			//
+			case 127: {
+				
+				CSTNode result = createSimpleNameCS(
+						SimpleTypeEnum.IDENTIFIER_LITERAL,
+						getTokenText(dtParser.getToken(1))
+					);
+				setOffsets(result, getIToken(dtParser.getToken(1)));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 128:  primitiveTypeCS ::= Integer
+			//
+			case 128: {
+				
+				CSTNode result = createPrimitiveTypeCS(
+						SimpleTypeEnum.INTEGER_LITERAL,
+						getTokenText(dtParser.getToken(1))
+					);
+				setOffsets(result, getIToken(dtParser.getToken(1)));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 129:  primitiveTypeCS ::= UnlimitedNatural
+			//
+			case 129: {
+				
+				CSTNode result = createPrimitiveTypeCS(
+						SimpleTypeEnum.UNLIMITED_NATURAL_LITERAL,
+						getTokenText(dtParser.getToken(1))
+					);
+				setOffsets(result, getIToken(dtParser.getToken(1)));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 130:  primitiveTypeCS ::= String
+			//
+			case 130: {
+				
+				CSTNode result = createPrimitiveTypeCS(
+						SimpleTypeEnum.STRING_LITERAL,
+						getTokenText(dtParser.getToken(1))
+					);
+				setOffsets(result, getIToken(dtParser.getToken(1)));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 131:  primitiveTypeCS ::= Real
+			//
+			case 131: {
+				
+				CSTNode result = createPrimitiveTypeCS(
+						SimpleTypeEnum.REAL_LITERAL,
+						getTokenText(dtParser.getToken(1))
+					);
+				setOffsets(result, getIToken(dtParser.getToken(1)));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 132:  primitiveTypeCS ::= Boolean
+			//
+			case 132: {
+				
+				CSTNode result = createPrimitiveTypeCS(
+						SimpleTypeEnum.BOOLEAN_LITERAL,
+						getTokenText(dtParser.getToken(1))
+					);
+				setOffsets(result, getIToken(dtParser.getToken(1)));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 133:  primitiveTypeCS ::= OclAny
+			//
+			case 133: {
+				
+				CSTNode result = createPrimitiveTypeCS(
+						SimpleTypeEnum.OCL_ANY_LITERAL,
+						getTokenText(dtParser.getToken(1))
+					);
+				setOffsets(result, getIToken(dtParser.getToken(1)));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 134:  primitiveTypeCS ::= OclVoid
+			//
+			case 134: {
+				
+				CSTNode result = createPrimitiveTypeCS(
+						SimpleTypeEnum.OCL_VOID_LITERAL,
+						getTokenText(dtParser.getToken(1))
+					);
+				setOffsets(result, getIToken(dtParser.getToken(1)));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 135:  primitiveTypeCS ::= Invalid
+			//
+			case 135: {
+				
+				CSTNode result = createPrimitiveTypeCS(
+						SimpleTypeEnum.INVALID_LITERAL,
+						getTokenText(dtParser.getToken(1))
+					);
+				setOffsets(result, getIToken(dtParser.getToken(1)));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 136:  primitiveTypeCS ::= OclMessage
+			//
+			case 136: {
+				
+				CSTNode result = createPrimitiveTypeCS(
+						SimpleTypeEnum.OCL_MESSAGE_LITERAL,
+						getTokenText(dtParser.getToken(1))
+					);
+				setOffsets(result, getIToken(dtParser.getToken(1)));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 137:  pathNameCS ::= IDENTIFIER
+			//
+			case 137: {
+				
+				CSTNode result = createPathNameCS(getTokenText(dtParser.getToken(1)));
+				setOffsets(result, getIToken(dtParser.getToken(1)));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 138:  pathNameCS ::= pathNameCS :: simpleNameCS
+			//
+			case 138: {
+				
+				PathNameCS result = (PathNameCS)dtParser.getSym(1);
+				result = extendPathNameCS(result, getTokenText(dtParser.getToken(3)));
+				setOffsets(result, result, (CSTNode)dtParser.getSym(3));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 139:  pathNameCSOpt ::= $Empty
+			//
+			case 139: {
+				
+				CSTNode result = createPathNameCS();
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 147:  enumLiteralExpCS ::= pathNameCS :: keywordAsName
+			//
+			case 147:
+ 
+			//
+			// Rule 148:  enumLiteralExpCS ::= pathNameCS :: simpleNameCS
+			//
+			case 148: {
+				
+				CSTNode result = createEnumLiteralExpCS(
+						(PathNameCS)dtParser.getSym(1),
+						(SimpleNameCS)dtParser.getSym(3)
+					);
+				setOffsets(result, (CSTNode)dtParser.getSym(1), (CSTNode)dtParser.getSym(3));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 149:  collectionLiteralExpCS ::= collectionTypeIdentifierCS { collectionLiteralPartsCSopt }
+			//
+			case 149: {
+				
+				Object[] objs = (Object[])dtParser.getSym(1);
+				CSTNode result = createCollectionLiteralExpCS(
+						(CollectionTypeIdentifierEnum)objs[1],
+						(EList)dtParser.getSym(3)
+					);
+				setOffsets(result, (IToken)objs[0], getIToken(dtParser.getToken(4)));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 150:  collectionTypeIdentifierCS ::= Set
+			//
+			case 150: {
+				
+				dtParser.setSym1(new Object[]{getIToken(dtParser.getToken(1)), CollectionTypeIdentifierEnum.SET_LITERAL});
+	  		  break;
+			}
+	 
+			//
+			// Rule 151:  collectionTypeIdentifierCS ::= Bag
+			//
+			case 151: {
+				
+				dtParser.setSym1(new Object[]{getIToken(dtParser.getToken(1)), CollectionTypeIdentifierEnum.BAG_LITERAL});
+	  		  break;
+			}
+	 
+			//
+			// Rule 152:  collectionTypeIdentifierCS ::= Sequence
+			//
+			case 152: {
+				
+				dtParser.setSym1(new Object[]{getIToken(dtParser.getToken(1)), CollectionTypeIdentifierEnum.SEQUENCE_LITERAL});
+	  		  break;
+			}
+	 
+			//
+			// Rule 153:  collectionTypeIdentifierCS ::= Collection
+			//
+			case 153: {
+				
+				dtParser.setSym1(new Object[]{getIToken(dtParser.getToken(1)), CollectionTypeIdentifierEnum.COLLECTION_LITERAL});
+	  		  break;
+			}
+	 
+			//
+			// Rule 154:  collectionTypeIdentifierCS ::= OrderedSet
+			//
+			case 154: {
+				
+				dtParser.setSym1(new Object[]{getIToken(dtParser.getToken(1)), CollectionTypeIdentifierEnum.ORDERED_SET_LITERAL});
+	  		  break;
+			}
+	 
+			//
+			// Rule 155:  collectionLiteralPartsCSopt ::= $Empty
+			//
+			case 155:
+				dtParser.setSym1(new BasicEList());
+				break;
+ 
+			//
+			// Rule 157:  collectionLiteralPartsCS ::= collectionLiteralPartCS
+			//
+			case 157: {
+				
+				EList result = new BasicEList();
+				result.add(dtParser.getSym(1));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 158:  collectionLiteralPartsCS ::= collectionLiteralPartsCS , collectionLiteralPartCS
+			//
+			case 158: {
+				
+				EList result = (EList)dtParser.getSym(1);
+				result.add(dtParser.getSym(3));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 160:  collectionLiteralPartCS ::= oclExpressionCS
+			//
+			case 160: {
+				
+				CSTNode result = createCollectionLiteralPartCS(
+						(OCLExpressionCS)dtParser.getSym(1)
+					);
+				setOffsets(result, (CSTNode)dtParser.getSym(1));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 161:  collectionRangeCS ::= - INTEGER_RANGE_START oclExpressionCS
+			//
+			case 161: {
+				
+				OCLExpressionCS rangeStart = createRangeStart(
+						getTokenText(dtParser.getToken(2)), true);
+				CSTNode result = createCollectionRangeCS(
+						rangeStart,
+						(OCLExpressionCS)dtParser.getSym(3)
+					);
+				setOffsets(result, rangeStart, (CSTNode)dtParser.getSym(3));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 162:  collectionRangeCS ::= INTEGER_RANGE_START oclExpressionCS
+			//
+			case 162: {
+				
+				OCLExpressionCS rangeStart = createRangeStart(
+						getTokenText(dtParser.getToken(1)), false);
+				CSTNode result = createCollectionRangeCS(
+						rangeStart,
+						(OCLExpressionCS)dtParser.getSym(2)
+					);
+				setOffsets(result, rangeStart, (CSTNode)dtParser.getSym(2));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 163:  collectionRangeCS ::= oclExpressionCS .. oclExpressionCS
+			//
+			case 163: {
+				
+				CSTNode result = createCollectionRangeCS(
+						(OCLExpressionCS)dtParser.getSym(1),
+						(OCLExpressionCS)dtParser.getSym(3)
+					);
+				setOffsets(result, (CSTNode)dtParser.getSym(1), (CSTNode)dtParser.getSym(3));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 169:  tupleLiteralExpCS ::= Tuple { variableListCS2 }
+			//
+			case 169: {
+				
+				CSTNode result = createTupleLiteralExpCS((EList)dtParser.getSym(3));
+				setOffsets(result, getIToken(dtParser.getToken(1)), getIToken(dtParser.getToken(4)));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 170:  integerLiteralExpCS ::= INTEGER_LITERAL
+			//
+			case 170: {
+				
+				CSTNode result = createIntegerLiteralExpCS(getTokenText(dtParser.getToken(1)));
+				setOffsets(result, getIToken(dtParser.getToken(1)));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 171:  unlimitedNaturalLiteralExpCS ::= *
+			//
+			case 171: {
+				
+				CSTNode result = createUnlimitedNaturalLiteralExpCS(getTokenText(dtParser.getToken(1)));
+				setOffsets(result, getIToken(dtParser.getToken(1)));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 172:  realLiteralExpCS ::= REAL_LITERAL
+			//
+			case 172: {
+				
+				CSTNode result = createRealLiteralExpCS(getTokenText(dtParser.getToken(1)));
+				setOffsets(result, getIToken(dtParser.getToken(1)));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 173:  stringLiteralExpCS ::= STRING_LITERAL
+			//
+			case 173: {
+				
+				CSTNode result = createStringLiteralExpCS(getTokenText(dtParser.getToken(1)));
+				setOffsets(result, getIToken(dtParser.getToken(1)));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 174:  booleanLiteralExpCS ::= true
+			//
+			case 174: {
+				
+				CSTNode result = createBooleanLiteralExpCS(getTokenText(dtParser.getToken(1)));
+				setOffsets(result, getIToken(dtParser.getToken(1)));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 175:  booleanLiteralExpCS ::= false
+			//
+			case 175: {
+				
+				CSTNode result = createBooleanLiteralExpCS(getTokenText(dtParser.getToken(1)));
+				setOffsets(result, getIToken(dtParser.getToken(1)));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 176:  nullLiteralExpCS ::= null
+			//
+			case 176: {
+				
+				CSTNode result = createNullLiteralExpCS(getTokenText(dtParser.getToken(1)));
+				setOffsets(result, getIToken(dtParser.getToken(1)));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 177:  invalidLiteralExpCS ::= OclInvalid
+			//
+			case 177: {
+				
+				CSTNode result = createInvalidLiteralExpCS(getTokenText(dtParser.getToken(1)));
+				setOffsets(result, getIToken(dtParser.getToken(1)));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 178:  callExpCS ::= -> featureCallExpCS
+			//
+			case 178:
+ 
+			//
+			// Rule 179:  callExpCS ::= -> loopExpCS
+			//
+			case 179: {
+				
+				CallExpCS result = (CallExpCS)dtParser.getSym(2);
+				result.setAccessor(DotOrArrowEnum.ARROW_LITERAL);
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 180:  callExpCS ::= . keywordOperationCallExpCS
+			//
+			case 180:
+ 
+			//
+			// Rule 181:  callExpCS ::= . featureCallExpCS
+			//
+			case 181: {
+				
+				CallExpCS result = (CallExpCS)dtParser.getSym(2);
+				result.setAccessor(DotOrArrowEnum.DOT_LITERAL);
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 184:  iteratorExpCS ::= iteratorName ( oclExpressionCS )
+			//
+			case 184: {
+				
+				SimpleNameCS simpleNameCS = (SimpleNameCS)dtParser.getSym(1);
+				CSTNode result = createIteratorExpCS(
+						simpleNameCS,
+						null,
+						null,
+						(OCLExpressionCS)dtParser.getSym(3)
+					);
+				setOffsets(result, simpleNameCS, getIToken(dtParser.getToken(4)));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 185:  iteratorExpCS ::= iteratorName ( variableCS | oclExpressionCS )
+			//
+			case 185: {
+				
+				SimpleNameCS simpleNameCS = (SimpleNameCS)dtParser.getSym(1);
+				CSTNode result = createIteratorExpCS(
+						simpleNameCS,
+						(VariableCS)dtParser.getSym(3),
+						null,
+						(OCLExpressionCS)dtParser.getSym(5)
+					);
+				setOffsets(result, simpleNameCS, getIToken(dtParser.getToken(6)));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 186:  iteratorExpCS ::= iteratorName ( variableCS , variableCS | oclExpressionCS )
+			//
+			case 186: {
+				
+				SimpleNameCS simpleNameCS = (SimpleNameCS)dtParser.getSym(1);
+				CSTNode result = createIteratorExpCS(
+						simpleNameCS,
+						(VariableCS)dtParser.getSym(3),
+						(VariableCS)dtParser.getSym(5),
+						(OCLExpressionCS)dtParser.getSym(7)
+					);
+				setOffsets(result, simpleNameCS, getIToken(dtParser.getToken(8)));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 187:  iterateExpCS ::= iterateName ( variableCS | oclExpressionCS )
+			//
+			case 187: {
+				
+				SimpleNameCS simpleNameCS = (SimpleNameCS)dtParser.getSym(1);
+				CSTNode result = createIterateExpCS(
+						simpleNameCS,
+						(VariableCS)dtParser.getSym(3),
+						null,
+						(OCLExpressionCS)dtParser.getSym(5)
+					);
+				setOffsets(result, simpleNameCS, getIToken(dtParser.getToken(6)));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 188:  iterateExpCS ::= iterateName ( variableCS ; variableCS | oclExpressionCS )
+			//
+			case 188: {
+				
+				SimpleNameCS simpleNameCS = (SimpleNameCS)dtParser.getSym(1);
+				CSTNode result = createIterateExpCS(
+						simpleNameCS,
+						(VariableCS)dtParser.getSym(3),
+						(VariableCS)dtParser.getSym(5),
+						(OCLExpressionCS)dtParser.getSym(7)
+					);
+				setOffsets(result, simpleNameCS, getIToken(dtParser.getToken(8)));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 189:  variableCS ::= IDENTIFIER
+			//
+			case 189: {
+				
+				CSTNode result = createVariableCS(
+						getTokenText(dtParser.getToken(1)),
+						null,
+						null
+					);
+				setOffsets(result, getIToken(dtParser.getToken(1)));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 190:  typedVariableCS ::= IDENTIFIER : typeCS
+			//
+			case 190: {
+				
+				CSTNode result = createVariableCS(
+						getTokenText(dtParser.getToken(1)),
+						(TypeCS)dtParser.getSym(3),
+						null
+					);
+				setOffsets(result, getIToken(dtParser.getToken(1)), (CSTNode)dtParser.getSym(3));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 192:  variableCS ::= IDENTIFIER : typeCS = oclExpressionCS
+			//
+			case 192: {
+				
+				CSTNode result = createVariableCS(
+						getTokenText(dtParser.getToken(1)),
+						(TypeCS)dtParser.getSym(3),
+						(OCLExpressionCS)dtParser.getSym(5)
+					);
+				setOffsets(result, getIToken(dtParser.getToken(1)), (CSTNode)dtParser.getSym(5));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 193:  variableCS2 ::= IDENTIFIER = oclExpressionCS
+			//
+			case 193: {
+				
+				CSTNode result = createVariableCS(
+						getTokenText(dtParser.getToken(1)),
+						null,
+						(OCLExpressionCS)dtParser.getSym(3)
+					);
+				setOffsets(result, getIToken(dtParser.getToken(1)), (CSTNode)dtParser.getSym(3));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 194:  typeCSopt ::= $Empty
+			//
+			case 194:
+				dtParser.setSym1(null);
+				break;
+ 
+			//
+			// Rule 200:  collectionTypeCS ::= collectionTypeIdentifierCS ( typeCS )
+			//
+			case 200: {
+				
+				Object[] objs = (Object[])dtParser.getSym(1);
+				CSTNode result = createCollectionTypeCS(
+						(CollectionTypeIdentifierEnum)objs[1],
+						(TypeCS)dtParser.getSym(3)
+					);
+				setOffsets(result, (IToken)objs[0], getIToken(dtParser.getToken(4)));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 201:  tupleTypeCS ::= Tuple ( variableListCSopt )
+			//
+			case 201: {
+				
+				CSTNode result = createTupleTypeCS((EList)dtParser.getSym(3));
+				setOffsets(result, getIToken(dtParser.getToken(1)), getIToken(dtParser.getToken(4)));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 202:  variableListCSopt ::= $Empty
+			//
+			case 202:
+				dtParser.setSym1(new BasicEList());
+				break;
+ 
+			//
+			// Rule 204:  variableListCS ::= variableCS
+			//
+			case 204: {
+				
+				EList result = new BasicEList();
+				result.add(dtParser.getSym(1));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 205:  variableListCS ::= variableListCS , variableCS
+			//
+			case 205: {
+				
+				EList result = (EList)dtParser.getSym(1);
+				result.add(dtParser.getSym(3));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 206:  variableListCS2 ::= variableCS2
+			//
+			case 206:
+ 
+			//
+			// Rule 207:  variableListCS2 ::= variableCS
+			//
+			case 207: {
+				
+				EList result = new BasicEList();
+				result.add(dtParser.getSym(1));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 208:  variableListCS2 ::= variableListCS2 , variableCS2
+			//
+			case 208:
+ 
+			//
+			// Rule 209:  variableListCS2 ::= variableListCS2 , variableCS
+			//
+			case 209: {
+				
+				EList result = (EList)dtParser.getSym(1);
+				result.add(dtParser.getSym(3));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 212:  featureCallExpCS ::= unaryName isMarkedPreCS ( argumentsCSopt )
+			//
+			case 212:
+ 
+			//
+			// Rule 213:  operationCallExpCS ::= binaryName isMarkedPreCS ( argumentsCSopt )
+			//
+			case 213:
+ 
+			//
+			// Rule 214:  keywordOperationCallExpCS ::= keywordAsName isMarkedPreCS ( argumentsCSopt )
+			//
+			case 214: {
+				
+				CSTNode result = createOperationCallExpCS(
+						(SimpleNameCS)dtParser.getSym(1),
+						(IsMarkedPreCS)dtParser.getSym(2),
+						(EList)dtParser.getSym(4)
+					);
+				setOffsets(result, getIToken(dtParser.getToken(1)), getIToken(dtParser.getToken(5)));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 215:  stateExpCS ::= pathNameCSOpt
+			//
+			case 215: {
+				
+				PathNameCS pathNameCS = (PathNameCS)dtParser.getSym(1);
+				StateExpCS result = createStateExpCS(pathNameCS);
+				setOffsets(result, pathNameCS);
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 216:  operationCallExpCS ::= oclIsInStateName isMarkedPreCS ( stateExpCS )
+			//
+			case 216: {
+				
+				SimpleNameCS simpleNameCS = (SimpleNameCS)dtParser.getSym(1);
+				CSTNode result = createOperationCallExpCS(
+						simpleNameCS,
+						(IsMarkedPreCS)dtParser.getSym(2),
+						(StateExpCS)dtParser.getSym(4)
+					);
+				setOffsets(result, simpleNameCS, getIToken(dtParser.getToken(5)));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 217:  attrOrNavCallExpCS ::= simpleNameCS isMarkedPreCS
+			//
+			case 217:
+ 
+			//
+			// Rule 218:  attrOrNavCallExpCS ::= keywordAsName isMarkedPreCS
+			//
+			case 218: {
+				
+				IsMarkedPreCS isMarkedPreCS = (IsMarkedPreCS)dtParser.getSym(2);
+				CSTNode result = createFeatureCallExpCS(
+						(SimpleNameCS)dtParser.getSym(1),
+						new BasicEList(),
+						isMarkedPreCS
+					);
+				if (isMarkedPreCS.isPre()) {
+					setOffsets(result, (CSTNode)dtParser.getSym(1), (CSTNode)dtParser.getSym(2));
+				} else {
+					setOffsets(result, (CSTNode)dtParser.getSym(1));
+				}
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 219:  attrOrNavCallExpCS ::= simpleNameCS [ argumentsCS ] isMarkedPreCS
+			//
+			case 219: {
+				
+				IsMarkedPreCS isMarkedPreCS = (IsMarkedPreCS)dtParser.getSym(5);
+				CSTNode result = createFeatureCallExpCS(
+						(SimpleNameCS)dtParser.getSym(1),
+						(EList)dtParser.getSym(3),
+						isMarkedPreCS
+					);
+				if (isMarkedPreCS.isPre()) {
+					setOffsets(result, (CSTNode)dtParser.getSym(1), (CSTNode)dtParser.getSym(5));
+				} else {
+					setOffsets(result, (CSTNode)dtParser.getSym(1), getIToken(dtParser.getToken(4)));
+				}
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 220:  isMarkedPreCS ::= $Empty
+			//
+			case 220: {
+				
+				CSTNode result = createIsMarkedPreCS(false);
+				setOffsets(result, getIToken(dtParser.getToken(1)));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 221:  isMarkedPreCS ::= @pre
+			//
+			case 221: {
+				
+				CSTNode result = createIsMarkedPreCS(true);
+				setOffsets(result, getIToken(dtParser.getToken(1)));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 222:  argumentsCSopt ::= $Empty
+			//
+			case 222:
+				dtParser.setSym1(new BasicEList());
+				break;
+ 
+			//
+			// Rule 224:  argumentsCS ::= oclExpressionCS
+			//
+			case 224: {
+				
+				EList result = new BasicEList();
+				result.add(dtParser.getSym(1));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 225:  argumentsCS ::= argumentsCS , oclExpressionCS
+			//
+			case 225: {
+				
+				EList result = (EList)dtParser.getSym(1);
+				result.add(dtParser.getSym(3));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 226:  letExpCS ::= let variableListCS in oclExpressionCS
+			//
+			case 226: {
+				
+				CSTNode result = createLetExpCS(
+						(EList)dtParser.getSym(2),
+						(OCLExpressionCS)dtParser.getSym(4)
+					);
+				setOffsets(result, getIToken(dtParser.getToken(1)), (CSTNode)dtParser.getSym(4));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 227:  ifExpCS ::= if oclExpressionCS then oclExpressionCS else oclExpressionCS endif
+			//
+			case 227: {
+				
+				CSTNode result = createIfExpCS(
+						(OCLExpressionCS)dtParser.getSym(2),
+						(OCLExpressionCS)dtParser.getSym(4),
+						(OCLExpressionCS)dtParser.getSym(6)
+					);
+				setOffsets(result, getIToken(dtParser.getToken(1)), getIToken(dtParser.getToken(7)));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 228:  messageExpCS ::= ^ simpleNameCS ( oclMessageArgumentsCSopt )
+			//
+			case 228:
+ 
+			//
+			// Rule 229:  messageExpCS ::= ^^ simpleNameCS ( oclMessageArgumentsCSopt )
+			//
+			case 229: {
+				
+				CSTNode result = createMessageExpCS(
+						getIToken(dtParser.getToken(1)).getKind() == OCLBacktrackingParsersym.TK_CARET,
+						(SimpleNameCS)dtParser.getSym(2),
+						(EList<OCLMessageArgCS>)dtParser.getSym(4)
+					);
+				setOffsets(result, getIToken(dtParser.getToken(1)), getIToken(dtParser.getToken(5)));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 230:  oclMessageArgumentsCSopt ::= $Empty
+			//
+			case 230:
+				dtParser.setSym1(new BasicEList());
+				break;
+ 
+			//
+			// Rule 232:  oclMessageArgumentsCS ::= oclMessageArgCS
+			//
+			case 232: {
+				
+				EList result = new BasicEList();
+				result.add(dtParser.getSym(1));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 233:  oclMessageArgumentsCS ::= oclMessageArgumentsCS , oclMessageArgCS
+			//
+			case 233: {
+				
+				EList result = (EList)dtParser.getSym(1);
+				result.add(dtParser.getSym(3));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 234:  oclMessageArgCS ::= oclExpressionCS
+			//
+			case 234: {
+				
+				CSTNode result = createOCLMessageArgCS(
+						null,
+						(OCLExpressionCS)dtParser.getSym(1)
+					);
+				setOffsets(result, (CSTNode)dtParser.getSym(1));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 235:  oclMessageArgCS ::= ?
+			//
+			case 235: {
+				
+				CSTNode result = createOCLMessageArgCS(
+						null,
+						null
+					);
+				setOffsets(result, getIToken(dtParser.getToken(1)));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 236:  oclMessageArgCS ::= ? : typeCS
+			//
+			case 236: {
+				
+				CSTNode result = createOCLMessageArgCS(
+						(TypeCS)dtParser.getSym(3),
+						null
+					);
+				setOffsets(result, getIToken(dtParser.getToken(1)), (CSTNode)dtParser.getSym(3));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 245:  packageDeclarationCSm ::= packageDeclarationCSm packageDeclarationCS
+			//
+			case 245: {
+				
+				PackageDeclarationCS result = (PackageDeclarationCS)dtParser.getSym(2);
+				result.setPackageDeclarationCS((PackageDeclarationCS) dtParser.getSym(1));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 246:  packageDeclarationCS ::= package pathNameCS contextDeclCSmopt endpackage
+			//
+			case 246: {
+				
+				CSTNode result = createPackageDeclarationCS(
+						(PathNameCS)dtParser.getSym(2),
+						(EList)dtParser.getSym(3)
+					);
+				setOffsets(result, getIToken(dtParser.getToken(1)), getIToken(dtParser.getToken(4)));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 247:  packageDeclarationCS1 ::= contextDeclCSm
+			//
+			case 247: {
+				
+				EList contextDecls = (EList)dtParser.getSym(1);
+				CSTNode result = createPackageDeclarationCS(null, contextDecls);
+				if (!contextDecls.isEmpty()) {
+					setOffsets(result, (CSTNode)contextDecls.get(0), (CSTNode)contextDecls.get(contextDecls.size()-1));
+				}
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 248:  contextDeclCSmopt ::= $Empty
+			//
+			case 248:
+				dtParser.setSym1(new BasicEList());
+				break;
+ 
+			//
+			// Rule 250:  contextDeclCSm ::= contextDeclCS
+			//
+			case 250: {
+				
+				EList result = new BasicEList();
+				result.add(dtParser.getSym(1));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 251:  contextDeclCSm ::= contextDeclCSm contextDeclCS
+			//
+			case 251: {
+				
+				EList result = (EList)dtParser.getSym(1);
+				result.add(dtParser.getSym(2));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 255:  propertyContextCS ::= context pathNameCS :: simpleNameCS : typeCS initOrDerValueCS
+			//
+			case 255: {
+				
+				CSTNode result = createPropertyContextCS(
+						(PathNameCS)dtParser.getSym(2),
+						(SimpleNameCS)dtParser.getSym(4),
+						(TypeCS)dtParser.getSym(6),
+						(InitOrDerValueCS)dtParser.getSym(7)
+					);
+				setOffsets(result, getIToken(dtParser.getToken(1)), (CSTNode)dtParser.getSym(7));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 256:  initOrDerValueCS ::= initOrDerValueCSopt init : oclExpressionCS
+			//
+			case 256: {
+				
+				CSTNode result = createInitValueCS(
+						(InitOrDerValueCS)dtParser.getSym(1),
+						(OCLExpressionCS)dtParser.getSym(4)
+					);
+				if (dtParser.getSym(1) != null) {
+					setOffsets(result, (CSTNode)dtParser.getSym(1), (CSTNode)dtParser.getSym(4));
+				} else {
+					setOffsets(result, getIToken(dtParser.getToken(2)), (CSTNode)dtParser.getSym(4));
+				}
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 257:  initOrDerValueCS ::= initOrDerValueCSopt derive : oclExpressionCS
+			//
+			case 257: {
+				
+				CSTNode result = createDerValueCS(
+						(InitOrDerValueCS)dtParser.getSym(1),
+						(OCLExpressionCS)dtParser.getSym(4)
+					);
+				if (dtParser.getSym(1) != null) {
+					setOffsets(result, (CSTNode)dtParser.getSym(1), (CSTNode)dtParser.getSym(4));
+				} else {
+					setOffsets(result, getIToken(dtParser.getToken(2)), (CSTNode)dtParser.getSym(4));
+				}
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 258:  initOrDerValueCSopt ::= $Empty
+			//
+			case 258:
+				dtParser.setSym1(null);
+				break;
+ 
+			//
+			// Rule 260:  classifierContextDeclCS ::= context pathNameCS invOrDefCSm
+			//
+			case 260: {
+				
+				EList<InvOrDefCS> list = (EList<InvOrDefCS>)dtParser.getSym(3);
+				CSTNode result = createClassifierContextDeclCS(
+						(PathNameCS)dtParser.getSym(2),
+						list
+					);
+				setOffsets(result, getIToken(dtParser.getToken(1)), list.get(list.size()-1));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 261:  invOrDefCSm ::= invOrDefCS
+			//
+			case 261: {
+				
+				EList<InvOrDefCS> result = new BasicEList<InvOrDefCS>();
+				result.add((InvOrDefCS)dtParser.getSym(1));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 262:  invOrDefCSm ::= invOrDefCSm invOrDefCS
+			//
+			case 262: {
+				
+				EList<InvOrDefCS> result = (EList<InvOrDefCS>)dtParser.getSym(1);
+				result.add((InvOrDefCS)dtParser.getSym(2));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 263:  invOrDefCS ::= inv simpleNameCSopt : oclExpressionCS
+			//
+			case 263: {
+				
+				CSTNode result = createInvCS(
+						(SimpleNameCS)dtParser.getSym(2),
+						(OCLExpressionCS)dtParser.getSym(4)
+					);
+				setOffsets(result, getIToken(dtParser.getToken(1)), (CSTNode)dtParser.getSym(4));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 264:  invOrDefCS ::= def simpleNameCSopt : defExpressionCS
+			//
+			case 264: {
+				
+				CSTNode result = createDefCS(
+						(SimpleNameCS)dtParser.getSym(2),
+						(DefExpressionCS)dtParser.getSym(4)
+					);
+				setOffsets(result, getIToken(dtParser.getToken(1)), (CSTNode)dtParser.getSym(4));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 265:  defExpressionCS ::= typedVariableCS = oclExpressionCS
+			//
+			case 265: {
+				
+				VariableCS variableCS = (VariableCS)dtParser.getSym(1);
+				OCLExpressionCS expressionCS = (OCLExpressionCS)dtParser.getSym(3);
+				CSTNode result = createDefExpressionCS(
+						variableCS,
+						null,
+						expressionCS
+					);
+				setOffsets(result, variableCS, expressionCS);
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 266:  defExpressionCS ::= operationCS1 = oclExpressionCS
+			//
+			case 266: {
+				
+				CSTNode result = createDefExpressionCS(
+						null,
+						(OperationCS)dtParser.getSym(1),
+						(OCLExpressionCS)dtParser.getSym(3)
+					);
+				setOffsets(result, (CSTNode)dtParser.getSym(1), (CSTNode)dtParser.getSym(3));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 267:  operationContextDeclCS ::= context operationCS2 prePostOrBodyDeclCSm
+			//
+			case 267: {
+				
+				EList prePostOrBodyDecls = (EList)dtParser.getSym(3);
+				CSTNode result = createOperationContextDeclCS(
+						(OperationCS)dtParser.getSym(2),
+						prePostOrBodyDecls
+					);
+				setOffsets(result, getIToken(dtParser.getToken(1)), (CSTNode)prePostOrBodyDecls.get(prePostOrBodyDecls.size()-1));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 268:  prePostOrBodyDeclCSm ::= prePostOrBodyDeclCS
+			//
+			case 268: {
+				
+				EList result = new BasicEList();
+				result.add(dtParser.getSym(1));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 269:  prePostOrBodyDeclCSm ::= prePostOrBodyDeclCSm prePostOrBodyDeclCS
+			//
+			case 269: {
+				
+				EList result = (EList)dtParser.getSym(1);
+				result.add(dtParser.getSym(2));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 270:  prePostOrBodyDeclCS ::= pre simpleNameCSopt : oclExpressionCS
+			//
+			case 270: {
+				
+				CSTNode result = createPrePostOrBodyDeclCS(
+						PrePostOrBodyEnum.PRE_LITERAL,
+						(SimpleNameCS)dtParser.getSym(2),
+						(OCLExpressionCS)dtParser.getSym(4)
+					);
+				setOffsets(result, getIToken(dtParser.getToken(1)), (CSTNode)dtParser.getSym(4));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 271:  prePostOrBodyDeclCS ::= post simpleNameCSopt : oclExpressionCS
+			//
+			case 271: {
+				
+				CSTNode result = createPrePostOrBodyDeclCS(
+						PrePostOrBodyEnum.POST_LITERAL,
+						(SimpleNameCS)dtParser.getSym(2),
+						(OCLExpressionCS)dtParser.getSym(4)
+					);
+				setOffsets(result, getIToken(dtParser.getToken(1)), (CSTNode)dtParser.getSym(4));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 272:  prePostOrBodyDeclCS ::= body simpleNameCSopt : oclExpressionCS
+			//
+			case 272: {
+				
+				CSTNode result = createPrePostOrBodyDeclCS(
+						PrePostOrBodyEnum.BODY_LITERAL,
+						(SimpleNameCS)dtParser.getSym(2),
+						(OCLExpressionCS)dtParser.getSym(4)
+					);
+				setOffsets(result, getIToken(dtParser.getToken(1)), (CSTNode)dtParser.getSym(4));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 273:  ERROR_Empty ::= ERROR_TOKEN
+			//
+			case 273: {
+				
+				reportErrorTokenMessage(dtParser.getToken(1), OCLParserErrors.EXTRA_TOKENS);
+	  		  break;
+			}
+	 
+			//
+			// Rule 274:  ERROR_IsMarkedPreCS ::= ERROR_TOKEN
+			//
+			case 274: {
+				
+				reportErrorTokenMessage(dtParser.getToken(1), OCLParserErrors.MISSING_AT_PRE);
+				IsMarkedPreCS result = createIsMarkedPreCS(false);
+				setOffsets(result, getIToken(dtParser.getToken(1)));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 275:  ERROR_PathNameCS ::= ERROR_TOKEN
+			//
+			case 275: {
+				
+				reportErrorTokenMessage(dtParser.getToken(1), OCLParserErrors.MISSING_PATH_NAME);
+				CSTNode result = createPathNameCS(getTokenText(dtParser.getToken(1)));
+				setOffsets(result, getIToken(dtParser.getToken(1)));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 276:  ERROR_SimpleNameCS ::= ERROR_TOKEN
+			//
+			case 276: {
+				
+				reportErrorTokenMessage(dtParser.getToken(1), OCLParserErrors.MISSING_SIMPLE_NAME);
+				SimpleNameCS result = createSimpleNameCS(
+						SimpleTypeEnum.IDENTIFIER_LITERAL,
+						getTokenText(dtParser.getToken(1))
+					);
+				setOffsets(result, getIToken(dtParser.getToken(1)));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 277:  attrOrNavCallExpCS ::= simpleNameCS [ argumentsCS ERROR_TOKEN
+			//
+			case 277: {
+				
+				reportErrorTokenMessage(dtParser.getToken(4), OCLParserErrors.MISSING_RBRACK);
+				CSTNode result = createFeatureCallExpCS(
+						(SimpleNameCS)dtParser.getSym(1),
+						(EList)dtParser.getSym(3),
+						createIsMarkedPreCS(false)
+					);
+				setOffsets(result, (CSTNode)dtParser.getSym(1), getIToken(dtParser.getToken(4)));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 278:  collectionTypeCS ::= collectionTypeIdentifierCS ( typeCS ERROR_TOKEN
+			//
+			case 278: {
+				
+				reportErrorTokenMessage(dtParser.getToken(4), OCLParserErrors.MISSING_RPAREN);
+				Object[] objs = (Object[])dtParser.getSym(1);
+				CSTNode result = createCollectionTypeCS(
+						(CollectionTypeIdentifierEnum)objs[1],
+						(TypeCS)dtParser.getSym(3)
+					);
+				setOffsets(result, (IToken)objs[0], getIToken(dtParser.getToken(4)));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 279:  collectionTypeCS ::= collectionTypeIdentifierCS ERROR_TOKEN
+			//
+			case 279: {
+				
+				reportErrorTokenMessage(dtParser.getToken(2), OCLParserErrors.MISSING_LPAREN);
+				Object[] objs = (Object[])dtParser.getSym(1);
+				CSTNode result = createCollectionTypeCS(
+						(CollectionTypeIdentifierEnum)objs[1],
+						null
+					);
+				setOffsets(result, (IToken)objs[0], getIToken(dtParser.getToken(2)));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 280:  dotArrowExpCS ::= pathNameCS :: ERROR_simpleNameCS ( argumentsCSopt )
+			//
+			case 280: {
+				
+				OperationCallExpCS result = createOperationCallExpCS(
+						(PathNameCS)dtParser.getSym(1),
+						(SimpleNameCS)dtParser.getSym(3),
+						(EList)dtParser.getSym(5)
+					);
+				setOffsets(result, (CSTNode)dtParser.getSym(1), getIToken(dtParser.getToken(6)));
+				result.setAccessor(DotOrArrowEnum.DOT_LITERAL);
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 281:  enumLiteralExpCS ::= pathNameCS :: ERROR_SimpleNameCS
+			//
+			case 281: {
+				
+				PathNameCS pathNameCS = (PathNameCS)dtParser.getSym(1);
+				SimpleNameCS simpleNameCS = (SimpleNameCS)dtParser.getSym(3);
+				CSTNode result = createEnumLiteralExpCS(
+						pathNameCS,
+						simpleNameCS
+					);
+				setOffsets(result, pathNameCS, simpleNameCS);
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 282:  featureCallExpCS ::= unaryName ERROR_IsMarkedPreCS ( argumentsCSopt )
+			//
+			case 282:
+ 
+			//
+			// Rule 283:  keywordOperationCallExpCS ::= keywordAsName ERROR_IsMarkedPreCS ( argumentsCSopt )
+			//
+			case 283:
+ 
+			//
+			// Rule 284:  operationCallExpCS ::= binaryName ERROR_IsMarkedPreCS ( argumentsCSopt )
+			//
+			case 284: {
+				
+				SimpleNameCS simpleNameCS = (SimpleNameCS)dtParser.getSym(1);
+				CSTNode result = createOperationCallExpCS(
+						simpleNameCS,
+						(IsMarkedPreCS)dtParser.getSym(2),
+						(EList)dtParser.getSym(4)
+					);
+				setOffsets(result, simpleNameCS, getIToken(dtParser.getToken(5)));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 285:  operationCallExpCS ::= oclIsInStateName ERROR_IsMarkedPreCS ( stateExpCS )
+			//
+			case 285: {
+				
+				SimpleNameCS simpleNameCS = (SimpleNameCS)dtParser.getSym(1);
+				CSTNode result = createOperationCallExpCS(
+						simpleNameCS,
+						(IsMarkedPreCS)dtParser.getSym(2),
+						(StateExpCS)dtParser.getSym(4)
+					);
+				setOffsets(result, simpleNameCS, getIToken(dtParser.getToken(5)));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 286:  ifExpCS ::= if oclExpressionCS then oclExpressionCS else oclExpressionCS ERROR_Garbage endif
+			//
+			case 286: {
+				
+				CSTNode result = createIfExpCS(
+						(OCLExpressionCS)dtParser.getSym(2),
+						(OCLExpressionCS)dtParser.getSym(4),
+						(OCLExpressionCS)dtParser.getSym(6)
+					);
+				setOffsets(result, getIToken(dtParser.getToken(1)), getIToken(dtParser.getToken(8)));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 287:  ifExpCS ::= if oclExpressionCS then oclExpressionCS else oclExpressionCS ERROR_TOKEN
+			//
+			case 287: {
+				
+				reportErrorTokenMessage(dtParser.getToken(7), OCLParserErrors.MISSING_ENDIF);
+				CSTNode result = createIfExpCS(
+						(OCLExpressionCS)dtParser.getSym(2),
+						(OCLExpressionCS)dtParser.getSym(4),
+						(OCLExpressionCS)dtParser.getSym(6)
+					);
+				setOffsets(result, getIToken(dtParser.getToken(1)), getIToken(dtParser.getToken(7)));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 288:  ifExpCS ::= if oclExpressionCS then oclExpressionCS ERROR_TOKEN
+			//
+			case 288: {
+				
+				reportErrorTokenMessage(dtParser.getToken(5), OCLParserErrors.MISSING_ELSE_ENDIF);
+				CSTNode result = createIfExpCS(
+						(OCLExpressionCS)dtParser.getSym(2),
+						(OCLExpressionCS)dtParser.getSym(4),
+						createInvalidLiteralExpCS(getTokenText(dtParser.getToken(5)))
+					);
+				setOffsets(result, getIToken(dtParser.getToken(1)), getIToken(dtParser.getToken(5)));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 289:  ifExpCS ::= if oclExpressionCS ERROR_TOKEN
+			//
+			case 289: {
+				
+				reportErrorTokenMessage(dtParser.getToken(3), OCLParserErrors.MISSING_THEN_ELSE_ENDIF);
+				CSTNode result = createIfExpCS(
+						(OCLExpressionCS)dtParser.getSym(2),
+						createInvalidLiteralExpCS(getTokenText(dtParser.getToken(3))),
+						createInvalidLiteralExpCS(getTokenText(dtParser.getToken(3)))
+					);
+				setOffsets(result, getIToken(dtParser.getToken(1)), getIToken(dtParser.getToken(3)));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 290:  ifExpCS ::= if ERROR_TOKEN endif
+			//
+			case 290: {
+				
+				reportErrorTokenMessage(dtParser.getToken(3), OCLParserErrors.MISSING_THEN_ELSE);
+				CSTNode result = createIfExpCS(
+						createInvalidLiteralExpCS(getTokenText(dtParser.getToken(2))),
+						createInvalidLiteralExpCS(getTokenText(dtParser.getToken(2))),
+						createInvalidLiteralExpCS(getTokenText(dtParser.getToken(2)))
+					);
+				setOffsets(result, getIToken(dtParser.getToken(1)), getIToken(dtParser.getToken(3)));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 291:  messageExpCS ::= ^ simpleNameCS ERROR_TOKEN
+			//
+			case 291:
+ 
+			//
+			// Rule 292:  messageExpCS ::= ^^ simpleNameCS ERROR_TOKEN
+			//
+			case 292: {
+				
+				reportErrorTokenMessage(dtParser.getToken(1), OCLParserErrors.MISSING_MESSAGE_ARGUMENTS);
+				CSTNode result = createMessageExpCS(
+						getIToken(dtParser.getToken(1)).getKind() == OCLBacktrackingParsersym.TK_CARET,
+						(SimpleNameCS)dtParser.getSym(2),
+						new BasicEList<OCLMessageArgCS>()
+					);
+				setOffsets(result, getIToken(dtParser.getToken(1)), getIToken(dtParser.getToken(3)));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 293:  messageExpCS ::= ^ ERROR_SimpleNameCS
+			//
+			case 293:
+ 
+			//
+			// Rule 294:  messageExpCS ::= ^^ ERROR_SimpleNameCS
+			//
+			case 294: {
+				
+				SimpleNameCS simpleNameCS = (SimpleNameCS)dtParser.getSym(2);
+				CSTNode result = createMessageExpCS(
+						getIToken(dtParser.getToken(1)).getKind() == OCLBacktrackingParsersym.TK_CARET,
+						simpleNameCS,
+						new BasicEList<OCLMessageArgCS>()
+					);
+				setOffsets(result, getIToken(dtParser.getToken(1)), simpleNameCS);
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 295:  oclExpCS ::= ERROR_TOKEN
+			//
+			case 295: {
+				
+				reportErrorTokenMessage(dtParser.getToken(1), OCLParserErrors.MISSING_EXPR);
+				CSTNode result = createInvalidLiteralExpCS(getTokenText(dtParser.getToken(1)));
+				setOffsets(result, getIToken(dtParser.getToken(1)));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 296:  oclExpCS ::= ( oclExpressionCS ERROR_TOKEN
+			//
+			case 296: {
+				
+				reportErrorTokenMessage(dtParser.getToken(3), OCLParserErrors.MISSING_RPAREN);
+				CSTNode result = (CSTNode)dtParser.getSym(2);
+				setOffsets(result, getIToken(dtParser.getToken(1)), getIToken(dtParser.getToken(3)));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 297:  operationCS1 ::= IDENTIFIER ( parametersCSopt ) ERROR_TOKEN
+			//
+			case 297: {
+				
+				reportErrorTokenMessage(dtParser.getToken(5), OCLParserErrors.MISSING_COLON);
+				CSTNode result = createOperationCS(
+						getTokenText(dtParser.getToken(1)),
+						(EList)dtParser.getSym(3),
+						null
+					);
+				setOffsets(result, getIToken(dtParser.getToken(1)), getIToken(dtParser.getToken(5)));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 298:  operationCS1 ::= IDENTIFIER ( parametersCSopt ERROR_TOKEN
+			//
+			case 298: {
+				
+				reportErrorTokenMessage(dtParser.getToken(4), OCLParserErrors.MISSING_RPAREN);
+				CSTNode result = createOperationCS(
+						getTokenText(dtParser.getToken(1)),
+						(EList)dtParser.getSym(3),
+						null
+					);
+				setOffsets(result, getIToken(dtParser.getToken(1)), getIToken(dtParser.getToken(4)));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 299:  operationCS1 ::= IDENTIFIER ERROR_TOKEN
+			//
+			case 299: {
+				
+				reportErrorTokenMessage(dtParser.getToken(2), OCLParserErrors.MISSING_LPAREN);
+				CSTNode result = createOperationCS(
+						getTokenText(dtParser.getToken(1)),
+						new BasicEList(),
+						null
+					);
+				setOffsets(result, getIToken(dtParser.getToken(1)), getIToken(dtParser.getToken(2)));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 300:  operationCS1 ::= ERROR_TOKEN
+			//
+			case 300: {
+				
+				reportErrorTokenMessage(dtParser.getToken(1), OCLParserErrors.MISSING_IDENTIFIER);
+				CSTNode result = createOperationCS(
+						getTokenText(dtParser.getToken(1)),
+						new BasicEList(),
+						null
+					);
+				setOffsets(result, getIToken(dtParser.getToken(1)));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 301:  operationCS2 ::= pathNameCS :: simpleNameCS ( parametersCSopt ) ERROR_TOKEN
+			//
+			case 301: {
+				
+				reportErrorTokenMessage(dtParser.getToken(7), OCLParserErrors.MISSING_COLON);
+				PathNameCS pathNameCS = (PathNameCS)dtParser.getSym(1);
+				CSTNode result = createOperationCS(
+						pathNameCS,
+						(SimpleNameCS)dtParser.getSym(3),
+						(EList)dtParser.getSym(5),
+						(TypeCS)dtParser.getSym(8)
+					);
+				setOffsets(result, pathNameCS, getIToken(dtParser.getToken(7)));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 302:  operationCS2 ::= pathNameCS :: simpleNameCS ( parametersCSopt ERROR_TOKEN
+			//
+			case 302: {
+				
+				reportErrorTokenMessage(dtParser.getToken(6), OCLParserErrors.MISSING_RPAREN);
+				PathNameCS pathNameCS = (PathNameCS)dtParser.getSym(1);
+				CSTNode result = createOperationCS(
+						pathNameCS,
+						(SimpleNameCS)dtParser.getSym(3),
+						(EList)dtParser.getSym(5),
+						null
+					);
+				setOffsets(result, pathNameCS, getIToken(dtParser.getToken(7)));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 303:  operationCS2 ::= pathNameCS :: simpleNameCS ERROR_TOKEN
+			//
+			case 303: {
+				
+				reportErrorTokenMessage(dtParser.getToken(4), OCLParserErrors.MISSING_LPAREN);
+				PathNameCS pathNameCS = (PathNameCS)dtParser.getSym(1);
+				CSTNode result = createOperationCS(
+						pathNameCS,
+						(SimpleNameCS)dtParser.getSym(3),
+						new BasicEList(),
+						null
+					);
+				setOffsets(result, pathNameCS, getIToken(dtParser.getToken(4)));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 304:  operationCS2 ::= pathNameCS :: ERROR_SimpleNameCS
+			//
+			case 304: {
+				
+				PathNameCS pathNameCS = (PathNameCS)dtParser.getSym(1);
+				SimpleNameCS simpleNameCS = (SimpleNameCS)dtParser.getSym(3);
+				CSTNode result = createOperationCS(
+						pathNameCS,
+						simpleNameCS,
+						new BasicEList(),
+						null
+					);
+				setOffsets(result, pathNameCS, simpleNameCS);
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 305:  parametersCS ::= ERROR_TOKEN
+			//
+			case 305: {
+				
+				reportErrorTokenMessage(dtParser.getToken(1), OCLParserErrors.MISSING_PARAMETERS);
+				EList result = new BasicEList();
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 306:  parametersCS ::= parametersCS , ERROR_TOKEN
+			//
+			case 306: {
+				
+				reportErrorTokenMessage(dtParser.getToken(3), OCLParserErrors.MISSING_PARAMETER);
+	  		  break;
+			}
+	 
+			//
+			// Rule 309:  tupleLiteralExpCS ::= Tuple ERROR_TOKEN
+			//
+			case 309: {
+				
+				reportErrorTokenMessage(dtParser.getToken(7), OCLParserErrors.MISSING_LBRACE);
+				CSTNode result = createTupleLiteralExpCS((EList)dtParser.getSym(3));
+				setOffsets(result, getIToken(dtParser.getToken(1)), getIToken(dtParser.getToken(4)));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 310:  variableCS ::= IDENTIFIER ERROR_TOKEN
+			//
+			case 310: {
+				
+				reportErrorTokenMessage(dtParser.getToken(2), OCLParserErrors.MISSING_VARIABLE_TYPE);
+				CSTNode result = createVariableCS(
+						getTokenText(dtParser.getToken(1)),
+						null,
+						null
+					);
+				setOffsets(result, getIToken(dtParser.getToken(1)), getIToken(dtParser.getToken(2)));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 311:  variableExpCS ::= simpleNameCS [ argumentsCS ERROR_TOKEN
+			//
+			case 311:
+ 
+			//
+			// Rule 312:  variableExpCS ::= keywordAsName1 [ argumentsCS ERROR_TOKEN
+			//
+			case 312: {
+				
+				reportErrorTokenMessage(dtParser.getToken(4), OCLParserErrors.MISSING_RBRACK);
+				CSTNode result = createVariableExpCS(
+						(SimpleNameCS)dtParser.getSym(1),
+						(EList)dtParser.getSym(3),
+						createIsMarkedPreCS(false)
+					);
+				setOffsets(result, (CSTNode)dtParser.getSym(1), getIToken(dtParser.getToken(4)));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 313:  variableListCS ::= ERROR_TOKEN
+			//
+			case 313:
+ 
+			//
+			// Rule 314:  variableListCS2 ::= ERROR_TOKEN
+			//
+			case 314: {
+				
+				reportErrorTokenMessage(dtParser.getToken(1), OCLParserErrors.MISSING_VARIABLES);
+				EList result = new BasicEList();
+				result.add(dtParser.getSym(1));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 315:  classifierContextDeclCS ::= context pathNameCS ERROR_TOKEN
+			//
+			case 315: {
+				
+				reportErrorTokenMessage(dtParser.getToken(3), OCLParserErrors.MISSING_INV_OR_DEF);
+				CSTNode result = createClassifierContextDeclCS(
+						(PathNameCS)dtParser.getSym(2),
+						new BasicEList<InvOrDefCS>()
+					);
+				setOffsets(result, getIToken(dtParser.getToken(1)), getIToken(dtParser.getToken(3)));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 316:  contextDeclCS99 ::= ERROR_TOKEN
+			//
+			case 316: {
+				
+				reportErrorTokenMessage(dtParser.getToken(1), OCLParserErrors.MISSING_CONTEXT);
+				dtParser.setSym1(new BasicEList());
+	  		  break;
+			}
+	 
+			//
+			// Rule 317:  defExpressionCS ::= typedVariableCS ERROR_TOKEN
+			//
+			case 317: {
+				
+				reportErrorTokenMessage(dtParser.getToken(2), OCLParserErrors.MISSING_EQUALS);
+				VariableCS variableCS = (VariableCS)dtParser.getSym(1);
+				CSTNode result = createDefExpressionCS(
+						variableCS,
+						null,
+						null
+					);
+				setOffsets(result, variableCS, getIToken(dtParser.getToken(2)));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 318:  defExpressionCS ::= IDENTIFIER ERROR_TOKEN
+			//
+			case 318: {
+				
+				reportErrorTokenMessage(dtParser.getToken(2), OCLParserErrors.MISSING_COLON);
+				VariableCS variableCS = createVariableCS(
+							getTokenText(dtParser.getToken(1)),
+							null,
+							null
+						);
+				setOffsets(variableCS, getIToken(dtParser.getToken(1)), (CSTNode)dtParser.getSym(3));
+				CSTNode result = createDefExpressionCS(
+						variableCS,
+						null,
+						null
+					);
+				setOffsets(result, variableCS, getIToken(dtParser.getToken(2)));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 319:  initOrDerValueCS ::= initOrDerValueCSopt init ERROR_TOKEN
+			//
+			case 319: {
+				
+				reportErrorTokenMessage(dtParser.getToken(3), OCLParserErrors.MISSING_COLON);
+				CSTNode result = createInitValueCS(
+						(InitOrDerValueCS)dtParser.getSym(1),
+						null
+					);
+				if (dtParser.getSym(1) != null) {
+					setOffsets(result, (CSTNode)dtParser.getSym(1), getIToken(dtParser.getToken(3)));
+				} else {
+					setOffsets(result, getIToken(dtParser.getToken(2)), getIToken(dtParser.getToken(3)));
+				}
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 320:  initOrDerValueCS ::= initOrDerValueCSopt derive ERROR_TOKEN
+			//
+			case 320: {
+				
+				reportErrorTokenMessage(dtParser.getToken(3), OCLParserErrors.MISSING_COLON);
+				CSTNode result = createDerValueCS(
+						(InitOrDerValueCS)dtParser.getSym(1),
+						null
+					);
+				if (dtParser.getSym(1) != null) {
+					setOffsets(result, (CSTNode)dtParser.getSym(1), getIToken(dtParser.getToken(3)));
+				} else {
+					setOffsets(result, getIToken(dtParser.getToken(2)), getIToken(dtParser.getToken(3)));
+				}
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 321:  invOrDefCS ::= inv simpleNameCS ERROR_TOKEN
+			//
+			case 321: {
+				
+				reportErrorTokenMessage(dtParser.getToken(3), OCLParserErrors.MISSING_COLON);
+				CSTNode result = createInvCS(
+						(SimpleNameCS)dtParser.getSym(2),
+						null
+					);
+				setOffsets(result, getIToken(dtParser.getToken(1)), getIToken(dtParser.getToken(3)));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 322:  invOrDefCS ::= def simpleNameCS ERROR_TOKEN
+			//
+			case 322: {
+				
+				reportErrorTokenMessage(dtParser.getToken(3), OCLParserErrors.MISSING_COLON);
+				CSTNode result = createDefCS(
+						(SimpleNameCS)dtParser.getSym(2),
+						null
+					);
+				setOffsets(result, getIToken(dtParser.getToken(1)), getIToken(dtParser.getToken(3)));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 323:  packageDeclarationCS ::= package pathNameCS contextDeclCSmopt ERROR_Empty endpackage
+			//
+			case 323: {
+				
+				CSTNode result = createPackageDeclarationCS(
+						(PathNameCS)dtParser.getSym(2),
+						(EList)dtParser.getSym(3)
+					);
+				setOffsets(result, getIToken(dtParser.getToken(1)), getIToken(dtParser.getToken(5)));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 324:  packageDeclarationCS ::= package pathNameCS contextDeclCSmopt ERROR_TOKEN
+			//
+			case 324: {
+				
+				reportErrorTokenMessage(dtParser.getToken(4), OCLParserErrors.MISSING_ENDPACKAGE);
+				CSTNode result = createPackageDeclarationCS(
+						(PathNameCS)dtParser.getSym(2),
+						(EList)dtParser.getSym(3)
+					);
+				setOffsets(result, getIToken(dtParser.getToken(1)), getIToken(dtParser.getToken(4)));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 325:  packageDeclarationCS ::= package ERROR_PathNameCS
+			//
+			case 325: {
+				
+				CSTNode result = createPackageDeclarationCS(
+						(PathNameCS)dtParser.getSym(2),
+						new BasicEList()
+					);
+				setOffsets(result, getIToken(dtParser.getToken(1)), getIToken(dtParser.getToken(2)));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 326:  prePostOrBodyDeclCS ::= pre simpleNameCS ERROR_TOKEN
+			//
+			case 326: {
+				
+				reportErrorTokenMessage(dtParser.getToken(3), OCLParserErrors.MISSING_COLON);
+				CSTNode result = createPrePostOrBodyDeclCS(
+						PrePostOrBodyEnum.PRE_LITERAL,
+						(SimpleNameCS)dtParser.getSym(2),
+						createInvalidLiteralExpCS(getTokenText(dtParser.getToken(3)))
+					);
+				setOffsets(result, getIToken(dtParser.getToken(1)), getIToken(dtParser.getToken(3)));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 327:  prePostOrBodyDeclCS ::= post simpleNameCS ERROR_TOKEN
+			//
+			case 327: {
+				
+				reportErrorTokenMessage(dtParser.getToken(3), OCLParserErrors.MISSING_COLON);
+				CSTNode result = createPrePostOrBodyDeclCS(
+						PrePostOrBodyEnum.POST_LITERAL,
+						(SimpleNameCS)dtParser.getSym(2),
+						createInvalidLiteralExpCS(getTokenText(dtParser.getToken(3)))
+					);
+				setOffsets(result, getIToken(dtParser.getToken(1)), getIToken(dtParser.getToken(3)));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 328:  prePostOrBodyDeclCS ::= body simpleNameCS ERROR_TOKEN
+			//
+			case 328: {
+				
+				reportErrorTokenMessage(dtParser.getToken(3), OCLParserErrors.MISSING_COLON);
+				CSTNode result = createPrePostOrBodyDeclCS(
+						PrePostOrBodyEnum.BODY_LITERAL,
+						(SimpleNameCS)dtParser.getSym(2),
+						createInvalidLiteralExpCS(getTokenText(dtParser.getToken(3)))
+					);
+				setOffsets(result, getIToken(dtParser.getToken(1)), getIToken(dtParser.getToken(3)));
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	 
+			//
+			// Rule 329:  propertyContextCS ::= context pathNameCS :: ERROR_SimpleNameCS
+			//
+			case 329: {
+				
+				SimpleNameCS simpleNameCS = (SimpleNameCS)dtParser.getSym(4);
+				CSTNode result = createPropertyContextCS(
+						(PathNameCS)dtParser.getSym(2),
+						simpleNameCS,
+						null,
+						null
+					);
+				setOffsets(result, getIToken(dtParser.getToken(1)), simpleNameCS);
+				dtParser.setSym1(result);
+	  		  break;
+			}
+	
+	
+			default:
+				break;
+		}
+		return;
+	}
+}
+
Index: src/org/eclipse/ocl/parser/backtracking/OCLParserErrors.l
===================================================================
RCS file: src/org/eclipse/ocl/parser/backtracking/OCLParserErrors.l
diff -N src/org/eclipse/ocl/parser/backtracking/OCLParserErrors.l
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ src/org/eclipse/ocl/parser/backtracking/OCLParserErrors.l	1 Jan 1970 00:00:00 -0000
@@ -0,0 +1,26 @@
+
+Options in effect for C:\Development\QvtDeclarative\plugins\org.eclipse.ocl\src\org\eclipse\ocl\parser\backtracking\OCLParserErrors.g:
+
+    ACTION-BLOCK=("","/.","./")
+
+    AST-DIRECTORY=""  AST-TYPE="Ast"  NOATTRIBUTES  NOAUTOMATIC-AST  NOBACKTRACK
+    BYTE  CONFLICTS  DAT-DIRECTORY="./"  DAT-FILE="OCLParserErrorsdcl.data"  
+    DCL-FILE="OCLParserErrorsdcl.xml"  NODEBUG  
+    DEF-FILE="OCLParserErrorsdef.xml"  NOEDIT  NOERROR-MAPS  ESCAPE='%'  
+    EXPORT-TERMINALS=("OCLParserErrorsexp.xml","","")  EXTENDS-PARSETABLE  
+    FACTORY="new "  FILE-PREFIX="OCLParserErrors"  NOFIRST  NOFOLLOW  
+    NOGOTO-DEFAULT  
+    GRM-FILE="C:\Development\QvtDeclarative\plugins\org.eclipse.ocl\src\org\eclipse\ocl\parser\backtracking\OCLParserErrors.g"
+    NOGOTO-DEFAULT  IMP-FILE="OCLParserErrorsimp.xml"  
+    INCLUDE-DIRECTORY="C:\Development\QvtDeclarative\plugins\org.eclipse.ocl\src\org\eclipse\ocl\parser\backtracking\;C:\Development\QvtDeclarative\tools\lpgdistribution\include"
+    NOGOTO-DEFAULT  IMP-FILE="OCLParserErrorsimp.xml"  LALR=1  NOLIST  MARGIN=0
+    MAX-CASES=1024  NAMES=OPTIMIZED  NONT-CHECK  OR_MARKER='|'  PACKAGE=""  
+    NOPARENT-SAVE  NOPARSETABLE-INTERFACES  PREFIX=""  PRIORITY  
+    PROGRAMMING_LANGUAGE=XML  PRS-FILE="OCLParserErrorsprs.xml"  NOQUIET  
+    READ-REDUCE  REMAP-TERMINALS  NOSCOPES  NOSERIALIZE  NOSHIFT-DEFAULT  
+    NOSINGLE-PRODUCTIONS  NOSOFT-KEYWORDS  NOSTATES  SUFFIX=""  
+    SYM-FILE="OCLParserErrorssym.xml"  TAB-FILE="OCLParserErrors.t"  NOTABLE  
+    TEMPLATE=""  TRACE=CONFLICTS  NOVARIABLES  NOVERBOSE  NOVISITOR  
+    VISITOR-TYPE="Visitor"  WARNINGS  NOXREF  
+
+C:\Development\QvtDeclarative\plugins\org.eclipse.ocl\src\org\eclipse\ocl\parser\backtracking\OCLParserErrors.g:21:1:21:8:583:590: Syntax error detected on this token
Index: src/org/eclipse/ocl/parser/backtracking/OCLBacktrackingParserprs.java
===================================================================
RCS file: src/org/eclipse/ocl/parser/backtracking/OCLBacktrackingParserprs.java
diff -N src/org/eclipse/ocl/parser/backtracking/OCLBacktrackingParserprs.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ src/org/eclipse/ocl/parser/backtracking/OCLBacktrackingParserprs.java	1 Jan 1970 00:00:00 -0000
@@ -0,0 +1,1874 @@
+/**
+* <copyright>
+*
+* Copyright (c) 2005, 2008 IBM Corporation, Zeligsoft Inc., and others.
+* All rights reserved.   This program and the accompanying materials
+* are made available under the terms of the Eclipse Public License v1.0
+* which accompanies this distribution, and is available at
+* http://www.eclipse.org/legal/epl-v10.html
+*
+* Contributors:
+*   IBM - Initial API and implementation
+*   E.D.Willink - Elimination of some shift-reduce conflicts
+*   E.D.Willink - Remove unnecessary warning suppression
+*   E.D.Willink - Bugs 225493, 243976
+*   Zeligsoft - Bug 243976
+*
+* </copyright>
+*
+* $Id: OCL_v200811051638.patch,v 1.1 2008/11/19 21:26:34 ewillink Exp $
+*/
+
+package org.eclipse.ocl.parser.backtracking;
+
+@SuppressWarnings("nls")
+public class OCLBacktrackingParserprs implements lpg.lpgjavaruntime.ParseTable, OCLBacktrackingParsersym {
+
+    public interface IsKeyword {
+        public final static byte isKeyword[] = {0,
+            0,0,0,0,0,1,0,0,0,0,
+            0,0,0,1,1,1,1,1,1,1,
+            1,1,1,1,1,1,1,0,0,1,
+            0,1,1,1,1,1,0,1,1,1,
+            1,1,1,1,1,1,1,1,1,1,
+            1,1,1,1,1,1,1,1,1,1,
+            0,0,0,0,1,1,1,1,1,0,
+            1,1,0,0,0,1,1,1,0,0,
+            0,1,1,1,0,0,0,0,0,1,
+            1,1,0,0,0,0,1,0,0,1,
+            1
+        };
+    };
+    public final static byte isKeyword[] = IsKeyword.isKeyword;
+    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }
+
+    public interface BaseCheck {
+        public final static short baseCheck[] = {0,
+            1,1,1,1,1,1,1,1,1,1,
+            1,1,1,1,1,1,1,1,1,1,
+            1,1,1,1,1,1,1,1,1,1,
+            1,1,1,1,1,1,1,1,1,1,
+            1,1,1,1,1,1,1,1,1,1,
+            1,1,1,1,6,8,0,1,1,3,
+            0,1,1,1,1,1,3,3,1,1,
+            3,3,3,3,3,3,1,1,3,3,
+            3,3,1,1,3,3,3,3,3,3,
+            3,3,1,1,1,1,3,3,3,3,
+            1,1,3,3,3,3,1,1,2,2,
+            1,2,2,4,6,1,1,1,1,3,
+            2,2,5,5,1,1,1,1,1,1,
+            1,1,1,1,1,1,1,3,0,1,
+            1,1,1,1,1,1,3,3,4,1,
+            1,1,1,1,0,1,1,3,1,1,
+            3,2,3,1,1,1,1,1,4,1,
+            1,1,1,1,1,1,1,2,2,2,
+            2,1,1,4,6,8,6,8,1,3,
+            1,5,3,0,1,1,1,1,1,4,
+            4,0,1,1,3,1,1,3,3,1,
+            1,5,5,5,1,5,2,2,5,0,
+            1,0,1,1,3,4,7,5,5,0,
+            1,1,3,1,1,3,1,1,1,1,
+            1,1,0,1,2,4,1,0,1,1,
+            2,1,1,1,7,4,4,0,1,3,
+            1,2,4,4,3,3,3,1,2,4,
+            4,4,1,1,1,1,4,4,2,6,
+            3,5,5,5,5,8,7,5,3,3,
+            3,3,2,2,1,3,5,4,2,1,
+            7,6,4,3,1,3,1,1,2,2,
+            4,4,1,1,3,1,2,2,3,3,
+            3,3,5,4,2,3,3,3,4,-101,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,-11,-43,
+            -2,0,0,-3,-4,-13,-75,-5,0,0,
+            -44,0,0,-16,-176,-17,-18,-12,-19,-20,
+            -21,-22,0,0,-23,-24,-107,0,0,-25,
+            -26,-27,0,0,0,0,0,0,0,0,
+            0,-46,0,0,-201,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,-28,-32,0,0,-138,0,0,0,
+            0,-48,-139,-33,-34,0,0,-35,-59,-60,
+            -14,-6,0,0,0,0,-202,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,-61,0,0,
+            0,0,0,0,0,0,-62,-63,-64,-65,
+            0,0,-66,-67,-68,-69,-70,-73,-74,-76,
+            -78,-79,-80,-47,0,0,0,0,-106,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,-81,-82,
+            0,0,-136,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,-109,0,0,0,0,-137,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,-83,-84,0,0,
+            -140,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,-85,
+            -86,-87,0,0,-141,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,-7,0,0,0,0,-187,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,-88,-89,
+            -90,0,-91,-92,-93,-94,-95,-96,-97,-98,
+            -99,-100,-113,-114,-129,-142,-143,-146,-110,0,
+            0,0,0,-193,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,-147,-148,0,0,-194,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,-149,-150,-151,0,
+            0,-200,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,-210,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,-152,-153,-154,0,0,-211,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,-159,-160,-161,0,0,
+            -103,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,-162,
+            -163,-71,0,-104,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,-164,-166,0,-198,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,-8,0,0,0,-232,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,-167,0,
+            -168,-169,-170,0,-171,-172,-173,-174,-175,-177,
+            -178,-179,-180,0,-36,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,-37,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,-38,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,-39,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            -40,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,-42,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,-49,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,-55,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,-77,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,-127,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,-128,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,-135,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,-144,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,-165,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            -185,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,-186,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,-189,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,-190,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,-221,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,-228,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,-230,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,-239,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,-240,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,-123,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,-124,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,-125,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,-126,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,-117,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,-118,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,-119,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,-120,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,-121,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,-122,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,-115,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,-116,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,-111,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,-112,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,-53,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,-54,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,-145,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,-108,
+            0,0,-181,-72,-182,0,0,0,0,0,
+            0,0,0,-183,-56,-184,-105,0,0,-1,
+            -157,-158,0,0,0,0,-134,-191,-195,-196,
+            -197,-203,-204,-206,-207,-208,-222,0,-192,0,
+            0,0,-209,-223,0,-212,0,0,0,-213,
+            -214,-30,-15,0,0,0,0,0,-215,-50,
+            0,-216,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,-29,0,0,0,0,-45,0,
+            -217,0,0,0,-218,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            -9,0,0,0,0,0,0,0,-226,0,
+            0,-130,0,-51,0,0,0,-132,0,-31,
+            0,0,0,-231,0,-219,0,0,0,-10,
+            0,0,-102,0,0,0,0,-41,0,0,
+            0,0,-131,-220,-224,-133,0,-52,-225,-188,
+            -57,-58,-233,-234,0,-199,-155,0,0,0,
+            -235,-236,0,0,-237,-238,0,0,0,-156,
+            -241,-242,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,-205,0,0,-227,0,
+            0,0,0,-229,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0
+        };
+    };
+    public final static short baseCheck[] = BaseCheck.baseCheck;
+    public final int baseCheck(int index) { return baseCheck[index]; }
+    public final static short rhs[] = baseCheck;
+    public final int rhs(int index) { return rhs[index]; };
+
+    public interface BaseAction {
+        public final static char baseAction[] = {
+            86,10,10,10,10,10,10,10,10,10,
+            10,10,10,10,10,10,10,10,10,67,
+            67,6,6,6,6,6,6,6,6,6,
+            6,6,7,7,7,7,7,7,7,7,
+            7,7,7,8,8,11,11,9,15,68,
+            87,88,12,108,108,89,90,69,69,71,
+            71,58,58,46,46,47,48,47,48,44,
+            45,44,44,44,45,45,45,42,43,42,
+            43,42,43,40,41,40,41,40,41,40,
+            41,40,41,36,36,38,37,38,37,38,
+            37,34,35,34,35,34,35,16,32,16,
+            16,17,17,17,17,17,18,18,18,18,
+            18,19,19,19,19,2,2,2,1,1,
+            1,1,1,1,1,1,1,3,3,72,
+            72,20,20,20,20,20,20,21,21,22,
+            5,5,5,5,5,93,93,94,94,73,
+            73,74,74,74,24,24,24,24,24,23,
+            27,28,29,30,31,31,25,26,91,91,
+            91,91,96,96,97,97,97,98,98,50,
+            49,50,50,76,70,70,55,55,55,55,
+            57,56,99,99,77,77,95,95,95,95,
+            75,75,75,13,14,79,13,78,78,78,
+            51,51,53,53,52,52,33,39,92,92,
+            80,80,81,81,64,64,64,86,86,86,
+            86,86,86,86,101,101,83,100,102,102,
+            84,84,60,60,60,63,82,82,85,85,
+            61,103,103,65,65,104,104,62,105,105,
+            66,66,66,106,59,4,54,78,57,57,
+            17,21,75,14,13,13,39,39,39,39,
+            39,92,92,92,92,18,18,89,89,89,
+            89,90,90,90,90,71,71,3,58,23,
+            50,19,19,77,95,61,109,104,104,82,
+            82,65,65,83,83,83,66,66,66,63,
+            1,125,3214,578,307,500,33,570,47,3225,
+            46,3372,3371,118,119,1252,101,387,111,116,
+            117,141,142,143,144,145,146,164,165,166,
+            167,168,102,108,580,96,83,84,581,94,
+            583,78,582,70,640,66,927,639,64,715,
+            1107,1671,3294,483,2491,1955,715,4,72,3340,
+            307,2479,125,138,737,32,1110,1426,88,1950,
+            1432,1952,1699,157,159,1998,2135,1558,125,3231,
+            2076,2154,2078,33,43,47,3390,46,3372,3371,
+            211,180,2122,926,928,100,125,3214,578,307,
+            500,33,570,47,3225,46,3372,3371,118,119,
+            1252,101,387,111,116,117,141,142,143,144,
+            145,146,164,165,166,167,168,102,108,580,
+            96,83,84,581,94,583,78,582,70,640,
+            66,234,639,64,49,3377,3262,3244,112,113,
+            388,245,181,2167,270,210,801,278,269,232,
+            3213,307,1026,283,2002,78,3213,307,1487,2032,
+            1888,1956,2329,125,399,3301,3346,197,125,3214,
+            578,307,500,33,570,47,3225,46,3372,3371,
+            118,119,1252,101,387,111,116,117,141,142,
+            143,144,145,146,164,165,166,167,168,102,
+            108,580,96,83,84,581,94,583,78,582,
+            70,640,66,234,639,64,308,262,1466,215,
+            397,251,252,253,254,215,1423,1840,1934,2034,
+            1680,232,3215,1920,1986,1996,2156,2197,2109,1857,
+            720,1701,725,71,2454,125,910,3364,3346,294,
+            125,3214,578,307,500,33,570,47,3225,46,
+            3372,3371,118,119,1252,101,387,111,116,117,
+            141,142,143,144,145,146,164,165,166,167,
+            168,102,108,580,96,83,84,581,94,583,
+            78,582,70,640,66,224,639,64,909,1650,
+            714,1144,1143,364,125,3214,578,307,500,33,
+            570,47,3225,46,3372,3371,118,119,1252,101,
+            387,111,116,117,141,142,143,144,145,146,
+            164,165,166,167,168,102,108,580,96,83,
+            84,581,94,583,78,582,70,640,66,224,
+            639,64,2454,125,1251,1144,1421,434,125,3214,
+            578,307,500,33,570,47,3225,46,3372,3371,
+            118,119,1252,101,387,111,116,117,141,142,
+            143,144,145,146,164,165,166,167,168,102,
+            108,580,96,83,84,581,94,583,78,582,
+            70,640,66,224,639,64,294,280,190,1144,
+            1422,504,125,3214,578,307,500,33,570,47,
+            3225,46,3372,3371,118,119,1252,101,387,111,
+            116,117,141,142,143,144,145,146,164,165,
+            166,167,168,102,108,580,96,83,84,581,
+            94,583,78,582,70,640,66,224,639,64,
+            288,1710,1825,1144,3224,574,125,3214,578,307,
+            500,33,570,47,3225,46,3372,3371,118,119,
+            1252,101,387,111,116,117,141,142,143,144,
+            145,146,164,165,166,167,168,102,108,580,
+            96,83,84,581,94,583,78,582,70,640,
+            66,224,639,64,2354,125,401,1144,3226,644,
+            125,3214,578,307,500,33,570,47,3225,46,
+            3372,3371,118,119,1252,101,387,111,116,117,
+            141,142,143,144,145,146,164,165,166,167,
+            168,102,108,580,96,83,84,581,94,583,
+            78,582,70,640,66,927,639,64,308,2217,
+            94,733,400,1106,2263,1873,1093,2081,2265,2266,
+            2275,2332,2342,1471,1398,1483,1610,2199,2357,2454,
+            125,1304,158,159,743,125,3214,578,307,500,
+            33,570,47,3225,46,3372,3371,118,119,1252,
+            101,387,111,116,117,141,142,143,144,145,
+            146,164,165,166,167,168,102,108,580,96,
+            83,84,581,94,583,78,582,70,640,66,
+            224,639,64,293,1703,2124,1144,3246,813,125,
+            3214,578,307,500,33,570,47,3225,46,3372,
+            3371,118,119,1252,101,387,111,116,117,141,
+            142,143,144,145,146,164,165,166,167,168,
+            102,108,580,96,83,84,581,94,583,78,
+            582,70,640,66,224,639,64,1745,1747,2360,
+            1144,3253,1256,125,3214,578,307,500,33,570,
+            47,3225,46,3372,3371,118,119,1252,101,387,
+            111,116,117,141,142,143,144,145,146,164,
+            165,166,167,168,102,108,580,96,83,84,
+            581,94,583,78,582,70,640,66,3269,639,
+            64,191,3261,883,125,3214,578,307,500,33,
+            570,47,3225,46,3372,3371,118,119,1252,101,
+            387,111,116,117,141,142,143,144,145,146,
+            164,165,166,167,168,102,108,580,96,83,
+            84,581,94,583,78,582,70,640,66,224,
+            639,64,1858,2211,2361,1144,3365,953,125,3214,
+            578,307,500,33,570,47,3225,46,3372,3371,
+            118,119,1252,101,387,111,116,117,141,142,
+            143,144,145,146,164,165,166,167,168,102,
+            108,580,96,83,84,581,94,583,78,582,
+            70,640,66,224,639,64,2363,2367,2385,1144,
+            3369,1116,125,3214,578,307,500,33,570,47,
+            3225,46,3372,3371,118,119,1252,101,387,111,
+            116,117,141,142,143,144,145,146,164,165,
+            166,167,168,102,108,580,96,83,84,581,
+            94,583,78,582,70,640,66,224,639,64,
+            2410,178,1781,1037,1116,125,3214,578,307,500,
+            33,570,47,3225,46,3372,3371,118,119,1252,
+            101,387,111,116,117,141,142,143,144,145,
+            146,164,165,166,167,168,102,108,580,96,
+            83,84,581,94,583,78,582,70,640,66,
+            224,639,64,122,1112,1465,1038,1116,125,3214,
+            578,307,500,33,570,47,3225,46,3372,3371,
+            118,119,1252,101,387,111,116,117,141,142,
+            143,144,145,146,164,165,166,167,168,102,
+            108,580,96,83,84,581,94,583,78,582,
+            70,640,66,224,639,64,2379,125,405,3256,
+            1023,125,3214,578,307,500,33,570,47,3225,
+            46,3372,3371,118,119,1252,101,387,111,116,
+            117,141,142,143,144,145,146,164,165,166,
+            167,168,102,108,580,96,83,84,581,94,
+            583,78,582,70,640,66,234,639,64,1468,
+            308,171,176,1595,402,1475,1870,1983,1905,2382,
+            2000,2278,2386,2390,233,1116,125,3214,578,307,
+            500,33,570,47,3225,46,3372,3371,118,119,
+            1252,101,387,111,116,117,141,142,143,144,
+            145,146,164,165,166,167,168,102,108,580,
+            96,83,84,581,94,583,78,582,70,640,
+            66,257,639,64,1116,125,3214,578,307,500,
+            33,570,47,3225,46,3372,3371,118,119,1252,
+            101,387,111,116,117,141,142,143,144,145,
+            146,164,165,166,167,168,102,108,580,96,
+            83,84,581,94,583,78,582,70,640,66,
+            256,639,64,1116,125,3214,578,307,500,33,
+            570,47,3225,46,3372,3371,118,119,1252,101,
+            387,111,116,117,141,142,143,144,145,146,
+            164,165,166,167,168,102,108,580,96,83,
+            84,581,94,583,78,582,70,640,66,272,
+            639,64,1116,125,3214,578,307,500,33,570,
+            47,3225,46,3372,3371,118,119,1252,101,387,
+            111,116,117,141,142,143,144,145,146,164,
+            165,166,167,168,102,108,580,96,83,84,
+            581,94,583,78,582,70,640,66,271,639,
+            64,1116,125,3214,578,307,500,33,570,47,
+            3225,46,3372,3371,118,119,1252,101,387,111,
+            116,117,141,142,143,144,145,146,164,165,
+            166,167,168,102,108,580,96,83,84,581,
+            94,583,78,582,70,640,66,270,639,64,
+            1116,125,3214,578,307,500,33,570,47,3225,
+            46,3372,3371,118,119,1252,101,387,111,116,
+            117,141,142,143,144,145,146,164,165,166,
+            167,168,102,108,580,96,83,84,581,94,
+            583,78,582,70,640,66,263,639,64,1116,
+            125,3214,578,307,500,33,570,47,3225,46,
+            3372,3371,118,119,1252,101,387,111,116,117,
+            141,142,143,144,145,146,164,165,166,167,
+            168,102,108,580,96,83,84,581,94,583,
+            78,582,70,640,66,192,639,64,1116,125,
+            3214,578,307,500,33,570,47,3225,46,3372,
+            3371,118,119,1252,101,387,111,116,117,141,
+            142,143,144,145,146,164,165,166,167,168,
+            102,108,580,96,83,84,581,94,583,78,
+            582,70,640,66,916,639,64,1186,125,3214,
+            578,307,500,33,570,47,3225,46,3372,3371,
+            118,119,1252,101,387,111,116,117,141,142,
+            143,144,145,146,164,165,166,167,168,102,
+            108,580,96,83,84,581,94,583,78,582,
+            70,640,66,923,639,64,1116,125,3214,578,
+            307,500,33,570,47,3225,46,3372,3371,118,
+            119,1252,101,387,111,116,117,141,142,143,
+            144,145,146,164,165,166,167,168,102,108,
+            580,96,83,84,581,94,583,78,582,70,
+            640,66,266,639,64,1116,125,3214,578,307,
+            500,33,570,47,3225,46,3372,3371,118,119,
+            1252,101,387,111,116,117,141,142,143,144,
+            145,146,164,165,166,167,168,102,108,580,
+            96,83,84,581,94,583,78,582,70,640,
+            66,265,639,64,1116,125,3214,578,307,500,
+            33,570,47,3225,46,3372,3371,118,119,1252,
+            101,387,111,116,117,141,142,143,144,145,
+            146,164,165,166,167,168,102,108,580,96,
+            83,84,581,94,583,78,582,70,640,66,
+            226,639,64,1116,125,3214,578,307,500,33,
+            570,47,3225,46,3372,3371,118,119,1252,101,
+            387,111,116,117,141,142,143,144,145,146,
+            164,165,166,167,168,102,108,580,96,83,
+            84,581,94,583,78,582,70,640,66,162,
+            639,64,1116,125,3214,578,307,500,33,570,
+            47,3225,46,3372,3371,118,119,1252,101,387,
+            111,116,117,141,142,143,144,145,146,164,
+            165,166,167,168,102,108,580,96,83,84,
+            581,94,583,78,582,70,640,66,3242,639,
+            64,1116,125,3214,578,307,500,33,570,47,
+            3225,46,3372,3371,118,119,1252,101,387,111,
+            116,117,141,142,143,144,145,146,164,165,
+            166,167,168,102,108,580,96,83,84,581,
+            94,583,78,582,70,640,66,163,639,64,
+            1116,125,3214,578,307,500,33,570,47,3225,
+            46,3372,3371,118,119,1252,101,387,111,116,
+            117,141,142,143,144,145,146,164,165,166,
+            167,168,102,108,580,96,83,84,581,94,
+            583,78,582,70,640,66,161,639,64,1116,
+            125,3214,578,307,500,33,570,47,3225,46,
+            3372,3371,118,119,1252,101,387,111,116,117,
+            141,142,143,144,145,146,164,165,166,167,
+            168,102,108,580,96,83,84,581,94,583,
+            78,582,70,640,66,193,639,64,1116,125,
+            3214,578,307,500,33,570,47,3225,46,3372,
+            3371,118,119,1252,101,387,111,116,117,141,
+            142,143,144,145,146,164,165,166,167,168,
+            102,108,580,96,83,84,581,94,583,78,
+            582,70,640,66,225,639,64,1116,125,3214,
+            578,307,500,33,570,47,3225,46,3372,3371,
+            118,119,1252,101,387,111,116,117,141,142,
+            143,144,145,146,164,165,166,167,168,102,
+            108,580,96,83,84,581,94,583,78,582,
+            70,640,66,3373,639,64,1116,125,3214,578,
+            307,500,33,570,47,3225,46,3372,3371,118,
+            119,1252,101,387,111,116,117,141,142,143,
+            144,145,146,164,165,166,167,168,102,108,
+            580,96,83,84,581,94,583,78,582,70,
+            640,66,3381,639,64,1116,125,3214,578,307,
+            500,33,570,47,3225,46,3372,3371,118,119,
+            1252,101,387,111,116,117,141,142,143,144,
+            145,146,164,165,166,167,168,102,108,580,
+            96,83,84,581,94,583,78,582,70,640,
+            66,3385,639,64,1116,125,3214,578,307,500,
+            33,570,47,3225,46,3372,3371,118,119,1252,
+            101,387,111,116,117,141,142,143,144,145,
+            146,164,165,166,167,168,102,108,580,96,
+            83,84,581,94,583,78,582,70,640,66,
+            3391,639,64,1116,125,3214,578,307,500,33,
+            570,47,3225,46,3372,3371,118,119,1252,101,
+            387,111,116,117,141,142,143,144,145,146,
+            164,165,166,167,168,102,108,580,96,83,
+            84,581,94,583,78,582,70,640,66,3392,
+            639,64,1116,125,3214,578,307,500,33,570,
+            47,3225,46,3372,3371,118,119,1252,101,387,
+            111,116,117,141,142,143,144,145,146,164,
+            165,166,167,168,102,108,580,96,83,84,
+            581,94,583,78,582,70,1413,68,1116,125,
+            3214,578,307,500,33,570,47,3225,46,3372,
+            3371,118,119,1252,101,387,111,116,117,141,
+            142,143,144,145,146,164,165,166,167,168,
+            102,108,580,96,83,84,581,94,583,78,
+            1415,76,1116,125,3214,578,307,500,33,570,
+            47,3225,46,3372,3371,118,119,1252,101,387,
+            111,116,117,141,142,143,144,145,146,164,
+            165,166,167,168,102,108,580,96,83,84,
+            581,94,583,78,1416,75,1116,125,3214,578,
+            307,500,33,570,47,3225,46,3372,3371,118,
+            119,1252,101,387,111,116,117,141,142,143,
+            144,145,146,164,165,166,167,168,102,108,
+            580,96,83,84,581,94,583,78,1417,74,
+            1116,125,3214,578,307,500,33,570,47,3225,
+            46,3372,3371,118,119,1252,101,387,111,116,
+            117,141,142,143,144,145,146,164,165,166,
+            167,168,102,108,580,96,83,84,581,94,
+            1411,82,1116,125,3214,578,307,500,33,570,
+            47,3225,46,3372,3371,118,119,1252,101,387,
+            111,116,117,141,142,143,144,145,146,164,
+            165,166,167,168,102,108,580,96,83,84,
+            581,94,1412,80,1116,125,3214,578,307,500,
+            33,570,47,3225,46,3372,3371,118,119,1252,
+            101,387,111,116,117,141,142,143,144,145,
+            146,164,165,166,167,168,102,108,580,96,
+            91,92,581,94,1116,125,3214,578,307,500,
+            33,570,47,3225,46,3372,3371,118,119,1252,
+            101,387,111,116,117,141,142,143,144,145,
+            146,164,165,166,167,168,102,108,580,96,
+            89,90,581,94,1116,125,3214,578,307,500,
+            33,570,47,3225,46,3372,3371,118,119,1252,
+            101,387,111,116,117,141,142,143,144,145,
+            146,164,165,166,167,168,102,108,580,96,
+            87,88,581,94,1116,125,3214,578,307,500,
+            33,570,47,3225,46,3372,3371,118,119,1252,
+            101,387,111,116,117,141,142,143,144,145,
+            146,164,165,166,167,168,102,108,580,96,
+            85,86,581,94,1326,125,3214,578,307,500,
+            33,570,47,3225,46,3372,3371,118,119,1252,
+            101,387,111,116,117,141,142,143,144,145,
+            146,164,165,166,167,168,102,108,1305,100,
+            1326,125,3214,578,307,500,33,570,47,3225,
+            46,3372,3371,118,119,1252,101,387,111,116,
+            117,141,142,143,144,145,146,164,165,166,
+            167,168,102,108,1409,98,1326,125,3214,578,
+            307,500,33,570,47,3225,46,3372,3371,118,
+            119,1252,105,387,111,116,117,141,142,143,
+            144,145,146,164,165,166,167,168,106,108,
+            1326,125,3214,578,307,500,33,570,47,3225,
+            46,3372,3371,118,119,1252,103,387,111,116,
+            117,141,142,143,144,145,146,164,165,166,
+            167,168,104,108,1490,125,3214,578,307,500,
+            33,570,47,3225,46,3372,3371,118,119,1252,
+            110,387,111,116,117,141,142,143,144,145,
+            146,164,165,166,167,168,1490,125,3214,578,
+            307,500,33,570,47,3225,46,3372,3371,118,
+            119,1252,109,387,111,116,117,141,142,143,
+            144,145,146,164,165,166,167,168,1395,125,
+            3214,578,307,500,33,570,47,3225,46,3372,
+            3371,118,119,1252,109,387,111,116,117,141,
+            142,143,144,145,146,164,165,166,167,168,
+            1619,125,3231,2335,1712,2411,1198,43,47,3232,
+            46,3372,3371,211,2432,192,2436,2186,125,1142,
+            2481,1808,2140,33,43,47,147,731,2140,2417,
+            2438,2442,1863,2158,1970,2306,2457,2279,196,2140,
+            494,307,495,2461,2238,196,1830,494,307,495,
+            2046,1704,1958,2304,196,121,494,307,495,2486,
+            2304,196,2212,494,307,495,918,49,3377,191,
+            242,281,217,218,917,178,191,205,210,124,
+            250,252,253,254,647,239,240,1197,1250,2031,
+            123,2504,195,197,198,2381,179,182,183,195,
+            197,198,385,244,501,388,381,55,484,197,
+            198,2404,125,410,56,911,197,198,268,2140,
+            237,398,2304,196,73,494,307,495,2304,196,
+            97,494,307,495,2304,196,2406,494,307,495,
+            2429,125,412,1097,250,252,253,254,717,251,
+            252,253,254,268,2505,2510,273,422,722,2511,
+            2364,1484,1731,1779,331,308,731,1827,3299,406,
+            219,2512,395,191,204,2516,1749,190,197,198,
+            1966,2517,2518,395,197,198,380,3467,3467,236,
+            197,198,191,207,308,261,1099,748,411,731,
+            3467,914,191,59,731,191,59,191,204,191,
+            209,3467,920,922,3467,191,3260,3467,3240,206,
+            919,921,1418,913,1419,1420,3239,1419,3467,3467,
+            3467,3241,3467,492,3467,915,208,747,984,917,
+            3467,3467,3467,3467,3467,191,60,3467,191,3374,
+            3467,3467,264,191,3382,3467,0
+        };
+    };
+    public final static char baseAction[] = BaseAction.baseAction;
+    public final int baseAction(int index) { return baseAction[index]; }
+    public final static char lhs[] = baseAction;
+    public final int lhs(int index) { return lhs[index]; };
+
+    public interface TermCheck {
+        public final static byte termCheck[] = {0,
+            0,1,2,0,4,5,6,7,8,9,
+            10,11,12,13,14,15,16,17,18,19,
+            20,21,22,23,24,25,26,27,28,29,
+            30,0,32,33,34,35,36,0,38,39,
+            40,41,42,43,44,45,46,47,48,49,
+            50,51,52,53,54,55,56,57,58,59,
+            60,61,62,63,64,65,66,67,68,69,
+            0,0,0,1,74,3,4,0,1,2,
+            10,11,12,13,0,14,15,0,85,86,
+            0,88,89,0,1,2,0,1,98,0,
+            1,2,3,4,5,6,7,8,9,10,
+            11,12,13,14,15,16,17,18,19,20,
+            21,22,23,24,25,26,27,28,29,30,
+            37,32,33,34,35,36,0,38,39,40,
+            41,42,43,44,45,46,47,48,49,50,
+            51,52,53,54,55,56,57,58,59,60,
+            61,62,63,64,65,66,67,68,69,76,
+            0,78,76,80,78,0,80,0,1,2,
+            10,11,12,13,97,10,11,12,13,0,
+            1,0,1,2,5,96,0,1,2,3,
+            4,5,6,7,8,9,10,11,12,13,
+            14,15,16,17,18,19,20,21,22,23,
+            24,25,26,27,28,29,30,0,32,33,
+            34,35,36,0,38,39,40,41,42,43,
+            44,45,46,47,48,49,50,51,52,53,
+            54,55,56,57,58,59,60,61,62,63,
+            64,65,66,67,68,69,75,0,1,0,
+            3,4,0,1,5,3,4,0,1,0,
+            3,4,0,1,5,3,4,0,1,2,
+            0,0,96,0,1,2,3,4,5,6,
+            7,8,9,10,11,12,13,14,15,16,
+            17,18,19,20,21,22,23,24,25,26,
+            27,28,29,30,37,32,33,34,35,36,
+            0,38,39,40,41,42,43,44,45,46,
+            47,48,49,50,51,52,53,54,55,56,
+            57,58,59,60,61,62,63,64,65,66,
+            67,68,69,0,1,2,3,4,5,6,
+            7,8,9,10,11,12,13,14,15,16,
+            17,18,19,20,21,22,23,24,25,26,
+            27,28,29,30,0,32,33,34,35,36,
+            70,38,39,40,41,42,43,44,45,46,
+            47,48,49,50,51,52,53,54,55,56,
+            57,58,59,60,61,62,63,64,65,66,
+            67,68,69,0,1,2,3,4,5,6,
+            7,8,9,10,11,12,13,14,15,16,
+            17,18,19,20,21,22,23,24,25,26,
+            27,28,29,30,70,32,33,34,35,36,
+            0,38,39,40,41,42,43,44,45,46,
+            47,48,49,50,51,52,53,54,55,56,
+            57,58,59,60,61,62,63,64,65,66,
+            67,68,69,0,1,2,3,4,5,6,
+            7,8,9,10,11,12,13,14,15,16,
+            17,18,19,20,21,22,23,24,25,26,
+            27,28,29,30,0,32,33,34,35,36,
+            0,38,39,40,41,42,43,44,45,46,
+            47,48,49,50,51,52,53,54,55,56,
+            57,58,59,60,61,62,63,64,65,66,
+            67,68,69,0,1,2,3,4,5,6,
+            7,8,9,10,11,12,13,14,15,16,
+            17,18,19,20,21,22,23,24,25,26,
+            27,28,29,30,0,32,33,34,35,36,
+            0,38,39,40,41,42,43,44,45,46,
+            47,48,49,50,51,52,53,54,55,56,
+            57,58,59,60,61,62,63,64,65,66,
+            67,68,69,0,1,2,0,4,5,6,
+            7,8,9,10,11,12,13,14,15,16,
+            17,18,19,20,21,22,23,24,25,26,
+            27,28,29,30,0,32,33,34,35,36,
+            0,38,39,40,41,42,43,44,45,46,
+            47,48,49,50,51,52,53,54,55,56,
+            57,58,59,60,61,62,63,64,65,66,
+            67,68,69,0,0,1,0,1,4,0,
+            4,0,1,77,0,4,80,8,9,5,
+            0,7,0,1,4,3,0,1,25,26,
+            27,98,0,1,2,3,4,5,6,7,
+            8,9,10,11,12,13,14,15,16,17,
+            18,19,20,21,22,23,24,25,26,27,
+            28,29,30,37,32,33,34,35,36,0,
+            38,39,40,41,42,43,44,45,46,47,
+            48,49,50,51,52,53,54,55,56,57,
+            58,59,60,61,62,63,64,65,66,67,
+            68,69,0,1,2,3,4,5,6,7,
+            8,9,10,11,12,13,14,15,16,17,
+            18,19,20,21,22,23,24,25,26,27,
+            28,29,30,0,32,33,34,35,36,0,
+            38,39,40,41,42,43,44,45,46,47,
+            48,49,50,51,52,53,54,55,56,57,
+            58,59,60,61,62,63,64,65,66,67,
+            68,69,0,1,2,3,4,5,6,7,
+            8,9,10,11,12,13,14,15,16,17,
+            18,19,20,21,22,23,24,25,26,27,
+            28,29,30,0,32,33,34,35,36,0,
+            38,39,40,41,42,43,44,45,46,47,
+            48,49,50,51,52,53,54,55,56,57,
+            58,59,60,61,62,63,64,65,66,67,
+            68,69,0,1,2,3,4,5,6,7,
+            8,9,10,11,12,13,14,15,16,17,
+            18,19,20,21,22,23,24,25,26,27,
+            28,29,30,0,32,33,34,35,36,0,
+            38,39,40,41,42,43,44,45,46,47,
+            48,49,50,51,52,53,54,55,56,57,
+            58,59,60,61,62,63,64,65,66,67,
+            68,69,0,1,2,0,4,5,6,7,
+            8,9,10,11,12,13,14,15,16,17,
+            18,19,20,21,22,23,24,25,26,27,
+            28,29,30,0,32,33,34,35,36,0,
+            38,39,40,41,42,43,44,45,46,47,
+            48,49,50,51,52,53,54,55,56,57,
+            58,59,60,61,62,63,64,65,66,67,
+            68,69,0,1,0,3,0,1,0,1,
+            4,76,4,78,0,0,0,1,3,0,
+            1,0,1,2,0,0,1,2,96,4,
+            5,6,7,8,9,10,11,12,13,14,
+            15,16,17,18,19,20,21,22,23,24,
+            25,26,27,28,29,30,37,32,33,34,
+            35,36,0,38,39,40,41,42,43,44,
+            45,46,47,48,49,50,51,52,53,54,
+            55,56,57,58,59,60,61,62,63,64,
+            65,66,67,68,69,0,1,2,82,4,
+            5,6,7,8,9,10,11,12,13,14,
+            15,16,17,18,19,20,21,22,23,24,
+            25,26,27,28,29,30,0,32,33,34,
+            35,36,0,38,39,40,41,42,43,44,
+            45,46,47,48,49,50,51,52,53,54,
+            55,56,57,58,59,60,61,62,63,64,
+            65,66,67,68,69,0,1,2,0,4,
+            5,6,7,8,9,10,11,12,13,14,
+            15,16,17,18,19,20,21,22,23,24,
+            25,26,27,28,29,30,0,32,33,34,
+            35,36,0,38,39,40,41,42,43,44,
+            45,46,47,48,49,50,51,52,53,54,
+            55,56,57,58,59,60,61,62,63,64,
+            65,66,67,68,69,0,1,2,0,4,
+            5,6,7,8,9,10,11,12,13,14,
+            15,16,17,18,19,20,21,22,23,24,
+            25,26,27,28,29,30,0,32,33,34,
+            35,36,0,38,39,40,41,42,43,44,
+            45,46,47,48,49,50,51,52,53,54,
+            55,56,57,58,59,60,61,62,63,64,
+            65,66,67,68,0,1,2,0,4,5,
+            6,7,8,9,10,11,12,13,14,15,
+            16,17,18,19,20,21,22,23,24,25,
+            26,27,28,29,30,0,32,33,34,35,
+            36,0,38,39,40,41,42,43,44,45,
+            46,47,48,49,50,51,52,53,54,55,
+            56,57,58,59,60,61,62,63,64,65,
+            66,67,37,0,0,0,1,0,37,0,
+            0,1,8,9,0,8,9,80,0,5,
+            83,7,0,0,1,2,0,5,2,0,
+            1,2,98,4,5,6,7,8,9,10,
+            11,12,13,14,15,16,17,18,19,20,
+            21,22,23,24,25,26,27,28,29,30,
+            0,32,33,34,35,36,0,38,39,40,
+            41,42,43,44,45,46,47,48,49,50,
+            51,52,53,54,55,56,57,58,59,60,
+            61,62,63,64,65,66,67,0,75,94,
+            90,4,5,6,7,8,9,10,11,12,
+            13,14,15,16,17,18,19,20,21,22,
+            23,24,25,26,27,28,29,30,0,32,
+            33,34,35,36,0,38,39,40,41,42,
+            43,44,45,46,47,48,49,50,51,0,
+            53,54,55,56,57,58,59,60,0,25,
+            26,27,4,5,6,7,8,9,10,11,
+            12,13,14,15,16,17,18,19,20,21,
+            22,23,24,25,26,27,28,29,30,0,
+            32,33,34,35,36,0,38,39,40,41,
+            42,43,44,45,46,47,48,49,50,51,
+            0,53,54,55,56,57,58,59,60,0,
+            1,2,3,74,5,6,7,8,9,10,
+            11,12,13,14,15,0,0,1,0,3,
+            0,5,0,0,25,26,27,28,29,0,
+            31,0,1,2,3,0,5,6,7,8,
+            9,10,11,12,13,14,15,31,28,29,
+            0,1,2,31,31,37,25,26,27,28,
+            29,92,31,73,0,1,0,1,0,70,
+            71,72,73,74,75,76,77,78,79,0,
+            81,82,83,84,85,86,87,88,89,90,
+            91,92,93,70,95,31,74,31,0,1,
+            0,70,71,72,73,74,75,76,77,78,
+            79,82,81,82,83,84,85,86,87,88,
+            89,90,91,92,93,75,95,0,1,2,
+            3,0,5,6,7,8,9,10,11,12,
+            13,14,15,79,0,79,0,1,2,0,
+            1,83,25,26,27,28,29,0,31,0,
+            1,2,3,0,5,6,7,8,9,10,
+            11,12,13,14,15,75,0,0,2,2,
+            31,83,0,1,25,26,27,28,29,0,
+            31,93,0,0,5,95,7,70,71,72,
+            73,74,75,76,77,78,79,0,81,82,
+            83,84,85,86,87,88,89,90,91,92,
+            93,75,95,31,0,1,82,3,79,70,
+            71,72,73,74,75,76,77,78,79,0,
+            81,82,83,84,85,86,87,88,89,90,
+            91,92,93,0,1,2,3,80,5,6,
+            7,8,9,10,11,12,13,14,15,0,
+            1,0,1,91,0,0,84,0,25,26,
+            27,28,29,6,31,0,1,2,3,0,
+            5,6,7,8,9,10,11,12,13,14,
+            15,94,0,14,15,0,37,5,37,7,
+            25,26,27,28,29,0,31,0,1,0,
+            1,0,3,70,71,72,73,74,75,76,
+            77,78,79,94,81,82,83,84,85,86,
+            87,88,89,90,91,92,93,73,71,72,
+            0,0,77,0,37,70,71,72,73,74,
+            75,76,77,78,79,0,81,82,83,84,
+            85,86,87,88,89,90,91,92,93,0,
+            1,2,3,0,5,6,7,8,9,10,
+            11,12,13,14,15,0,1,0,1,94,
+            0,80,2,0,25,26,27,28,29,94,
+            31,0,1,2,3,0,5,6,7,8,
+            9,10,11,12,13,14,15,77,0,0,
+            0,80,37,80,37,70,25,26,27,28,
+            29,0,31,0,1,0,81,6,5,70,
+            71,72,73,74,0,76,77,78,79,0,
+            81,82,83,84,85,86,87,88,89,90,
+            91,92,93,0,31,0,31,0,1,0,
+            37,70,71,72,73,74,0,76,77,78,
+            79,37,81,82,83,84,85,86,87,88,
+            89,90,91,92,93,0,1,0,80,4,
+            37,6,71,72,37,70,0,74,0,14,
+            15,16,17,18,19,20,21,22,23,24,
+            0,0,1,3,75,30,0,32,33,34,
+            35,36,6,38,39,40,41,42,43,44,
+            45,46,47,48,49,50,51,0,1,73,
+            0,4,31,6,0,1,0,3,37,94,
+            6,0,6,16,17,18,19,20,21,22,
+            23,24,0,97,0,0,2,2,0,32,
+            33,34,35,36,0,31,2,0,0,1,
+            3,70,4,5,99,87,0,71,72,52,
+            94,80,0,31,16,17,18,19,20,21,
+            22,23,24,0,1,0,1,4,71,72,
+            32,33,34,35,36,71,72,71,72,16,
+            17,18,19,20,21,22,23,24,0,1,
+            52,0,4,2,0,32,33,34,35,36,
+            0,0,37,2,16,17,18,19,20,21,
+            22,23,24,0,1,52,0,4,30,0,
+            0,2,0,0,2,37,0,4,2,16,
+            17,18,19,20,21,22,23,24,0,1,
+            0,0,4,30,0,0,2,31,3,0,
+            37,31,3,0,16,17,18,19,20,21,
+            22,23,24,0,1,0,0,4,30,0,
+            0,2,31,3,80,37,0,37,2,16,
+            17,18,19,20,21,22,23,24,0,1,
+            0,0,4,30,3,0,31,0,3,2,
+            37,0,0,2,16,17,18,19,20,21,
+            22,23,24,0,1,0,0,4,30,3,
+            0,0,1,3,3,37,5,6,0,16,
+            17,18,19,20,21,22,23,24,0,0,
+            0,2,4,30,4,0,6,0,3,2,
+            0,1,31,3,16,17,18,19,20,21,
+            22,23,24,0,0,0,3,3,30,0,
+            0,0,3,3,3,0,0,0,3,3,
+            3,31,0,0,2,2,0,37,2,0,
+            0,70,71,72,73,0,0,0,0,0,
+            0,0,81,0,0,84,0,0,0,0,
+            0,71,72,73,0,0,76,77,78,0,
+            70,0,0,73,0,0,0,0,0,0,
+            0,81,0,0,84,0,0,97,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0
+        };
+    };
+    public final static byte termCheck[] = TermCheck.termCheck;
+    public final int termCheck(int index) { return termCheck[index]; }
+
+    public interface TermAction {
+        public final static char termAction[] = {0,
+            3467,499,1768,107,569,3474,3502,3475,567,3478,
+            3479,3480,3481,3482,3503,3504,3597,3595,3596,3598,
+            3599,3600,3601,3602,3603,3483,3484,3485,3476,3178,
+            3593,258,577,576,575,574,573,3467,568,3499,
+            3488,3489,3490,3491,3492,3493,3494,3495,3496,3497,
+            3498,3501,558,3114,3472,3473,3471,3470,3468,3469,
+            3519,579,3640,3637,3639,3641,3642,3644,3368,1817,
+            77,3467,3467,3780,155,202,384,3467,3746,3270,
+            2934,2894,2854,2814,3467,394,396,238,3210,407,
+            3467,929,692,3467,6043,3366,3467,3782,2013,3467,
+            499,1768,230,569,3474,3502,3475,567,3478,3479,
+            3480,3481,3482,3503,3504,3597,3595,3596,3598,3599,
+            3600,3601,3602,3603,3483,3484,3485,3476,3146,3593,
+            3338,577,576,575,574,573,3467,568,3499,3488,
+            3489,3490,3491,3492,3493,3494,3495,3496,3497,3498,
+            3501,558,3114,3472,3473,3471,3470,3468,3469,3519,
+            579,3640,3637,3639,3641,3642,3644,3368,1817,138,
+            81,138,3350,138,3321,79,584,3467,3759,425,
+            2934,2894,2854,2814,379,2934,2894,2854,2814,3467,
+            3784,3467,3741,220,1915,3305,3467,499,1768,230,
+            569,3474,3502,3475,567,3478,3479,3480,3481,3482,
+            3503,3504,3597,3595,3596,3598,3599,3600,3601,3602,
+            3603,3483,3484,3485,3476,3146,3593,3467,577,576,
+            575,574,573,3467,568,3499,3488,3489,3490,3491,
+            3492,3493,3494,3495,3496,3497,3498,3501,558,3114,
+            3472,3473,3471,3470,3468,3469,3519,579,3640,3637,
+            3639,3641,3642,3644,3368,1817,3688,3467,5493,190,
+            57,384,3467,6041,1719,57,384,3467,3742,3467,
+            139,3604,3467,3742,1866,139,3604,3467,925,3363,
+            3467,3467,3305,3467,499,1768,222,569,3474,3502,
+            3475,567,3478,3479,3480,3481,3482,3503,3504,3597,
+            3595,3596,3598,3599,3600,3601,3602,3603,3483,3484,
+            3485,3476,3146,3593,3332,577,576,575,574,573,
+            3467,568,3499,3488,3489,3490,3491,3492,3493,3494,
+            3495,3496,3497,3498,3501,558,3114,3472,3473,3471,
+            3470,3468,3469,3519,579,3640,3637,3639,3641,3642,
+            3644,3368,1817,3467,499,1768,222,569,3474,3502,
+            3475,567,3478,3479,3480,3481,3482,3503,3504,3597,
+            3595,3596,3598,3599,3600,3601,3602,3603,3483,3484,
+            3485,3476,3146,3593,3467,577,576,575,574,573,
+            2454,568,3499,3488,3489,3490,3491,3492,3493,3494,
+            3495,3496,3497,3498,3501,558,3114,3472,3473,3471,
+            3470,3468,3469,3519,579,3640,3637,3639,3641,3642,
+            3644,3368,1817,3467,499,1768,222,569,3474,3502,
+            3475,567,3478,3479,3480,3481,3482,3503,3504,3597,
+            3595,3596,3598,3599,3600,3601,3602,3603,3483,3484,
+            3485,3476,3146,3593,2503,577,576,575,574,573,
+            3467,568,3499,3488,3489,3490,3491,3492,3493,3494,
+            3495,3496,3497,3498,3501,558,3114,3472,3473,3471,
+            3470,3468,3469,3519,579,3640,3637,3639,3641,3642,
+            3644,3368,1817,3467,499,1768,222,569,3474,3502,
+            3475,567,3478,3479,3480,3481,3482,3503,3504,3597,
+            3595,3596,3598,3599,3600,3601,3602,3603,3483,3484,
+            3485,3476,3146,3593,3467,577,576,575,574,573,
+            3467,568,3499,3488,3489,3490,3491,3492,3493,3494,
+            3495,3496,3497,3498,3501,558,3114,3472,3473,3471,
+            3470,3468,3469,3519,579,3640,3637,3639,3641,3642,
+            3644,3368,1817,3467,499,1768,222,569,3474,3502,
+            3475,567,3478,3479,3480,3481,3482,3503,3504,3597,
+            3595,3596,3598,3599,3600,3601,3602,3603,3483,3484,
+            3485,3476,3146,3593,3467,577,576,575,574,573,
+            3467,568,3499,3488,3489,3490,3491,3492,3493,3494,
+            3495,3496,3497,3498,3501,558,3114,3472,3473,3471,
+            3470,3468,3469,3519,579,3640,3637,3639,3641,3642,
+            3644,3368,1817,3467,499,1768,248,569,3474,3502,
+            3475,567,3478,3479,3480,3481,3482,3503,3504,3597,
+            3595,3596,3598,3599,3600,3601,3602,3603,3483,3484,
+            3485,3476,3178,3593,3467,577,576,575,574,573,
+            3467,568,3499,3488,3489,3490,3491,3492,3493,3494,
+            3495,3496,3497,3498,3501,558,3114,3472,3473,3471,
+            3470,3468,3469,3519,579,3640,3637,3639,3641,3642,
+            3644,3368,1817,65,3467,3742,3467,3767,3604,95,
+            800,3467,3780,386,69,384,391,3080,3046,2772,
+            3467,2730,3467,3745,384,3667,3467,3787,2686,2642,
+            2598,2013,3467,499,1768,222,569,3474,3502,3475,
+            567,3478,3479,3480,3481,3482,3503,3504,3597,3595,
+            3596,3598,3599,3600,3601,3602,3603,3483,3484,3485,
+            3476,3146,3593,1425,577,576,575,574,573,3467,
+            568,3499,3488,3489,3490,3491,3492,3493,3494,3495,
+            3496,3497,3498,3501,558,3114,3472,3473,3471,3470,
+            3468,3469,3519,579,3640,3637,3639,3641,3642,3644,
+            3368,1817,3467,499,1768,222,569,3474,3502,3475,
+            567,3478,3479,3480,3481,3482,3503,3504,3597,3595,
+            3596,3598,3599,3600,3601,3602,3603,3483,3484,3485,
+            3476,3146,3593,3467,577,576,575,574,573,3467,
+            568,3499,3488,3489,3490,3491,3492,3493,3494,3495,
+            3496,3497,3498,3501,558,3114,3472,3473,3471,3470,
+            3468,3469,3519,579,3640,3637,3639,3641,3642,3644,
+            3368,1817,3467,499,1768,222,569,3474,3502,3475,
+            567,3478,3479,3480,3481,3482,3503,3504,3597,3595,
+            3596,3598,3599,3600,3601,3602,3603,3483,3484,3485,
+            3476,3146,3593,3467,577,576,575,574,573,3467,
+            568,3499,3488,3489,3490,3491,3492,3493,3494,3495,
+            3496,3497,3498,3501,558,3114,3472,3473,3471,3470,
+            3468,3469,3519,579,3640,3637,3639,3641,3642,3644,
+            3368,1817,3467,499,1768,222,569,3474,3502,3475,
+            567,3478,3479,3480,3481,3482,3503,3504,3597,3595,
+            3596,3598,3599,3600,3601,3602,3603,3483,3484,3485,
+            3476,3146,3593,3467,577,576,575,574,573,3467,
+            568,3499,3488,3489,3490,3491,3492,3493,3494,3495,
+            3496,3497,3498,3501,558,3114,3472,3473,3471,3470,
+            3468,3469,3519,579,3640,3637,3639,3641,3642,3644,
+            3368,1817,3467,499,1768,260,569,3474,3502,3475,
+            567,3478,3479,3480,3481,3482,3503,3504,3597,3595,
+            3596,3598,3599,3600,3601,3602,3603,3483,3484,3485,
+            3476,3146,3593,3467,577,576,575,574,573,3467,
+            568,3499,3488,3489,3490,3491,3492,3493,3494,3495,
+            3496,3497,3498,3501,558,3114,3472,3473,3471,3470,
+            3468,3469,3519,579,3640,3637,3639,3641,3642,3644,
+            3368,1817,3467,3763,3467,3587,3467,3781,3467,3773,
+            985,3350,384,3321,3467,3467,3467,802,3668,3467,
+            3786,3467,3758,507,3467,3467,499,1768,3305,569,
+            3474,3502,3475,567,3478,3479,3480,3481,3482,3503,
+            3504,3597,3595,3596,3598,3599,3600,3601,3602,3603,
+            3483,3484,3485,3476,3146,3593,1474,577,576,575,
+            574,573,3467,568,3499,3488,3489,3490,3491,3492,
+            3493,3494,3495,3496,3497,3498,3501,558,3114,3472,
+            3473,3471,3470,3468,3469,3519,579,3640,3637,3639,
+            3641,3642,3644,3368,1817,3467,924,1768,3713,569,
+            3474,3502,3475,567,3478,3479,3480,3481,3482,3503,
+            3504,3597,3595,3596,3598,3599,3600,3601,3602,3603,
+            3483,3484,3485,3476,3146,3593,3467,577,576,575,
+            574,573,3467,568,3499,3488,3489,3490,3491,3492,
+            3493,3494,3495,3496,3497,3498,3501,558,3114,3472,
+            3473,3471,3470,3468,3469,3519,579,3640,3637,3639,
+            3641,3642,3644,3368,1817,3467,499,1768,3467,3272,
+            3474,3502,3475,567,3478,3479,3480,3481,3482,3503,
+            3504,3597,3595,3596,3598,3599,3600,3601,3602,3603,
+            3483,3484,3485,3476,3146,3593,3467,577,576,575,
+            574,573,3467,568,3499,3488,3489,3490,3491,3492,
+            3493,3494,3495,3496,3497,3498,3501,558,3114,3472,
+            3473,3471,3470,3468,3469,3519,579,3640,3637,3639,
+            3641,3642,3644,3368,1817,3467,499,1768,3467,569,
+            3474,3502,3475,567,3478,3479,3480,3481,3482,3503,
+            3504,3597,3595,3596,3598,3599,3600,3601,3602,3603,
+            3483,3484,3485,3476,3146,3593,3467,577,576,575,
+            574,573,3467,568,3499,3488,3489,3490,3491,3492,
+            3493,3494,3495,3496,3497,3498,3501,558,3114,3472,
+            3473,3471,3470,3468,3469,3519,579,3640,3637,3639,
+            3641,3642,3644,3368,3467,499,1768,295,569,3474,
+            3502,3475,567,3478,3479,3480,3481,3482,3503,3504,
+            3597,3595,3596,3598,3599,3600,3601,3602,3603,3483,
+            3484,3485,3476,3146,3593,3467,577,576,575,574,
+            573,3467,568,3499,3488,3489,3490,3491,3492,3493,
+            3494,3495,3496,3497,3498,3501,558,3114,3472,3473,
+            3471,3470,3468,3469,3519,579,3640,3637,3639,3641,
+            3642,3644,1523,3467,99,3467,3776,97,1572,3467,
+            3467,3756,3080,3046,73,3080,3046,275,3467,2772,
+            3757,2730,318,3467,3741,220,3467,299,3334,3467,
+            499,1768,2160,569,3474,3502,3475,567,3478,3479,
+            3480,3481,3482,3503,3504,3597,3595,3596,3598,3599,
+            3600,3601,3602,3603,3483,3484,3485,3476,3146,3593,
+            3467,577,576,575,574,573,3467,568,3499,3488,
+            3489,3490,3491,3492,3493,3494,3495,3496,3497,3498,
+            3501,558,3114,3472,3473,3471,3470,3468,3469,3519,
+            579,3640,3637,3639,3641,3642,3644,3467,3688,3353,
+            2062,3594,3474,3502,3475,3477,3478,3479,3480,3481,
+            3482,3503,3504,3597,3595,3596,3598,3599,3600,3601,
+            3602,3603,3483,3484,3485,3476,3486,3593,3467,3505,
+            3506,3507,3508,3509,67,3511,3499,3488,3489,3490,
+            3491,3492,3493,3494,3495,3496,3497,3498,3501,3467,
+            3487,3472,3473,3471,3470,3468,3469,3519,3467,2686,
+            2642,2598,3594,3474,3502,3475,3477,3478,3479,3480,
+            3481,3482,3503,3504,3597,3595,3596,3598,3599,3600,
+            3601,3602,3603,3483,3484,3485,3476,3486,3593,63,
+            3505,3506,3507,3508,3509,3467,3511,1196,3488,3489,
+            3490,3491,3492,3493,3494,3495,3496,3497,3498,3501,
+            3467,3487,3472,3473,3471,3470,3468,3469,3519,3467,
+            6319,43,48,3616,48,48,48,48,48,48,
+            48,48,48,48,48,3467,3467,3772,3467,3772,
+            93,57,3467,3467,48,48,48,48,48,3467,
+            48,3467,6320,45,220,3467,220,220,220,220,
+            220,220,220,220,220,220,220,3772,3010,2974,
+            3467,3741,220,3370,3414,1621,220,220,220,220,
+            220,2552,220,3466,3467,3779,3467,3778,3467,48,
+            48,48,48,48,6319,48,48,48,48,3467,
+            48,48,48,48,48,48,48,48,48,48,
+            48,48,48,2405,48,2258,3636,2258,3467,3754,
+            220,220,220,220,220,220,5856,220,220,220,
+            220,3790,220,220,220,220,220,220,220,220,
+            220,220,220,220,220,3688,1254,3467,6320,45,
+            220,3467,220,220,220,220,220,220,220,220,
+            220,220,220,3238,324,3249,3467,3741,220,3467,
+            3744,3753,220,220,220,220,220,3467,220,3467,
+            6276,10,171,3467,171,171,171,171,171,171,
+            171,171,171,171,171,3688,3467,148,589,988,
+            2258,3694,3467,3755,171,171,171,171,171,72,
+            171,3386,3467,3467,2772,1201,2730,220,220,220,
+            220,220,5888,220,220,220,220,3467,220,220,
+            220,220,220,220,220,220,220,220,220,220,
+            220,3688,1307,3237,3467,3765,273,3243,3329,171,
+            171,171,171,171,10,171,171,171,171,42,
+            171,171,171,171,171,171,171,171,171,171,
+            171,171,171,3467,6284,44,176,138,176,176,
+            176,176,176,176,176,176,176,176,176,3467,
+            3795,3467,3794,2307,259,247,1964,3467,176,176,
+            176,176,176,502,176,3467,6323,220,220,255,
+            220,220,220,220,220,220,220,220,220,220,
+            220,330,71,259,259,41,62,2772,62,2730,
+            220,220,220,220,220,40,220,3467,3793,3467,
+            3769,199,3245,176,176,176,176,176,44,176,
+            176,176,176,154,176,176,176,176,176,176,
+            176,176,176,176,176,176,176,241,1356,854,
+            249,295,386,127,62,220,220,220,220,220,
+            3688,220,220,220,220,3467,220,220,220,220,
+            220,220,220,220,220,220,220,220,220,3467,
+            3688,45,3688,3467,3688,3688,3688,3688,3688,3688,
+            3688,3688,3688,3688,3688,3467,3789,3467,3788,153,
+            3467,391,643,3467,3688,3688,3688,3688,3688,152,
+            3688,3467,3688,45,3688,3467,3688,3688,3688,3688,
+            3688,3688,3688,3688,3688,3688,3688,386,3467,3467,
+            3467,275,62,137,62,2356,3688,3688,3688,3688,
+            3688,267,3688,3467,3777,127,3409,502,2209,3688,
+            3688,3688,3688,3688,3467,3688,3688,3688,3688,220,
+            3688,3688,3688,3688,3688,3688,3688,3688,3688,3688,
+            3688,3688,3688,3467,189,39,3777,3467,3764,3467,
+            3263,3688,3688,3688,3688,3688,307,3688,3688,3688,
+            3688,3358,3688,3688,3688,3688,3688,3688,3688,3688,
+            3688,3688,3688,3688,3688,3467,3743,3467,3227,3594,
+            1670,3502,1356,854,3247,3777,38,189,160,3503,
+            3504,3597,3595,3596,3598,3599,3600,3601,3602,3603,
+            3467,127,5922,3581,3688,3593,329,3505,3506,3507,
+            3508,3509,304,3511,3499,3488,3489,3490,3491,3492,
+            3493,3494,3495,3496,3497,3498,3501,3467,3742,325,
+            3467,3604,189,194,3467,3772,138,3772,3263,151,
+            57,3467,3770,3597,3595,3596,3598,3599,3600,3601,
+            3602,3603,203,325,3467,3467,697,487,3467,3617,
+            3618,3619,3620,3621,3467,3772,493,3467,3467,3742,
+            3750,189,3604,194,1039,2111,3467,304,304,498,
+            150,137,3467,3237,3597,3595,3596,3598,3599,3600,
+            3601,3602,3603,3467,3742,3467,3768,3604,194,194,
+            3617,3618,3619,3620,3621,57,57,3770,3770,3597,
+            3595,3596,3598,3599,3600,3601,3602,3603,3467,3743,
+            498,3467,3594,751,140,3617,3618,3619,3620,3621,
+            3467,3467,3254,805,3597,3595,3596,3598,3599,3600,
+            3601,3602,3603,3467,3743,498,156,3594,3593,3467,
+            223,934,32,3467,50,61,3467,985,3376,3597,
+            3595,3596,3598,3599,3600,3601,3602,3603,3467,3743,
+            235,58,3594,3593,33,3467,51,859,3681,3467,
+            61,2258,3752,3467,3597,3595,3596,3598,3599,3600,
+            3601,3602,3603,3467,3743,231,3467,3594,3593,3467,
+            3467,1042,3406,3683,391,61,3467,3344,1093,3597,
+            3595,3596,3598,3599,3600,3601,3602,3603,3467,3743,
+            3467,3467,3594,3593,3751,3467,1360,3467,3680,1147,
+            61,218,3467,697,3597,3595,3596,3598,3599,3600,
+            3601,3602,3603,3467,3743,3467,3467,3594,3593,3747,
+            3467,3467,3777,3582,3777,61,189,189,3467,3597,
+            3595,3596,3598,3599,3600,3601,3602,3603,3467,171,
+            258,10,3594,3593,384,3467,502,176,3651,44,
+            3467,6258,3777,189,3597,3595,3596,3598,3599,3600,
+            3601,3602,3603,3467,3467,3467,3696,3695,3593,3467,
+            3467,3467,3749,3679,3654,3467,3467,3467,3652,3655,
+            3653,189,48,220,43,45,220,3263,3741,3467,
+            3467,3777,189,189,3777,3467,3467,3467,3467,3467,
+            3467,3467,3777,3467,3467,3777,3467,3467,3467,3467,
+            3467,1356,854,243,3467,3467,3350,386,3321,3467,
+            189,3467,3467,189,3467,3467,3467,3467,3467,3467,
+            3467,189,3467,3467,189,3467,3467,379
+        };
+    };
+    public final static char termAction[] = TermAction.termAction;
+    public final int termAction(int index) { return termAction[index]; }
+
+    public interface Asb {
+        public final static char asb[] = {0,
+            513,273,70,167,510,214,214,214,214,214,
+            67,522,67,272,52,225,225,585,225,585,
+            225,585,225,585,225,585,225,148,150,552,
+            448,311,155,439,440,81,81,81,81,81,
+            67,81,364,136,363,359,422,268,81,52,
+            587,67,83,83,81,473,473,473,171,229,
+            228,231,231,275,322,321,321,321,321,321,
+            323,322,451,440,325,329,81,331,337,333,
+            342,339,436,435,438,365,442,359,446,588,
+            319,318,453,588,440,440,440,440,440,440,
+            1,67,81,81,477,367,93,93,422,422,
+            82,82,211,191,82,82,81,81,81,81,
+            81,81,81,81,81,81,81,81,267,52,
+            587,52,587,146,81,367,367,587,587,367,
+            367,464,456,81,4,463,463,460,466,466,
+            440,277,319,318,473,231,322,324,231,440,
+            231,440,439,439,81,329,329,333,333,339,
+            337,337,337,588,317,510,588,319,319,319,
+            470,319,319,319,81,81,2,146,81,81,
+            324,324,367,367,440,440,278,81,146,81,
+            79,79,525,225,67,528,225,319,319,367,
+            367,466,556,76,319,559,319,583,318,319,
+            81,51,535,319,319,324,146,81,146,81,
+            52,80,591,77,319,77,319,593,81,81,
+            319,319
+        };
+    };
+    public final static char asb[] = Asb.asb;
+    public final int asb(int index) { return asb[index]; }
+
+    public interface Asr {
+        public final static byte asr[] = {0,
+            74,69,68,61,39,51,6,14,15,40,
+            41,42,43,44,45,46,47,48,49,50,
+            30,67,38,63,8,64,62,65,66,60,
+            58,59,57,56,54,55,7,28,9,10,
+            11,12,13,25,26,27,2,29,53,98,
+            5,17,18,16,19,20,21,22,23,24,
+            52,32,33,34,35,36,1,4,0,3,
+            81,84,73,37,1,31,70,0,3,96,
+            69,68,61,67,63,64,62,65,66,52,
+            1,2,60,58,59,57,56,54,55,5,
+            7,28,8,9,10,11,12,13,25,26,
+            27,29,53,39,51,6,14,15,32,33,
+            34,35,36,40,41,42,43,44,45,46,
+            47,48,49,50,38,17,18,16,19,20,
+            21,22,23,24,30,4,0,97,73,82,
+            1,77,80,0,5,3,74,70,31,81,
+            71,72,84,6,1,80,14,15,73,0,
+            3,74,79,70,31,81,87,76,71,72,
+            77,82,78,91,84,6,14,15,73,93,
+            28,29,8,9,10,11,5,12,13,7,
+            85,86,88,89,25,26,27,92,80,83,
+            90,1,0,30,4,17,18,16,19,20,
+            21,22,23,24,37,1,0,1,94,0,
+            28,29,8,9,10,11,12,13,7,3,
+            74,79,85,70,31,81,86,87,88,89,
+            71,72,90,91,83,25,26,27,92,84,
+            6,14,15,93,2,75,5,82,1,76,
+            78,77,73,0,95,75,80,28,29,8,
+            9,10,11,12,13,7,79,85,86,87,
+            88,89,76,71,72,77,82,78,90,91,
+            83,25,26,27,92,6,14,15,93,2,
+            74,70,81,84,73,5,1,31,3,0,
+            94,2,95,75,88,89,85,86,8,9,
+            28,29,10,11,12,13,5,7,25,26,
+            27,3,74,79,70,31,81,87,76,78,
+            90,91,83,84,14,15,93,92,73,71,
+            72,6,77,1,82,0,3,69,61,39,
+            51,6,14,15,32,33,34,35,36,40,
+            41,42,43,44,45,46,47,48,49,50,
+            67,38,63,8,64,62,65,66,52,60,
+            58,59,57,56,54,55,5,7,28,9,
+            10,11,12,13,25,26,27,2,29,53,
+            68,30,4,17,18,16,19,20,21,22,
+            23,24,1,0,1,5,0,37,1,2,
+            0,97,73,82,0,2,37,76,78,1,
+            80,0,31,84,0,74,31,87,0,37,
+            5,1,31,74,0,79,31,1,0,3,
+            80,0,2,1,75,0,1,38,40,41,
+            42,43,44,45,46,47,48,49,50,39,
+            51,6,32,33,34,35,36,17,18,16,
+            19,20,21,22,23,24,30,4,99,15,
+            14,0,14,15,77,76,78,71,72,6,
+            4,73,97,0,91,1,0,14,15,77,
+            82,73,1,0,17,18,16,19,20,21,
+            22,23,24,52,32,33,34,35,36,4,
+            1,71,72,6,0,70,81,0,70,80,
+            28,29,8,9,10,11,5,12,13,7,
+            2,95,85,86,75,88,89,25,26,27,
+            92,1,3,31,37,0,4,3,1,0,
+            93,1,83,0
+        };
+    };
+    public final static byte asr[] = Asr.asr;
+    public final int asr(int index) { return asr[index]; }
+
+    public interface Nasb {
+        public final static byte nasb[] = {0,
+            88,31,31,31,31,44,44,44,44,44,
+            1,11,5,23,29,31,31,31,31,31,
+            31,31,31,31,31,31,31,31,94,92,
+            98,31,31,31,31,26,26,26,26,26,
+            102,26,3,44,23,19,85,21,26,29,
+            96,96,26,26,26,81,81,81,31,31,
+            31,31,31,31,31,31,31,31,31,31,
+            82,82,31,31,8,31,26,31,31,31,
+            31,31,31,31,31,31,31,31,31,31,
+            31,31,31,31,31,31,31,31,31,31,
+            26,100,26,26,84,26,13,74,85,85,
+            67,67,31,31,60,60,46,46,53,53,
+            53,53,32,39,39,39,26,26,31,29,
+            106,29,106,109,26,26,26,30,30,26,
+            26,31,31,26,26,31,31,31,31,31,
+            31,31,31,31,81,81,82,82,31,31,
+            31,31,31,31,26,31,31,31,31,31,
+            31,31,31,31,31,90,31,31,31,31,
+            31,31,31,31,26,26,26,108,26,26,
+            82,82,26,26,31,31,31,26,109,25,
+            26,26,31,31,109,31,31,31,31,26,
+            26,31,31,31,31,31,31,31,31,31,
+            26,29,29,31,31,82,109,26,109,26,
+            29,26,31,31,31,31,31,31,26,26,
+            31,31
+        };
+    };
+    public final static byte nasb[] = Nasb.nasb;
+    public final int nasb(int index) { return nasb[index]; }
+
+    public interface Nasr {
+        public final static char nasr[] = {0,
+            4,0,106,0,3,90,0,91,92,0,
+            83,0,2,9,12,68,14,0,66,0,
+            65,0,60,0,50,2,7,12,5,3,
+            0,3,2,7,5,12,45,0,7,12,
+            3,5,43,2,0,3,2,7,5,12,
+            41,0,7,2,12,3,5,37,0,7,
+            2,12,3,5,35,0,3,2,7,5,
+            12,32,0,6,87,2,12,68,96,0,
+            59,51,0,9,2,54,0,84,101,82,
+            0,105,0,84,0,77,0,103,0,95,
+            0,49,89,104,0,71,0,76,50,0
+        };
+    };
+    public final static char nasr[] = Nasr.nasr;
+    public final int nasr(int index) { return nasr[index]; }
+
+    public interface TerminalIndex {
+        public final static char terminalIndex[] = {0,
+            100,11,12,98,7,55,10,3,4,5,
+            6,8,9,56,57,86,87,88,89,90,
+            92,93,94,95,46,47,48,1,2,34,
+            19,61,62,63,64,65,20,58,66,67,
+            68,69,70,71,72,73,74,75,76,77,
+            85,91,49,78,79,80,81,82,83,84,
+            30,31,32,33,53,54,96,51,42,18,
+            36,37,97,14,25,35,38,41,16,21,
+            22,40,45,52,17,23,24,26,27,43,
+            44,50,102,13,15,28,39,99,101,59,
+            60
+        };
+    };
+    public final static char terminalIndex[] = TerminalIndex.terminalIndex;
+    public final int terminalIndex(int index) { return terminalIndex[index]; }
+
+    public interface NonterminalIndex {
+        public final static char nonterminalIndex[] = {0,
+            0,106,115,162,138,103,104,0,107,0,
+            105,112,0,136,108,131,133,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,132,0,129,130,126,127,128,0,124,
+            125,122,123,120,121,118,119,0,144,117,
+            0,137,0,163,145,0,0,0,161,156,
+            0,0,0,149,151,152,0,109,0,0,
+            116,0,140,0,142,146,147,0,0,0,
+            148,153,154,155,0,0,110,111,113,114,
+            134,135,0,139,141,143,0,0,0,0,
+            150,0,157,158,159,160,0,0,0
+        };
+    };
+    public final static char nonterminalIndex[] = NonterminalIndex.nonterminalIndex;
+    public final int nonterminalIndex(int index) { return nonterminalIndex[index]; }
+
+    public interface ScopePrefix {
+        public final static char scopePrefix[] = {
+            142,176,26,26,26,75,170,200,220,150,
+            184,17,58,65,70,85,90,116,121,126,
+            17,17,17,1,7,81,7,131,81,206,
+            210,216,226,7,135,1,7,160,190,160,
+            190,11,14,11,107,14,14,14,14,230,
+            230,238,238,246,246,246,246,260,260,268,
+            268,268
+        };
+    };
+    public final static char scopePrefix[] = ScopePrefix.scopePrefix;
+    public final int scopePrefix(int index) { return scopePrefix[index]; }
+
+    public interface ScopeSuffix {
+        public final static char scopeSuffix[] = {
+            63,63,5,95,43,63,63,63,63,156,
+            156,5,63,63,63,63,63,63,63,63,
+            33,97,46,5,5,5,5,63,63,63,
+            214,214,63,113,139,113,113,156,156,164,
+            194,5,5,63,110,22,37,101,51,232,
+            235,240,243,248,251,254,257,262,265,270,
+            273,276
+        };
+    };
+    public final static char scopeSuffix[] = ScopeSuffix.scopeSuffix;
+    public final int scopeSuffix(int index) { return scopeSuffix[index]; }
+
+    public interface ScopeLhs {
+        public final static char scopeLhs[] = {
+            98,97,39,39,39,17,98,97,17,98,
+            97,39,13,14,75,92,92,14,13,75,
+            39,39,39,19,19,57,78,56,57,97,
+            23,22,17,78,50,19,19,98,97,98,
+            97,18,39,18,33,39,39,39,39,35,
+            35,37,37,41,41,41,41,43,43,45,
+            45,45
+        };
+    };
+    public final static char scopeLhs[] = ScopeLhs.scopeLhs;
+    public final int scopeLhs(int index) { return scopeLhs[index]; }
+
+    public interface ScopeLa {
+        public final static byte scopeLa[] = {
+            3,3,1,83,93,3,3,3,3,70,
+            70,1,3,3,3,3,3,3,3,3,
+            91,91,91,1,1,1,1,3,3,3,
+            74,74,3,79,5,79,79,70,70,81,
+            31,1,1,3,84,90,90,90,90,9,
+            8,29,28,13,12,11,10,7,5,27,
+            26,25
+        };
+    };
+    public final static byte scopeLa[] = ScopeLa.scopeLa;
+    public final int scopeLa(int index) { return scopeLa[index]; }
+
+    public interface ScopeStateSet {
+        public final static byte scopeStateSet[] = {
+            2,2,15,15,15,8,2,2,8,2,
+            2,15,6,7,1,4,4,7,6,1,
+            15,15,15,8,8,67,1,67,67,2,
+            8,8,8,1,75,8,8,2,2,2,
+            2,8,15,8,11,15,15,15,15,13,
+            13,15,15,19,19,19,19,21,21,24,
+            24,24
+        };
+    };
+    public final static byte scopeStateSet[] = ScopeStateSet.scopeStateSet;
+    public final int scopeStateSet(int index) { return scopeStateSet[index]; }
+
+    public interface ScopeRhs {
+        public final static char scopeRhs[] = {0,
+            153,95,116,0,100,0,153,95,103,0,
+            147,2,0,147,69,0,147,90,147,69,
+            0,43,118,100,0,147,91,147,90,147,
+            69,0,44,118,100,0,43,118,44,118,
+            100,0,102,45,0,44,118,102,45,0,
+            43,118,44,118,102,45,0,154,2,160,
+            112,0,12,0,154,2,160,110,0,154,
+            2,160,169,0,154,2,99,80,104,0,
+            156,2,106,0,181,2,103,89,0,181,
+            2,103,88,0,45,0,44,118,45,0,
+            43,118,44,118,45,0,178,68,0,52,
+            118,0,16,0,0,154,2,152,110,0,
+            154,2,152,112,0,154,2,152,169,0,
+            200,2,52,0,156,37,4,0,7,118,
+            0,147,70,151,81,151,2,188,0,151,
+            81,151,2,188,0,18,118,12,0,151,
+            2,188,0,22,117,18,118,12,0,147,
+            70,151,2,188,0,147,70,151,31,151,
+            2,189,0,151,31,151,2,189,0,151,
+            2,189,0,19,117,18,118,12,0,147,
+            70,151,2,189,0,147,2,189,0,196,
+            94,52,0,14,0,194,94,106,0,154,
+            2,103,80,104,0,154,2,61,0,135,
+            0,4,132,0,3,132,0,139,0,2,
+            130,0,1,130,0,141,0,9,127,0,
+            8,127,0,6,127,0,5,127,0,143,
+            0,10,125,0,7,125,0,145,0,48,
+            123,0,47,123,0,46,123,0
+        };
+    };
+    public final static char scopeRhs[] = ScopeRhs.scopeRhs;
+    public final int scopeRhs(int index) { return scopeRhs[index]; }
+
+    public interface ScopeState {
+        public final static char scopeState[] = {0,
+            407,3210,0,387,0,3210,407,3178,3146,3114,
+            3080,3046,3010,2974,2934,2894,2854,2814,2772,2730,
+            2686,2642,2598,2503,2454,1360,2405,2356,2307,1147,
+            1093,507,425,1042,1307,988,934,2258,2209,859,
+            2160,2111,2062,2013,805,751,697,643,1964,1915,
+            1866,2552,589,1254,1201,330,1817,1768,1719,1670,
+            1621,1572,1523,1474,1425,0,3344,3254,3247,3338,
+            3332,3270,3263,0,3414,3409,3406,1042,3376,3370,
+            3237,3366,3363,3353,3368,3334,3230,0
+        };
+    };
+    public final static char scopeState[] = ScopeState.scopeState;
+    public final int scopeState(int index) { return scopeState[index]; }
+
+    public interface InSymb {
+        public final static char inSymb[] = {0,
+            0,187,4,183,186,6,72,71,78,76,
+            97,202,77,185,37,14,15,159,103,159,
+            103,159,103,159,103,159,103,105,104,191,
+            104,156,104,106,52,37,37,37,37,37,
+            37,37,203,80,185,206,80,204,5,2,
+            2,68,53,29,2,110,113,112,1,106,
+            52,8,38,4,108,36,35,34,33,32,
+            116,103,104,61,118,135,69,139,143,141,
+            148,145,190,150,4,207,1,155,103,156,
+            200,178,178,147,160,152,160,152,160,152,
+            94,94,95,95,80,2,86,85,89,88,
+            9,8,147,1,29,28,7,5,13,12,
+            11,10,92,27,26,25,5,5,1,37,
+            2,37,2,31,84,2,2,2,2,2,
+            2,194,147,98,29,195,196,4,153,153,
+            99,103,154,153,169,110,103,110,39,188,
+            107,189,103,103,90,135,135,141,141,145,
+            143,143,143,170,172,156,170,154,154,180,
+            104,180,154,154,87,98,31,31,5,31,
+            79,79,2,2,160,152,152,95,2,2,
+            2,2,147,3,31,183,3,154,154,2,
+            2,153,151,151,147,4,181,96,182,181,
+            91,37,37,154,154,79,81,70,31,70,
+            37,31,147,151,147,151,147,93,70,70,
+            147,147
+        };
+    };
+    public final static char inSymb[] = InSymb.inSymb;
+    public final int inSymb(int index) { return inSymb[index]; }
+
+    public interface Name {
+        public final static String name[] = {
+            "",
+            "+",
+            "-",
+            "*",
+            "/",
+            ">",
+            "<",
+            "=",
+            ">=",
+            "<=",
+            "<>",
+            "(",
+            ")",
+            "{",
+            "}",
+            "[",
+            "]",
+            "->",
+            "|",
+            ",",
+            ":",
+            "::",
+            ";",
+            ".",
+            "..",
+            "@pre",
+            "^",
+            "^^",
+            "?",
+            "$empty",
+            "NUMERIC_OPERATION",
+            "STRING_LITERAL",
+            "INTEGER_LITERAL",
+            "REAL_LITERAL",
+            "self",
+            "inv",
+            "pre",
+            "post",
+            "context",
+            "package",
+            "endpackage",
+            "def",
+            "if",
+            "then",
+            "else",
+            "endif",
+            "and",
+            "or",
+            "xor",
+            "not",
+            "implies",
+            "let",
+            "in",
+            "true",
+            "false",
+            "body",
+            "derive",
+            "init",
+            "null",
+            "attr",
+            "oper",
+            "Set",
+            "Bag",
+            "Sequence",
+            "Collection",
+            "OrderedSet",
+            "iterate",
+            "forAll",
+            "exists",
+            "isUnique",
+            "any",
+            "one",
+            "collect",
+            "select",
+            "reject",
+            "collectNested",
+            "sortedBy",
+            "closure",
+            "oclIsKindOf",
+            "oclIsTypeOf",
+            "oclAsType",
+            "oclIsNew",
+            "oclIsUndefined",
+            "oclIsInvalid",
+            "oclIsInState",
+            "allInstances",
+            "String",
+            "Integer",
+            "UnlimitedNatural",
+            "Real",
+            "Boolean",
+            "Tuple",
+            "OclAny",
+            "OclVoid",
+            "Invalid",
+            "OclMessage",
+            "OclInvalid",
+            "EOF_TOKEN",
+            "IDENTIFIER",
+            "INTEGER_RANGE_START",
+            "ERROR_TOKEN",
+            "ERROR_simpleNameCS",
+            "ERROR_Garbage",
+            "iteratorIdentifier",
+            "keywordAsIdentifier1",
+            "binaryName",
+            "simpleNameCS",
+            "keywordAsName",
+            "keywordAsName1",
+            "unaryName",
+            "iterateName",
+            "iteratorName",
+            "oclIsInStateName",
+            "operationCS1",
+            "operationCS2",
+            "pathNameCS",
+            "parametersCS",
+            "variableCS",
+            "oclExpressionCS",
+            "impliesExpCS",
+            "andOrXorExpCS",
+            "andOrXorWithLet",
+            "equalityExpCS",
+            "equalityWithLet",
+            "relationalExpCS",
+            "relationalWithLet",
+            "ifExpCSPrec",
+            "additiveWithLet",
+            "additiveExpCS",
+            "multiplicativeExpCS",
+            "multiplicativeWithLet",
+            "unaryExpCS",
+            "unaryWithLet",
+            "dotArrowExpCS",
+            "callExpCS",
+            "messageExpCS",
+            "keywordOperationCallExpCS",
+            "argumentsCS",
+            "collectionTypeIdentifierCS",
+            "collectionLiteralPartsCS",
+            "collectionLiteralPartCS",
+            "variableListCS2",
+            "featureCallExpCS",
+            "loopExpCS",
+            "typedVariableCS",
+            "typeCS",
+            "variableCS2",
+            "variableListCS",
+            "oclMessageArgumentsCS",
+            "oclMessageArgCS",
+            "packageDeclarationCSm",
+            "invOrDefCS",
+            "prePostOrBodyDeclCS",
+            "initOrDerValueCS",
+            "packageDeclarationCS",
+            "contextDeclCSm",
+            "contextDeclCS",
+            "invOrDefCSm",
+            "defExpressionCS",
+            "prePostOrBodyDeclCSm",
+            "ERROR_Empty",
+            "ERROR_IsMarkedPreCS",
+            "ERROR_PathNameCS",
+            "ERROR_SimpleNameCS"
+        };
+    };
+    public final static String name[] = Name.name;
+    public final String name(int index) { return name[index]; }
+
+    public final static int
+           ERROR_SYMBOL      = 1,
+           SCOPE_UBOUND      = 61,
+           SCOPE_SIZE        = 62,
+           MAX_NAME_LENGTH   = 26;
+
+    public final int getErrorSymbol() { return ERROR_SYMBOL; }
+    public final int getScopeUbound() { return SCOPE_UBOUND; }
+    public final int getScopeSize() { return SCOPE_SIZE; }
+    public final int getMaxNameLength() { return MAX_NAME_LENGTH; }
+
+    public final static int
+           NUM_STATES        = 242,
+           NT_OFFSET         = 101,
+           LA_STATE_OFFSET   = 3796,
+           MAX_LA            = 2,
+           NUM_RULES         = 329,
+           NUM_NONTERMINALS  = 109,
+           NUM_SYMBOLS       = 210,
+           SEGMENT_SIZE      = 8192,
+           START_STATE       = 3230,
+           IDENTIFIER_SYMBOL = 4,
+           EOFT_SYMBOL       = 73,
+           EOLT_SYMBOL       = 73,
+           ACCEPT_ACTION     = 3466,
+           ERROR_ACTION      = 3467;
+
+    public final static boolean BACKTRACK = true;
+
+    public final int getNumStates() { return NUM_STATES; }
+    public final int getNtOffset() { return NT_OFFSET; }
+    public final int getLaStateOffset() { return LA_STATE_OFFSET; }
+    public final int getMaxLa() { return MAX_LA; }
+    public final int getNumRules() { return NUM_RULES; }
+    public final int getNumNonterminals() { return NUM_NONTERMINALS; }
+    public final int getNumSymbols() { return NUM_SYMBOLS; }
+    public final int getSegmentSize() { return SEGMENT_SIZE; }
+    public final int getStartState() { return START_STATE; }
+    public final int getStartSymbol() { return lhs[0]; }
+    public final int getIdentifierSymbol() { return IDENTIFIER_SYMBOL; }
+    public final int getEoftSymbol() { return EOFT_SYMBOL; }
+    public final int getEoltSymbol() { return EOLT_SYMBOL; }
+    public final int getAcceptAction() { return ACCEPT_ACTION; }
+    public final int getErrorAction() { return ERROR_ACTION; }
+    public final boolean isValidForParser() { return isValidForParser; }
+    public final boolean getBacktrack() { return BACKTRACK; }
+
+    public final int originalState(int state) {
+        return -baseCheck[state];
+    }
+    public final int asi(int state) {
+        return asb[originalState(state)];
+    }
+    public final int nasi(int state) {
+        return nasb[originalState(state)];
+    }
+    public final int inSymbol(int state) {
+        return inSymb[originalState(state)];
+    }
+
+    public final int ntAction(int state, int sym) {
+        return baseAction[state + sym];
+    }
+
+    public final int tAction(int state, int sym) {
+        int i = baseAction[state],
+            k = i + sym;
+        return termAction[termCheck[k] == sym ? k : i];
+    }
+    public final int lookAhead(int la_state, int sym) {
+        int k = la_state + sym;
+        return termAction[termCheck[k] == sym ? k : la_state];
+    }
+}
Index: src/org/eclipse/ocl/parser/backtracking/OCLBacktrackingLexerprs.java
===================================================================
RCS file: src/org/eclipse/ocl/parser/backtracking/OCLBacktrackingLexerprs.java
diff -N src/org/eclipse/ocl/parser/backtracking/OCLBacktrackingLexerprs.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ src/org/eclipse/ocl/parser/backtracking/OCLBacktrackingLexerprs.java	1 Jan 1970 00:00:00 -0000
@@ -0,0 +1,518 @@
+/**
+* <copyright>
+*
+* Copyright (c) 2005, 2008 IBM Corporation and others.
+* All rights reserved.   This program and the accompanying materials
+* are made available under the terms of the Eclipse Public License v1.0
+* which accompanies this distribution, and is available at
+* http://www.eclipse.org/legal/epl-v10.html
+*
+* Contributors:
+*   IBM - Initial API and implementation
+*   E.D.Willink - Lexer and Parser refactoring to support extensibility and flexible error handling
+*
+* </copyright>
+*
+* $Id: OCL_v200811051638.patch,v 1.1 2008/11/19 21:26:34 ewillink Exp $
+*/
+
+package org.eclipse.ocl.parser.backtracking;
+
+public class OCLBacktrackingLexerprs implements lpg.lpgjavaruntime.ParseTable, OCLBacktrackingLexersym {
+
+    public interface IsKeyword {
+        public final static byte isKeyword[] = {0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0
+        };
+    };
+    public final static byte isKeyword[] = IsKeyword.isKeyword;
+    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }
+
+    public interface BaseCheck {
+        public final static byte baseCheck[] = {0,
+            1,1,3,3,3,1,1,1,1,1,
+            5,1,1,1,1,1,1,1,1,1,
+            1,2,2,2,1,1,1,1,2,1,
+            1,1,2,1,1,2,4,1,2,1,
+            1,1,2,2,3,2,2,0,1,2,
+            2,2,1,2,1,2,3,2,3,3,
+            1,1,1,1,1,1,1,1,1,1,
+            1,1,1,1,1,1,1,1,1,1,
+            1,1,1,1,1,1,1,1,1,1,
+            1,1,1,1,1,1,1,1,1,1,
+            1,1,1,1,1,1,1,1,1,1,
+            1,1,1,1,1,1,1,1,1,1,
+            1,1,1,1,1,1,1,1,1,1,
+            1,1,1,1,1,1,1,1,1,1,
+            1,1,1,1,1,1,1,1,1,1,
+            1,1,1,1,2,3,1,1,1,1,
+            1,2,1,2,2,2,1,1,1,1,
+            1,1,1,1,1,1,1,1,1,1,
+            1,1,1,1,1,1,1,1,1,1,
+            1,1,1,1,1,1,1,1,1,1,
+            1,1,1,1,1,1,1,1,1,1,
+            1,1,1,1,1,1,1,1,1,1,
+            1,1,1,1,1,1,1,1,1,1,
+            1,1,1,1,1,1,1,1,1,1,
+            1,1,1,1,1,1,1,1,1,1,
+            1,1,1,1,1,1,1,1,1,1,
+            1,1,1,1,1,1,1,1,1,1,
+            1,1,1,1,1,1,1,1,1,1,
+            1,1,1,1,1,1,1,1,1,1,
+            1,1,1,1,1,1,1,1,1,1,
+            1,1,1,1,1,1,1,2,2,1,
+            2,1,2,0,1,3,3,3,3,3,
+            3,3,4,4,3,3
+        };
+    };
+    public final static byte baseCheck[] = BaseCheck.baseCheck;
+    public final int baseCheck(int index) { return baseCheck[index]; }
+    public final static byte rhs[] = baseCheck;
+    public final int rhs(int index) { return rhs[index]; };
+
+    public interface BaseAction {
+        public final static char baseAction[] = {
+            21,21,21,21,21,21,21,21,21,21,
+            21,21,21,21,21,21,21,21,21,21,
+            21,21,21,21,21,21,21,21,21,21,
+            21,21,21,21,21,21,21,21,21,21,
+            21,22,23,23,23,27,27,27,27,28,
+            28,26,26,6,6,35,35,30,13,13,
+            13,9,9,9,9,9,2,2,2,2,
+            3,3,3,3,3,3,3,3,3,3,
+            3,3,3,3,3,3,3,3,3,3,
+            3,3,3,3,3,3,4,4,4,4,
+            4,4,4,4,4,4,4,4,4,4,
+            4,4,4,4,4,4,4,4,4,4,
+            4,4,1,1,1,1,1,1,1,1,
+            1,1,37,37,37,37,37,37,37,37,
+            38,38,38,38,38,38,38,38,38,38,
+            38,38,36,36,39,39,39,15,15,40,
+            40,29,29,11,11,11,11,11,32,32,
+            32,32,32,32,32,32,32,32,32,32,
+            32,32,32,32,32,32,32,32,32,32,
+            32,32,32,32,32,32,32,32,17,17,
+            17,17,17,17,17,17,17,17,17,17,
+            17,17,17,17,17,17,17,17,17,17,
+            17,17,17,17,17,17,17,18,18,18,
+            18,18,18,18,18,18,18,18,18,18,
+            18,18,18,18,18,18,18,18,18,18,
+            18,18,18,18,18,18,7,7,7,7,
+            7,7,7,7,7,7,7,7,7,7,
+            7,7,7,7,7,7,7,7,7,7,
+            7,7,7,7,7,7,14,14,14,14,
+            31,31,31,31,31,31,31,31,19,19,
+            19,19,19,8,8,8,8,8,5,20,
+            33,33,10,10,12,12,16,24,24,24,
+            24,24,24,24,24,24,25,891,478,472,
+            472,472,2,354,1236,344,479,1280,491,1283,
+            344,1247,408,480,1269,54,162,408,339,6,
+            7,8,9,421,1223,54,337,488,309,481,
+            481,481,481,481,985,481,481,44,431,334,
+            427,309,481,481,481,481,481,1330,481,481,
+            304,431,1217,437,406,457,457,457,457,457,
+            990,457,457,1287,457,794,466,466,466,466,
+            1291,54,1,47,47,47,47,402,1307,54,
+            1288,47,1068,466,466,466,47,1318,54,47,
+            1146,205,52,52,52,52,1331,100,466,1216,
+            473,503,313,313,313,313,313,986,313,313,
+            994,400,496,496,496,1219,400,1069,1258,417,
+            1333,496,52,52,417,1289,496,600,313,313,
+            313,313,313,1332,313,313,697,311,311,311,
+            311,1220,1334,103,45,45,45,45,1335,1336,
+            1337,1281,45,506,311,311,311,45,1329,506,
+            45,1073,165,164,164,164,1148,165,164,164,
+            164,43,506,334,506,506
+        };
+    };
+    public final static char baseAction[] = BaseAction.baseAction;
+    public final int baseAction(int index) { return baseAction[index]; }
+    public final static char lhs[] = baseAction;
+    public final int lhs(int index) { return lhs[index]; };
+
+    public interface TermCheck {
+        public final static byte termCheck[] = {0,
+            0,1,2,3,4,5,6,7,8,9,
+            10,11,12,13,14,15,16,17,18,19,
+            20,21,22,23,24,25,26,27,28,29,
+            30,31,32,33,34,35,36,37,38,39,
+            40,41,42,43,44,45,46,47,48,49,
+            50,51,52,53,54,55,56,57,58,59,
+            60,61,62,63,64,65,66,67,68,69,
+            70,71,72,73,74,75,76,77,78,79,
+            80,81,82,83,84,85,86,87,88,89,
+            90,91,92,93,94,95,96,97,98,0,
+            100,101,0,1,2,3,4,5,6,7,
+            8,9,10,11,12,13,14,15,16,17,
+            18,19,20,21,22,23,24,25,26,27,
+            28,29,30,31,32,33,34,35,36,37,
+            38,39,40,41,42,43,44,45,46,47,
+            48,49,50,51,52,53,54,55,56,57,
+            58,59,60,61,62,63,64,65,66,67,
+            68,69,70,71,72,73,74,75,76,77,
+            78,79,80,81,82,83,84,85,86,87,
+            88,89,90,91,92,93,94,95,96,97,
+            98,102,100,101,0,1,2,3,4,5,
+            6,7,8,9,10,11,12,13,14,15,
+            16,17,18,19,20,21,22,23,24,25,
+            26,27,28,29,30,31,32,33,34,35,
+            36,37,38,39,40,41,42,43,44,45,
+            46,47,48,49,50,51,52,53,54,55,
+            56,57,58,59,60,61,62,63,64,65,
+            66,67,68,69,70,71,72,73,74,75,
+            76,77,78,79,80,81,82,83,84,85,
+            86,87,88,89,90,91,92,93,94,95,
+            96,97,98,0,0,0,0,103,0,1,
+            2,3,4,5,6,7,8,9,10,11,
+            12,13,14,15,16,17,18,19,20,21,
+            22,23,24,25,26,27,28,29,30,31,
+            32,33,34,35,36,37,38,39,40,41,
+            42,43,44,45,46,47,48,49,50,51,
+            52,53,54,55,56,57,58,59,60,61,
+            62,63,64,65,66,67,68,69,70,71,
+            72,73,74,75,76,77,78,79,80,81,
+            82,83,84,85,86,87,88,89,90,91,
+            92,93,94,95,96,0,1,2,3,4,
+            5,6,7,8,9,10,11,12,13,14,
+            15,16,17,18,19,20,21,22,23,24,
+            25,26,27,28,29,30,31,32,33,34,
+            35,36,37,38,39,40,41,42,43,44,
+            45,46,47,48,49,50,51,52,53,54,
+            55,56,57,58,59,60,61,62,63,64,
+            65,66,67,68,69,70,71,72,73,74,
+            75,76,77,78,79,80,81,82,83,84,
+            85,86,87,88,89,90,91,92,93,94,
+            95,96,0,1,2,3,4,5,6,7,
+            8,9,10,11,12,13,14,15,16,17,
+            18,19,20,21,22,23,24,25,26,27,
+            28,29,30,31,32,33,34,35,36,37,
+            38,39,40,41,42,43,44,45,46,47,
+            48,49,50,51,52,53,54,55,56,57,
+            58,59,60,61,62,63,64,65,66,67,
+            68,69,70,71,72,73,74,75,76,77,
+            78,79,80,81,82,83,84,85,86,87,
+            88,89,90,91,92,93,94,95,96,0,
+            1,2,3,4,5,6,7,8,9,10,
+            11,12,13,14,15,16,17,18,19,20,
+            21,22,23,24,25,26,27,28,29,30,
+            31,32,33,34,35,36,37,38,39,40,
+            41,42,43,44,45,46,47,48,49,50,
+            51,52,53,54,55,56,57,58,59,60,
+            61,62,63,64,65,66,67,68,69,70,
+            71,72,73,74,75,76,77,78,79,80,
+            81,82,83,84,85,86,87,88,89,90,
+            91,92,93,94,95,96,0,1,2,3,
+            4,5,6,7,8,9,10,11,12,13,
+            14,15,16,17,18,19,20,21,22,23,
+            24,25,26,27,28,29,30,31,32,33,
+            34,35,36,37,38,39,40,41,42,43,
+            44,45,46,47,48,49,50,51,52,53,
+            54,55,56,57,58,59,60,61,62,63,
+            64,65,66,67,68,69,70,71,72,73,
+            74,75,76,77,78,79,80,81,82,83,
+            84,85,86,87,88,89,90,91,92,93,
+            94,95,96,0,1,2,3,4,5,6,
+            7,8,9,10,11,12,13,14,15,16,
+            17,18,19,20,21,22,23,24,25,26,
+            27,28,29,30,31,32,33,34,35,36,
+            37,38,39,40,41,42,43,44,45,46,
+            47,48,49,50,51,52,53,54,55,56,
+            57,58,59,60,61,62,63,64,65,66,
+            67,68,69,70,71,72,0,74,75,76,
+            77,78,79,80,81,82,83,84,85,86,
+            87,88,89,90,91,92,93,94,95,96,
+            0,1,2,3,4,5,6,7,8,9,
+            10,11,12,13,14,15,16,17,18,19,
+            20,21,22,23,24,25,26,27,28,29,
+            30,31,32,33,34,35,36,37,38,39,
+            40,41,42,43,44,45,46,47,48,49,
+            50,51,52,53,54,55,56,57,58,59,
+            60,61,62,63,64,65,66,67,68,69,
+            70,71,72,73,0,75,76,77,78,79,
+            80,81,82,83,84,85,86,87,88,89,
+            90,0,0,0,0,0,0,97,98,0,
+            100,101,102,0,1,2,3,4,5,6,
+            7,8,9,10,11,12,13,14,0,16,
+            17,18,19,20,21,22,23,24,25,26,
+            27,28,29,30,31,32,33,34,35,36,
+            37,38,39,40,41,42,43,44,45,46,
+            47,48,49,50,51,52,53,54,55,56,
+            57,58,59,60,61,62,63,64,65,75,
+            67,68,69,70,71,76,73,0,0,0,
+            77,78,0,1,2,3,4,5,6,7,
+            8,9,10,11,12,13,14,102,16,17,
+            18,19,20,21,22,23,24,25,26,27,
+            28,29,30,31,32,33,34,35,36,37,
+            38,39,40,41,42,43,44,45,46,47,
+            48,49,50,51,52,53,54,55,56,57,
+            58,59,60,61,62,63,64,65,71,0,
+            0,73,0,0,0,0,74,0,1,2,
+            3,4,5,6,7,8,9,10,11,12,
+            13,14,0,16,17,18,19,20,21,22,
+            23,24,25,26,27,28,29,30,31,32,
+            33,34,35,36,37,38,39,40,41,42,
+            43,44,45,46,47,48,49,50,51,52,
+            53,54,55,56,57,58,59,60,61,62,
+            63,64,65,68,69,0,0,0,0,0,
+            0,74,0,1,2,3,4,5,6,7,
+            8,9,10,11,12,0,1,2,3,4,
+            5,6,7,8,9,10,0,1,2,3,
+            4,5,6,7,8,9,10,0,1,2,
+            3,4,5,6,7,8,9,10,0,1,
+            2,3,4,5,6,7,8,9,10,0,
+            0,66,0,67,66,66,0,0,0,67,
+            0,1,2,3,4,5,6,7,8,9,
+            10,15,15,15,69,70,0,1,2,3,
+            4,5,6,7,8,9,10,0,1,2,
+            3,4,5,6,7,8,9,10,0,0,
+            0,0,0,0,0,0,0,0,0,11,
+            12,0,13,11,14,0,15,0,0,0,
+            0,72,0,0,68,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,97,98,0,100,
+            101,99,102,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,99,99,99,99,0,0,0,0
+        };
+    };
+    public final static byte termCheck[] = TermCheck.termCheck;
+    public final int termCheck(int index) { return termCheck[index]; }
+
+    public interface TermAction {
+        public final static char termAction[] = {0,
+            506,553,553,553,553,553,553,553,553,553,
+            553,553,553,553,553,553,553,553,553,553,
+            553,553,553,553,553,553,553,553,553,553,
+            553,553,553,553,553,553,553,553,553,553,
+            553,553,553,553,553,553,553,553,553,553,
+            553,553,553,553,553,553,553,553,553,553,
+            553,553,553,553,553,553,553,553,553,553,
+            553,473,553,553,553,553,553,553,552,553,
+            553,553,553,553,553,553,553,553,553,553,
+            553,553,553,553,553,553,553,553,553,506,
+            553,553,506,551,551,551,551,551,551,551,
+            551,551,551,551,551,551,551,551,551,551,
+            551,551,551,551,551,551,551,551,551,551,
+            551,551,551,551,551,551,551,551,551,551,
+            551,551,551,551,551,551,551,551,551,551,
+            551,551,551,551,551,551,551,551,551,551,
+            551,551,551,551,551,551,551,551,551,551,
+            551,551,551,556,551,551,551,551,551,551,
+            517,551,551,551,551,551,551,551,551,551,
+            551,551,551,551,551,551,551,551,551,551,
+            551,511,551,551,10,558,558,558,558,558,
+            558,558,558,558,558,558,558,558,558,558,
+            558,558,558,558,558,558,558,558,558,558,
+            558,558,558,558,558,558,558,558,558,558,
+            558,558,558,558,558,558,558,558,558,558,
+            558,558,558,558,558,558,558,558,558,558,
+            558,558,558,558,558,558,558,558,558,558,
+            558,558,558,558,558,558,558,558,558,558,
+            558,558,558,558,558,558,558,558,558,558,
+            558,558,558,558,558,558,558,558,558,558,
+            558,558,558,48,506,506,506,558,314,481,
+            481,481,481,481,481,481,481,481,481,481,
+            481,481,481,481,481,481,481,481,481,481,
+            481,481,481,481,481,481,481,481,481,481,
+            481,481,481,481,481,481,481,481,481,481,
+            481,481,481,481,481,481,481,481,481,481,
+            481,481,481,481,481,481,481,481,481,481,
+            481,481,481,481,429,481,481,481,481,481,
+            481,481,481,481,481,481,481,481,481,481,
+            481,481,481,481,481,481,481,481,481,481,
+            481,481,481,481,481,506,457,457,457,457,
+            457,457,457,457,457,457,457,457,457,457,
+            457,457,457,457,457,457,457,457,457,457,
+            457,457,457,457,457,457,457,457,457,457,
+            457,457,457,457,457,457,457,457,457,457,
+            457,457,457,457,457,457,457,457,457,457,
+            457,457,457,457,457,457,457,457,457,457,
+            457,445,457,457,457,457,457,457,457,457,
+            457,457,457,457,457,457,457,457,457,457,
+            457,457,457,457,457,457,457,457,457,457,
+            457,457,315,819,819,819,819,819,819,819,
+            819,819,819,819,819,819,819,819,819,819,
+            819,819,819,819,819,819,819,819,819,819,
+            819,819,819,819,819,819,819,819,819,819,
+            819,819,819,819,819,819,819,819,819,819,
+            819,819,819,819,819,819,819,819,819,819,
+            819,819,819,819,819,819,819,819,429,819,
+            819,819,819,819,819,819,819,819,819,819,
+            819,819,819,819,819,819,819,819,819,819,
+            819,819,819,819,819,819,819,819,819,506,
+            819,819,819,819,819,819,819,819,819,819,
+            819,819,819,819,819,819,819,819,819,819,
+            819,819,819,819,819,819,819,819,819,819,
+            819,819,819,819,819,819,819,819,819,819,
+            819,819,819,819,819,819,819,819,819,819,
+            819,819,819,819,819,819,819,819,819,819,
+            819,819,819,819,819,471,819,819,819,819,
+            819,819,819,819,819,819,819,819,819,819,
+            819,819,819,819,819,819,819,819,819,819,
+            819,819,819,819,819,819,506,817,817,817,
+            817,817,817,817,817,817,817,817,817,817,
+            817,817,817,817,817,817,817,817,817,817,
+            817,817,817,817,817,817,817,817,817,817,
+            817,817,817,817,817,817,817,817,817,817,
+            817,817,817,817,817,817,817,817,817,817,
+            817,817,817,817,817,817,817,817,817,817,
+            817,817,817,817,817,817,817,817,817,822,
+            817,817,817,817,817,817,817,817,817,817,
+            817,817,817,817,817,817,817,817,817,817,
+            817,817,447,506,466,466,466,466,466,466,
+            466,466,466,466,466,466,466,466,466,466,
+            466,466,466,466,466,466,466,466,466,466,
+            466,466,466,466,466,466,466,466,466,466,
+            466,466,466,466,466,466,466,466,466,466,
+            466,466,466,466,466,466,466,466,466,466,
+            466,466,466,466,466,466,466,466,466,466,
+            466,466,466,466,466,466,506,466,466,466,
+            466,466,466,466,466,466,466,466,466,466,
+            466,466,466,466,466,466,466,466,466,447,
+            506,478,478,478,478,478,478,478,478,478,
+            478,472,472,472,472,527,472,472,472,472,
+            472,472,472,472,472,472,472,472,472,472,
+            472,472,472,472,472,472,472,472,472,472,
+            472,472,472,472,472,472,472,472,472,472,
+            472,472,472,472,472,472,472,472,472,472,
+            472,472,472,472,472,472,384,382,410,420,
+            519,521,479,395,506,364,390,393,412,536,
+            377,358,540,533,534,531,532,546,537,523,
+            524,506,506,506,38,506,506,479,479,32,
+            479,479,371,506,400,400,400,400,400,400,
+            400,400,400,400,496,496,496,496,506,496,
+            496,496,496,496,496,496,496,496,496,496,
+            496,496,496,496,496,496,496,496,496,496,
+            496,496,496,496,496,496,496,496,496,496,
+            496,496,496,496,496,496,496,496,496,496,
+            496,496,496,496,496,496,496,496,496,545,
+            832,455,825,824,826,539,395,16,506,506,
+            463,827,1,671,671,671,671,671,671,671,
+            671,671,671,670,670,670,670,510,670,670,
+            670,670,670,670,670,670,670,670,670,670,
+            670,670,670,670,670,670,670,670,670,670,
+            670,670,670,670,670,670,670,670,670,670,
+            670,670,670,670,670,670,670,670,670,670,
+            670,670,670,670,670,670,670,670,380,506,
+            506,815,506,506,506,14,672,317,671,671,
+            671,671,671,671,671,671,671,671,670,670,
+            670,670,506,670,670,670,670,670,670,670,
+            670,670,670,670,670,670,670,670,670,670,
+            670,670,670,670,670,670,670,670,670,670,
+            670,670,670,670,670,670,670,670,670,670,
+            670,670,670,670,670,670,670,670,670,670,
+            670,670,670,535,557,506,35,506,308,3,
+            506,672,6,560,560,560,560,560,560,560,
+            560,560,560,334,334,506,344,344,344,344,
+            344,344,344,344,344,344,506,408,408,408,
+            408,408,408,408,408,408,408,506,417,417,
+            417,417,417,417,417,417,417,417,58,560,
+            560,560,560,560,560,560,560,560,560,12,
+            312,814,506,542,814,814,20,19,325,440,
+            57,560,560,560,560,560,560,560,560,560,
+            560,529,528,830,448,341,60,560,560,560,
+            560,560,560,560,560,560,560,59,560,560,
+            560,560,560,560,560,560,560,560,7,506,
+            506,322,506,163,53,161,167,506,506,334,
+            334,506,426,543,450,506,829,506,506,506,
+            506,668,506,506,530,506,506,506,506,506,
+            506,506,506,506,506,506,506,506,506,506,
+            506,506,506,506,506,506,668,668,506,668,
+            668,505,315,506,506,506,506,506,506,506,
+            506,506,506,506,506,506,506,506,506,506,
+            506,506,506,506,506,506,506,506,506,506,
+            506,506,506,506,506,506,506,506,506,506,
+            506,506,506,506,506,506,506,506,506,506,
+            506,506,1,6,12,1
+        };
+    };
+    public final static char termAction[] = TermAction.termAction;
+    public final int termAction(int index) { return termAction[index]; }
+    public final int asb(int index) { return 0; }
+    public final int asr(int index) { return 0; }
+    public final int nasb(int index) { return 0; }
+    public final int nasr(int index) { return 0; }
+    public final int terminalIndex(int index) { return 0; }
+    public final int nonterminalIndex(int index) { return 0; }
+    public final int scopePrefix(int index) { return 0;}
+    public final int scopeSuffix(int index) { return 0;}
+    public final int scopeLhs(int index) { return 0;}
+    public final int scopeLa(int index) { return 0;}
+    public final int scopeStateSet(int index) { return 0;}
+    public final int scopeRhs(int index) { return 0;}
+    public final int scopeState(int index) { return 0;}
+    public final int inSymb(int index) { return 0;}
+    public final String name(int index) { return null; }
+    public final int getErrorSymbol() { return 0; }
+    public final int getScopeUbound() { return 0; }
+    public final int getScopeSize() { return 0; }
+    public final int getMaxNameLength() { return 0; }
+
+    public final static int
+           NUM_STATES        = 49,
+           NT_OFFSET         = 103,
+           LA_STATE_OFFSET   = 832,
+           MAX_LA            = 1,
+           NUM_RULES         = 326,
+           NUM_NONTERMINALS  = 40,
+           NUM_SYMBOLS       = 143,
+           SEGMENT_SIZE      = 8192,
+           START_STATE       = 327,
+           IDENTIFIER_SYMBOL = 0,
+           EOFT_SYMBOL       = 99,
+           EOLT_SYMBOL       = 104,
+           ACCEPT_ACTION     = 505,
+           ERROR_ACTION      = 506;
+
+    public final static boolean BACKTRACK = false;
+
+    public final int getNumStates() { return NUM_STATES; }
+    public final int getNtOffset() { return NT_OFFSET; }
+    public final int getLaStateOffset() { return LA_STATE_OFFSET; }
+    public final int getMaxLa() { return MAX_LA; }
+    public final int getNumRules() { return NUM_RULES; }
+    public final int getNumNonterminals() { return NUM_NONTERMINALS; }
+    public final int getNumSymbols() { return NUM_SYMBOLS; }
+    public final int getSegmentSize() { return SEGMENT_SIZE; }
+    public final int getStartState() { return START_STATE; }
+    public final int getStartSymbol() { return lhs[0]; }
+    public final int getIdentifierSymbol() { return IDENTIFIER_SYMBOL; }
+    public final int getEoftSymbol() { return EOFT_SYMBOL; }
+    public final int getEoltSymbol() { return EOLT_SYMBOL; }
+    public final int getAcceptAction() { return ACCEPT_ACTION; }
+    public final int getErrorAction() { return ERROR_ACTION; }
+    public final boolean isValidForParser() { return isValidForParser; }
+    public final boolean getBacktrack() { return BACKTRACK; }
+
+    public final int originalState(int state) { return 0; }
+    public final int asi(int state) { return 0; }
+    public final int nasi(int state) { return 0; }
+    public final int inSymbol(int state) { return 0; }
+
+    public final int ntAction(int state, int sym) {
+        return baseAction[state + sym];
+    }
+
+    public final int tAction(int state, int sym) {
+        int i = baseAction[state],
+            k = i + sym;
+        return termAction[termCheck[k] == sym ? k : i];
+    }
+    public final int lookAhead(int la_state, int sym) {
+        int k = la_state + sym;
+        return termAction[termCheck[k] == sym ? k : la_state];
+    }
+}
Index: javadoc.xml
===================================================================
RCS file: javadoc.xml
diff -N javadoc.xml
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ javadoc.xml	1 Jan 1970 00:00:00 -0000
@@ -0,0 +1,12 @@
+<?xml version="1.0" encoding="UTF-8" standalone="no"?>
+<project default="javadoc">
+    <target name="javadoc">
+        <javadoc access="public" author="true" classpath="C:\Tools\Eclipse\3.5M3\plugins\org.eclipse.core.runtime.compatibility.registry_3.2.200.v20081026\runtime_registry_compatibility.jar;C:\Tools\Eclipse\3.5M3\plugins\com.ibm.icu_3.8.1.v20080530.jar;C:\Tools\Eclipse\3.5M3\plugins\org.eclipse.emf.common_2.5.0.v200811032126.jar;C:\Tools\Eclipse\3.5M3\plugins\org.eclipse.equinox.common_3.4.0.v20081024-1200.jar;C:\Tools\Eclipse\3.5M3\plugins\org.eclipse.core.jobs_3.4.100.v20081026.jar;C:\Tools\Eclipse\3.5M3\plugins\org.eclipse.core.runtime_3.5.0.v20081010.jar;C:\Tools\Eclipse\3.5M3\plugins\org.eclipse.osgi_3.5.0.v20081027-1700.jar;C:\Tools\Eclipse\3.5M3\plugins\org.eclipse.core.contenttype_3.3.100.v20081029-1100.jar;C:\Tools\Eclipse\3.5M3\plugins\org.eclipse.equinox.registry_3.4.100.v20081024-1200.jar;C:\Tools\Eclipse\3.5M3\plugins\org.eclipse.equinox.app_1.2.0.v20080901.jar;C:\Tools\Eclipse\3.5M3\plugins\net.sourceforge.lpg.lpgjavaruntime_1.1.0.v200803061910.jar;C:\Tools\Eclipse\3.5M3\plugins\org.eclipse.emf.ecore.xmi_2.5.0.v200811032126.jar;C:\Tools\Eclipse\3.5M3\plugins\org.eclipse.emf.ecore_2.5.0.v200811032126.jar;C:\Tools\Eclipse\3.5M3\plugins\org.eclipse.equinox.preferences_3.2.300.v20080722-0430.jar" destdir="doc" nodeprecated="false" nodeprecatedlist="false" noindex="false" nonavbar="false" notree="false" packagenames="org.eclipse.ocl.types.impl,org.eclipse.ocl.internal.l10n,org.eclipse.ocl.types.operations,org.eclipse.ocl.expressions.impl,org.eclipse.ocl.parser,org.eclipse.ocl.options,org.eclipse.ocl.internal.helper,org.eclipse.ocl.expressions,org.eclipse.ocl.util,org.eclipse.ocl.internal.evaluation,org.eclipse.ocl,org.eclipse.ocl.expressions.operations,org.eclipse.ocl.internal,org.eclipse.ocl.utilities,org.eclipse.ocl.utilities.util,org.eclipse.ocl.cst,org.eclipse.ocl.utilities.impl,org.eclipse.ocl.helper,org.eclipse.ocl.expressions.util,org.eclipse.ocl.types.util,org.eclipse.ocl.types,org.eclipse.ocl.lpg,org.eclipse.ocl.cst.impl,org.eclipse.ocl.cst.util" source="1.5" sourcepath="src" splitindex="true" use="true" version="true">
+        	<tag name="generated"/>
+        	<tag name="model"/>
+        	<tag name="noimplement"/>
+        	<tag name="noreference"/>
+        	<tag name="ordered"/>
+        </javadoc>
+     </target>
+</project>
Index: src/org/eclipse/ocl/parser/backtracking/OCLBacktrackingLexer.l
===================================================================
RCS file: src/org/eclipse/ocl/parser/backtracking/OCLBacktrackingLexer.l
diff -N src/org/eclipse/ocl/parser/backtracking/OCLBacktrackingLexer.l
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ src/org/eclipse/ocl/parser/backtracking/OCLBacktrackingLexer.l	1 Jan 1970 00:00:00 -0000
@@ -0,0 +1,73 @@
+
+Options in effect for ./OCLBacktrackingLexer.g:
+
+    ACTION-BLOCK=("OCLBacktrackingLexer.java","/.","./")
+
+    AST-DIRECTORY=""  AST-TYPE="Ast"  NOATTRIBUTES  NOAUTOMATIC-AST  NOBACKTRACK
+    BYTE  CONFLICTS  DAT-DIRECTORY="./"  DAT-FILE="OCLBacktrackingLexerdcl.data"
+    DCL-FILE="OCLBacktrackingLexerdcl.java"  NODEBUG  
+    DEF-FILE="OCLBacktrackingLexerdef.java"  NOEDIT  NOERROR-MAPS  ESCAPE='$'  
+    EXPORT-TERMINALS=("OCLBacktrackingParsersym.java","TK_","")  
+    EXTENDS-PARSETABLE  FACTORY="new "  FILE-PREFIX="OCLBacktrackingLexer"  
+    FILTER="OCLBacktrackingKWLexer.g"  NOFIRST  NOFOLLOW  NOGOTO-DEFAULT  
+    GRM-FILE="./OCLBacktrackingLexer.g"  IMP-FILE="OCLBacktrackingLexerimp.java"
+    INCLUDE-DIRECTORY=".;..;../../lpg"  LALR=2  NOLIST  MARGIN=4  MAX-CASES=1024
+    NAMES=OPTIMIZED  NONT-CHECK  OR_MARKER='|'  
+    PACKAGE="org.eclipse.ocl.parser.backtracking"  NOPARENT-SAVE  
+    PARSETABLE-INTERFACES="lpg.lpgjavaruntime.ParseTable"  PREFIX="Char_"  
+    PRIORITY  PROGRAMMING_LANGUAGE=JAVA  PRS-FILE="OCLBacktrackingLexerprs.java"
+    NOQUIET  READ-REDUCE  REMAP-TERMINALS  NOSCOPES  NOSERIALIZE  
+    NOSHIFT-DEFAULT  SINGLE-PRODUCTIONS  NOSOFT-KEYWORDS  NOSTATES  SUFFIX=""  
+    SYM-FILE="OCLBacktrackingLexersym.java"  TAB-FILE="OCLBacktrackingLexer.t"
+    TABLE  TEMPLATE="../../lpg/LexerTemplateD.g"  TRACE=CONFLICTS  NOVARIABLES
+    NOVERBOSE  NOVISITOR  VISITOR-TYPE="Visitor"  WARNINGS  NOXREF  
+
+The macro "$Id" used in file ../OCLLexer.g at line 83 is undefined. No susbtitution made
+The macro "$" used in file ../OCLLexer.g at line 83 is undefined. No susbtitution made
+*** The following Non-Terminals are useless: 
+        HexDigits HexDigit OctalDigit a..fA..F OctalDigits3 LetterXx 
+
+
+
+./OCLBacktrackingLexer.g is LALR(1).
+
+
+Number of Terminals: 103
+Number of Nonterminals: 39
+Number of Productions: 327
+Number of Single Productions: 249
+Number of Items: 725
+Number of States: 49
+Number of Shift actions: 575
+Number of Goto actions: 63
+Number of Shift/Reduce actions: 803
+Number of Goto/Reduce actions: 62
+Number of Reduce actions: 376
+Number of Shift-Reduce conflicts: 0
+Number of Reduce-Reduce conflicts: 0
+
+Number of entries in base Action Table: 174
+Additional space required for compaction of Action Table: 2.2%
+
+Number of unique terminal states: 48
+Number of Shift actions saved by merging: 96
+Number of Conflict points saved by merging: 0
+Number of Reduce actions saved by merging: 1
+Number of Reduce saved by default: 369
+
+Number of entries in Terminal Action Table: 1336
+Additional space required for compaction of Terminal Table: 7.4%
+
+Actions in Compressed Tables:
+     Number of Shifts: 479
+     Number of Shift/Reduces: 803
+     Number of Gotos: 63
+     Number of Goto/Reduces: 62
+     Number of Reduces: 6
+     Number of Defaults: 29
+
+Parsing Tables storage:
+    Storage required for BASE_CHECK: 327 Bytes
+    Storage required for BASE_ACTION: 1012 Bytes
+    Storage required for TERM_CHECK: 1441 Bytes
+    Storage required for TERM_ACTION: 2874 Bytes
Index: src/org/eclipse/ocl/parser/backtracking/OCLBacktrackingLexersym.java
===================================================================
RCS file: src/org/eclipse/ocl/parser/backtracking/OCLBacktrackingLexersym.java
diff -N src/org/eclipse/ocl/parser/backtracking/OCLBacktrackingLexersym.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ src/org/eclipse/ocl/parser/backtracking/OCLBacktrackingLexersym.java	1 Jan 1970 00:00:00 -0000
@@ -0,0 +1,236 @@
+/**
+* <copyright>
+*
+* Copyright (c) 2005, 2008 IBM Corporation and others.
+* All rights reserved.   This program and the accompanying materials
+* are made available under the terms of the Eclipse Public License v1.0
+* which accompanies this distribution, and is available at
+* http://www.eclipse.org/legal/epl-v10.html
+*
+* Contributors:
+*   IBM - Initial API and implementation
+*   E.D.Willink - Lexer and Parser refactoring to support extensibility and flexible error handling
+*
+* </copyright>
+*
+* $Id: OCL_v200811051638.patch,v 1.1 2008/11/19 21:26:34 ewillink Exp $
+*/
+
+package org.eclipse.ocl.parser.backtracking;
+
+@SuppressWarnings("nls")
+public interface OCLBacktrackingLexersym {
+    public final static int
+      Char_CtlCharNotWS = 103,
+      Char_LF = 100,
+      Char_CR = 101,
+      Char_HT = 97,
+      Char_FF = 98,
+      Char_a = 16,
+      Char_b = 17,
+      Char_c = 18,
+      Char_d = 19,
+      Char_e = 11,
+      Char_f = 20,
+      Char_g = 21,
+      Char_h = 22,
+      Char_i = 23,
+      Char_j = 24,
+      Char_k = 25,
+      Char_l = 26,
+      Char_m = 27,
+      Char_n = 28,
+      Char_o = 29,
+      Char_p = 13,
+      Char_q = 30,
+      Char_r = 14,
+      Char_s = 31,
+      Char_t = 32,
+      Char_u = 33,
+      Char_v = 34,
+      Char_w = 35,
+      Char_x = 36,
+      Char_y = 37,
+      Char_z = 38,
+      Char__ = 39,
+      Char_A = 40,
+      Char_B = 41,
+      Char_C = 42,
+      Char_D = 43,
+      Char_E = 12,
+      Char_F = 44,
+      Char_G = 45,
+      Char_H = 46,
+      Char_I = 47,
+      Char_J = 48,
+      Char_K = 49,
+      Char_L = 50,
+      Char_M = 51,
+      Char_N = 52,
+      Char_O = 53,
+      Char_P = 54,
+      Char_Q = 55,
+      Char_R = 56,
+      Char_S = 57,
+      Char_T = 58,
+      Char_U = 59,
+      Char_V = 60,
+      Char_W = 61,
+      Char_X = 62,
+      Char_Y = 63,
+      Char_Z = 64,
+      Char_0 = 1,
+      Char_1 = 2,
+      Char_2 = 3,
+      Char_3 = 4,
+      Char_4 = 5,
+      Char_5 = 6,
+      Char_6 = 7,
+      Char_7 = 8,
+      Char_8 = 9,
+      Char_9 = 10,
+      Char_AfterASCIINotAcute = 65,
+      Char_Space = 72,
+      Char_DoubleQuote = 73,
+      Char_SingleQuote = 66,
+      Char_Percent = 91,
+      Char_VerticalBar = 79,
+      Char_Exclamation = 92,
+      Char_AtSign = 80,
+      Char_BackQuote = 81,
+      Char_Acute = 102,
+      Char_Tilde = 93,
+      Char_Sharp = 94,
+      Char_DollarSign = 74,
+      Char_Ampersand = 95,
+      Char_Caret = 75,
+      Char_Colon = 76,
+      Char_SemiColon = 82,
+      Char_BackSlash = 96,
+      Char_LeftBrace = 83,
+      Char_RightBrace = 84,
+      Char_LeftBracket = 85,
+      Char_RightBracket = 86,
+      Char_QuestionMark = 87,
+      Char_Comma = 88,
+      Char_Dot = 67,
+      Char_LessThan = 77,
+      Char_GreaterThan = 68,
+      Char_Plus = 70,
+      Char_Minus = 69,
+      Char_Slash = 78,
+      Char_Star = 71,
+      Char_LeftParen = 89,
+      Char_RightParen = 90,
+      Char_Equal = 15,
+      Char_EOF = 99;
+
+      public final static String orderedTerminalSymbols[] = {
+                 "",
+                 "0",
+                 "1",
+                 "2",
+                 "3",
+                 "4",
+                 "5",
+                 "6",
+                 "7",
+                 "8",
+                 "9",
+                 "e",
+                 "E",
+                 "p",
+                 "r",
+                 "Equal",
+                 "a",
+                 "b",
+                 "c",
+                 "d",
+                 "f",
+                 "g",
+                 "h",
+                 "i",
+                 "j",
+                 "k",
+                 "l",
+                 "m",
+                 "n",
+                 "o",
+                 "q",
+                 "s",
+                 "t",
+                 "u",
+                 "v",
+                 "w",
+                 "x",
+                 "y",
+                 "z",
+                 "_",
+                 "A",
+                 "B",
+                 "C",
+                 "D",
+                 "F",
+                 "G",
+                 "H",
+                 "I",
+                 "J",
+                 "K",
+                 "L",
+                 "M",
+                 "N",
+                 "O",
+                 "P",
+                 "Q",
+                 "R",
+                 "S",
+                 "T",
+                 "U",
+                 "V",
+                 "W",
+                 "X",
+                 "Y",
+                 "Z",
+                 "AfterASCIINotAcute",
+                 "SingleQuote",
+                 "Dot",
+                 "GreaterThan",
+                 "Minus",
+                 "Plus",
+                 "Star",
+                 "Space",
+                 "DoubleQuote",
+                 "DollarSign",
+                 "Caret",
+                 "Colon",
+                 "LessThan",
+                 "Slash",
+                 "VerticalBar",
+                 "AtSign",
+                 "BackQuote",
+                 "SemiColon",
+                 "LeftBrace",
+                 "RightBrace",
+                 "LeftBracket",
+                 "RightBracket",
+                 "QuestionMark",
+                 "Comma",
+                 "LeftParen",
+                 "RightParen",
+                 "Percent",
+                 "Exclamation",
+                 "Tilde",
+                 "Sharp",
+                 "Ampersand",
+                 "BackSlash",
+                 "HT",
+                 "FF",
+                 "EOF",
+                 "LF",
+                 "CR",
+                 "Acute",
+                 "CtlCharNotWS"
+             };
+
+    public final static boolean isValidForParser = true;
+}
Index: src/org/eclipse/ocl/parser/backtracking/OCLBacktrackingParser.g
===================================================================
RCS file: src/org/eclipse/ocl/parser/backtracking/OCLBacktrackingParser.g
diff -N src/org/eclipse/ocl/parser/backtracking/OCLBacktrackingParser.g
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ src/org/eclipse/ocl/parser/backtracking/OCLBacktrackingParser.g	1 Jan 1970 00:00:00 -0000
@@ -0,0 +1,59 @@
+--/**
+-- * <copyright>
+-- *
+-- * Copyright (c) 2008 Eclipse.org and others.
+-- * All rights reserved.   This program and the accompanying materials
+-- * are made available under the terms of the Eclipse Public License v1.0
+-- * which accompanies this distribution, and is available at
+-- * http://www.eclipse.org/legal/epl-v10.html
+-- *
+-- * Contributors:
+-- *   E.D. Willink - Initial API and implementation
+-- *
+-- * </copyright>
+-- *
+-- * $Id: OCL_v200811051638.patch,v 1.1 2008/11/19 21:26:34 ewillink Exp $
+-- */
+--
+-- The OCL Backtracking Parser
+--
+-- This alternate top level grammar demonstrates how to reconfigure the
+-- default deterministic parser to give backtracking behaviour. The backtracking
+-- parser is at least ten times slower, but is able to repair multiple syntax
+-- errors making it useful for interactive usage such as within an editor.
+--
+
+%options escape=$
+%options la=2
+%options table=java
+%options fp=OCLBacktrackingParser,prefix=TK_
+%options error-maps
+%options scopes
+%options margin=4
+%options backtrack
+%options noserialize
+%options package=org.eclipse.ocl.parser.backtracking
+%options import_terminals=OCLBacktrackingLexer.g
+%options ast_type=CSTNode
+%options programming_language=java
+%options action=("*.java", "/.", "./")
+%options ParseTable=lpg.lpgjavaruntime.ParseTable
+%options include_directory=".;..;../../lpg"
+
+$Include
+	OCLParserErrors.g
+$End
+
+$Globals
+	/.
+		import org.eclipse.ocl.parser.AbstractOCLParser;
+	./
+$End
+
+$Define
+	$lex_stream_class /.OCLBacktrackingLexer./
+	$prs_parser_class /.BacktrackingParser./
+	$prs_parser_exception /.NotBacktrackParseTableException./
+	$prs_parser_throw /.throw new RuntimeException("****Error: Regenerate $prs_type.java with -BACKTRACK option")./
+	$prs_parse_args /.error_repair_count./
+$End
Index: src/org/eclipse/ocl/parser/backtracking/OCLBacktrackingKWLexerprs.java
===================================================================
RCS file: src/org/eclipse/ocl/parser/backtracking/OCLBacktrackingKWLexerprs.java
diff -N src/org/eclipse/ocl/parser/backtracking/OCLBacktrackingKWLexerprs.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ src/org/eclipse/ocl/parser/backtracking/OCLBacktrackingKWLexerprs.java	1 Jan 1970 00:00:00 -0000
@@ -0,0 +1,304 @@
+/**
+* <copyright>
+*
+* Copyright (c) 2005, 2008 IBM Corporation and others.
+* All rights reserved.   This program and the accompanying materials
+* are made available under the terms of the Eclipse Public License v1.0
+* which accompanies this distribution, and is available at
+* http://www.eclipse.org/legal/epl-v10.html
+*
+* Contributors:
+*   IBM - Initial API and implementation
+*   E.D.Willink - Lexer and Parser refactoring to support extensibility and flexible error handling
+*
+* </copyright>
+*
+* $Id: OCL_v200811051638.patch,v 1.1 2008/11/19 21:26:34 ewillink Exp $
+*/
+
+package org.eclipse.ocl.parser.backtracking;
+
+public class OCLBacktrackingKWLexerprs implements lpg.lpgjavaruntime.ParseTable, OCLBacktrackingKWLexersym {
+
+    public interface IsKeyword {
+        public final static byte isKeyword[] = {0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0
+        };
+    };
+    public final static byte isKeyword[] = IsKeyword.isKeyword;
+    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }
+
+    public interface BaseCheck {
+        public final static byte baseCheck[] = {0,
+            4,3,3,4,4,7,7,10,3,6,
+            4,2,4,4,5,3,2,3,3,7,
+            3,2,4,5,3,3,8,10,10,7,
+            6,6,8,3,3,7,6,6,13,8,
+            7,11,11,9,8,14,12,12,12,6,
+            7,16,4,7,5,6,7,7,10,4,
+            10,4,4
+        };
+    };
+    public final static byte baseCheck[] = BaseCheck.baseCheck;
+    public final int baseCheck(int index) { return baseCheck[index]; }
+    public final static byte rhs[] = baseCheck;
+    public final int rhs(int index) { return rhs[index]; };
+
+    public interface BaseAction {
+        public final static char baseAction[] = {
+            1,1,1,1,1,1,1,1,1,1,
+            1,1,1,1,1,1,1,1,1,1,
+            1,1,1,1,1,1,1,1,1,1,
+            1,1,1,1,1,1,1,1,1,1,
+            1,1,1,1,1,1,1,1,1,1,
+            1,1,1,1,1,1,1,1,1,1,
+            1,1,1,1,1,66,82,108,27,110,
+            123,125,22,129,66,15,74,130,77,132,
+            47,61,78,133,49,40,135,62,32,80,
+            70,136,137,86,138,143,144,147,148,149,
+            153,92,154,156,155,162,166,167,171,173,
+            177,179,180,89,175,184,95,163,182,186,
+            187,96,188,190,193,198,192,203,195,98,
+            200,206,210,211,212,215,221,223,37,225,
+            216,227,228,229,231,232,233,235,93,237,
+            238,239,245,246,248,253,106,250,255,260,
+            247,261,264,265,267,268,270,273,116,276,
+            278,279,280,281,284,285,283,290,289,297,
+            299,302,303,307,308,311,312,313,301,314,
+            315,319,322,325,328,330,331,333,334,341,
+            332,339,344,346,349,348,352,353,354,355,
+            357,358,360,362,364,369,21,371,372,374,
+            376,377,378,379,381,382,386,390,392,395,
+            399,394,404,403,405,407,409,416,419,413,
+            406,421,426,427,420,429,431,412,439,432,
+            441,444,437,446,448,442,449,452,453,454,
+            456,459,461,101,464,463,465,466,468,475,
+            467,481,469,476,483,479,486,490,491,493,
+            497,498,503,501,506,505,507,511,513,514,
+            516,519,512,522,524,526,527,528,529,531,
+            533,535,541,544,534,542,551,543,553,556,
+            558,559,560,561,564,567,565,570,571,575,
+            581,323,323
+        };
+    };
+    public final static char baseAction[] = BaseAction.baseAction;
+    public final int baseAction(int index) { return baseAction[index]; }
+    public final static char lhs[] = baseAction;
+    public final int lhs(int index) { return lhs[index]; };
+
+    public interface TermCheck {
+        public final static byte termCheck[] = {0,
+            0,1,2,3,4,5,6,7,8,9,
+            10,11,12,13,0,1,2,0,18,19,
+            0,0,22,23,24,25,0,1,7,29,
+            30,0,11,2,34,4,0,37,18,0,
+            9,21,3,12,24,25,0,0,0,10,
+            4,3,4,7,18,35,20,11,27,13,
+            0,0,2,3,4,0,5,19,7,0,
+            5,10,36,0,38,10,0,0,5,0,
+            1,0,13,10,7,0,10,2,0,10,
+            14,0,0,2,0,0,8,0,3,4,
+            0,7,17,6,16,0,12,0,31,0,
+            18,6,20,4,17,0,1,17,13,28,
+            39,14,0,23,0,1,4,12,0,0,
+            1,0,0,1,0,0,0,0,10,3,
+            5,10,0,0,10,3,0,0,0,3,
+            0,8,0,0,0,0,2,10,3,7,
+            7,0,0,15,3,0,0,2,6,32,
+            0,1,0,7,0,3,0,1,0,0,
+            2,0,3,0,1,0,0,0,14,0,
+            9,0,0,8,0,8,10,0,1,0,
+            11,9,0,1,0,0,7,13,3,0,
+            0,0,3,3,0,0,25,6,3,5,
+            0,1,0,1,0,1,0,0,0,3,
+            0,0,0,6,0,3,0,0,0,1,
+            9,7,14,7,0,0,0,0,4,0,
+            20,6,0,1,0,18,9,3,9,0,
+            0,2,16,0,0,2,0,0,4,0,
+            3,2,0,7,2,0,1,0,0,0,
+            0,3,0,0,0,1,26,4,0,0,
+            0,11,10,4,15,7,0,1,0,1,
+            0,0,0,1,27,4,0,0,1,3,
+            0,0,0,0,0,2,4,17,0,9,
+            9,0,0,5,0,1,12,0,1,0,
+            0,0,0,0,5,14,6,5,0,6,
+            0,1,11,0,6,0,1,0,0,6,
+            2,0,0,0,0,1,0,0,6,0,
+            9,0,5,0,17,4,3,11,0,16,
+            0,0,1,0,15,0,0,0,0,9,
+            0,0,9,7,0,0,11,2,11,0,
+            1,0,24,0,0,15,2,19,0,8,
+            2,8,0,0,0,0,0,5,0,28,
+            7,0,0,9,8,0,8,2,0,0,
+            0,16,4,11,4,0,0,1,0,4,
+            0,0,2,2,6,16,0,26,0,1,
+            0,0,2,0,1,0,1,0,0,1,
+            14,0,0,0,3,0,9,5,0,1,
+            0,6,0,0,0,0,0,0,0,4,
+            29,8,5,13,0,0,23,13,0,5,
+            0,1,0,8,16,0,1,21,6,0,
+            0,1,0,15,2,33,0,0,1,10,
+            0,5,0,1,0,0,0,1,8,4,
+            0,0,0,0,1,0,5,2,0,15,
+            8,0,4,0,3,0,0,0,0,1,
+            0,21,0,0,0,12,2,5,11,9,
+            0,0,0,0,2,12,6,22,22,6,
+            0,1,0,12,2,0,1,0,0,0,
+            0,1,4,0,0,8,0,1,9,0,
+            0,0,8,0,0,0,7,14,8,5,
+            0,0,0,3,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0,0,0,0,0,0,
+            0,0,0,0,0
+        };
+    };
+    public final static byte termCheck[] = TermCheck.termCheck;
+    public final int termCheck(int index) { return termCheck[index]; }
+
+    public interface TermAction {
+        public final static char termAction[] = {0,
+            323,84,82,77,78,81,88,71,83,89,
+            80,85,76,87,323,101,100,323,70,79,
+            323,323,72,75,67,69,323,91,96,74,
+            86,323,95,127,73,129,323,68,241,323,
+            126,243,120,335,244,242,323,323,323,121,
+            110,118,119,340,174,245,177,109,128,108,
+            323,323,111,112,113,323,123,117,125,323,
+            99,124,175,323,176,98,323,323,103,323,
+            131,323,132,102,114,323,106,136,323,130,
+            105,323,323,348,323,323,339,22,158,159,
+            323,153,135,166,357,323,332,323,115,323,
+            186,190,185,92,325,323,200,280,191,143,
+            322,90,323,279,323,94,93,324,323,323,
+            104,323,323,116,323,323,323,323,97,134,
+            133,107,323,323,122,138,323,323,323,140,
+            323,139,323,323,323,323,344,141,145,142,
+            144,323,323,349,146,323,323,342,154,137,
+            323,147,323,341,323,148,323,358,323,323,
+            149,323,150,323,152,323,323,323,151,323,
+            155,323,323,156,323,160,157,323,326,323,
+            161,162,323,164,323,323,167,165,168,323,
+            323,323,169,376,323,323,163,170,179,171,
+            323,172,323,173,323,178,323,323,323,180,
+            323,323,323,181,323,383,323,323,323,346,
+            184,386,182,385,323,323,323,323,336,323,
+            183,188,323,337,323,187,189,193,192,323,
+            323,194,328,323,323,327,323,323,196,323,
+            198,334,323,197,199,323,378,323,323,323,
+            323,202,323,323,323,206,195,205,323,323,
+            323,204,207,208,203,209,323,210,323,211,
+            323,323,323,213,201,212,323,323,347,214,
+            323,323,323,323,323,219,217,218,323,215,
+            216,323,323,220,323,222,338,323,223,323,
+            323,323,323,323,224,221,225,226,323,227,
+            323,228,229,323,230,323,232,323,323,231,
+            361,323,323,323,323,236,323,323,235,323,
+            234,323,238,323,233,239,354,237,323,379,
+            323,323,333,323,373,323,323,323,323,246,
+            323,323,355,248,323,323,247,253,249,323,
+            254,323,240,323,323,251,360,250,323,255,
+            256,381,323,323,323,323,323,257,323,252,
+            374,323,323,258,380,323,259,260,323,323,
+            323,262,377,261,263,323,323,265,323,264,
+            323,323,268,270,267,266,323,269,323,364,
+            323,323,329,323,330,323,353,323,323,273,
+            271,323,323,323,274,323,343,275,323,350,
+            323,277,323,323,323,323,36,323,323,283,
+            272,281,284,278,323,323,276,282,323,285,
+            323,356,323,287,363,323,290,286,288,323,
+            323,367,323,289,292,368,323,323,294,291,
+            323,293,323,295,323,323,323,299,296,297,
+            323,323,323,323,382,323,301,352,323,298,
+            384,323,351,323,302,323,323,323,323,331,
+            323,300,323,323,323,303,309,308,306,307,
+            323,323,323,323,313,366,310,304,305,311,
+            323,312,323,365,314,323,371,323,323,323,
+            323,316,315,323,323,370,323,318,372,323,
+            323,323,362,323,323,323,319,317,369,320,
+            323,323,323,375
+        };
+    };
+    public final static char termAction[] = TermAction.termAction;
+    public final int termAction(int index) { return termAction[index]; }
+    public final int asb(int index) { return 0; }
+    public final int asr(int index) { return 0; }
+    public final int nasb(int index) { return 0; }
+    public final int nasr(int index) { return 0; }
+    public final int terminalIndex(int index) { return 0; }
+    public final int nonterminalIndex(int index) { return 0; }
+    public final int scopePrefix(int index) { return 0;}
+    public final int scopeSuffix(int index) { return 0;}
+    public final int scopeLhs(int index) { return 0;}
+    public final int scopeLa(int index) { return 0;}
+    public final int scopeStateSet(int index) { return 0;}
+    public final int scopeRhs(int index) { return 0;}
+    public final int scopeState(int index) { return 0;}
+    public final int inSymb(int index) { return 0;}
+    public final String name(int index) { return null; }
+    public final int getErrorSymbol() { return 0; }
+    public final int getScopeUbound() { return 0; }
+    public final int getScopeSize() { return 0; }
+    public final int getMaxNameLength() { return 0; }
+
+    public final static int
+           NUM_STATES        = 256,
+           NT_OFFSET         = 54,
+           LA_STATE_OFFSET   = 386,
+           MAX_LA            = 1,
+           NUM_RULES         = 63,
+           NUM_NONTERMINALS  = 2,
+           NUM_SYMBOLS       = 56,
+           SEGMENT_SIZE      = 8192,
+           START_STATE       = 64,
+           IDENTIFIER_SYMBOL = 0,
+           EOFT_SYMBOL       = 39,
+           EOLT_SYMBOL       = 55,
+           ACCEPT_ACTION     = 322,
+           ERROR_ACTION      = 323;
+
+    public final static boolean BACKTRACK = false;
+
+    public final int getNumStates() { return NUM_STATES; }
+    public final int getNtOffset() { return NT_OFFSET; }
+    public final int getLaStateOffset() { return LA_STATE_OFFSET; }
+    public final int getMaxLa() { return MAX_LA; }
+    public final int getNumRules() { return NUM_RULES; }
+    public final int getNumNonterminals() { return NUM_NONTERMINALS; }
+    public final int getNumSymbols() { return NUM_SYMBOLS; }
+    public final int getSegmentSize() { return SEGMENT_SIZE; }
+    public final int getStartState() { return START_STATE; }
+    public final int getStartSymbol() { return lhs[0]; }
+    public final int getIdentifierSymbol() { return IDENTIFIER_SYMBOL; }
+    public final int getEoftSymbol() { return EOFT_SYMBOL; }
+    public final int getEoltSymbol() { return EOLT_SYMBOL; }
+    public final int getAcceptAction() { return ACCEPT_ACTION; }
+    public final int getErrorAction() { return ERROR_ACTION; }
+    public final boolean isValidForParser() { return isValidForParser; }
+    public final boolean getBacktrack() { return BACKTRACK; }
+
+    public final int originalState(int state) { return 0; }
+    public final int asi(int state) { return 0; }
+    public final int nasi(int state) { return 0; }
+    public final int inSymbol(int state) { return 0; }
+
+    public final int ntAction(int state, int sym) {
+        return baseAction[state + sym];
+    }
+
+    public final int tAction(int state, int sym) {
+        int i = baseAction[state],
+            k = i + sym;
+        return termAction[termCheck[k] == sym ? k : i];
+    }
+    public final int lookAhead(int la_state, int sym) {
+        int k = la_state + sym;
+        return termAction[termCheck[k] == sym ? k : la_state];
+    }
+}
Index: src/org/eclipse/ocl/parser/backtracking/EssentialOCLErrors.g
===================================================================
RCS file: src/org/eclipse/ocl/parser/backtracking/EssentialOCLErrors.g
diff -N src/org/eclipse/ocl/parser/backtracking/EssentialOCLErrors.g
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ src/org/eclipse/ocl/parser/backtracking/EssentialOCLErrors.g	1 Jan 1970 00:00:00 -0000
@@ -0,0 +1,430 @@
+--/**
+-- * <copyright>
+-- *
+-- * Copyright (c) 2008 Eclipse.org and others.
+-- * All rights reserved.   This program and the accompanying materials
+-- * are made available under the terms of the Eclipse Public License v1.0
+-- * which accompanies this distribution, and is available at
+-- * http://www.eclipse.org/legal/epl-v10.html
+-- *
+-- * Contributors:
+-- *   E.D.Willink - Initial API and implementation
+-- *
+-- * </copyright>
+-- *
+-- * $Id: OCL_v200811051638.patch,v 1.1 2008/11/19 21:26:34 ewillink Exp $
+-- */
+--
+-- Additional ERROR_TOKEN rules for The EssentialOCL Backtracking Parser
+--
+
+$Rules
+	ERROR_Colon ::= ERROR_TOKEN
+		/.$BeginJava
+					reportErrorTokenMessage($getToken(1), OCLParserErrors.MISSING_COLON);
+		  $EndJava
+		./
+	ERROR_Empty ::= ERROR_TOKEN
+		/.$BeginJava
+					reportErrorTokenMessage($getToken(1), OCLParserErrors.EXTRA_TOKENS);
+		  $EndJava
+		./
+	ERROR_IsMarkedPreCS ::= ERROR_TOKEN
+		/.$BeginJava
+					reportErrorTokenMessage($getToken(1), OCLParserErrors.MISSING_AT_PRE);
+					IsMarkedPreCS result = createIsMarkedPreCS(false);
+					setOffsets(result, getIToken($getToken(1)));
+					$setResult(result);
+		  $EndJava
+		./
+
+	ERROR_PathNameCS ::= ERROR_TOKEN
+		/.$BeginJava
+					reportErrorTokenMessage($getToken(1), OCLParserErrors.MISSING_PATH_NAME);
+					CSTNode result = createPathNameCS(getTokenText($getToken(1)));
+					setOffsets(result, getIToken($getToken(1)));
+					$setResult(result);
+		  $EndJava
+		./
+		
+	ERROR_SimpleNameCS ::= ERROR_TOKEN
+		/.$BeginJava
+					reportErrorTokenMessage($getToken(1), OCLParserErrors.MISSING_SIMPLE_NAME);
+					SimpleNameCS result = createSimpleNameCS(
+							SimpleTypeEnum.IDENTIFIER_LITERAL,
+							getTokenText($getToken(1))
+						);
+					setOffsets(result, getIToken($getToken(1)));
+					$setResult(result);
+		  $EndJava
+		./
+
+	attrOrNavCallExpCS ::= simpleNameCS '[' argumentsCS ERROR_TOKEN
+		/.$BeginJava
+					reportErrorTokenMessage($getToken(4), OCLParserErrors.MISSING_RBRACK);
+					CSTNode result = createFeatureCallExpCS(
+							(SimpleNameCS)$getSym(1),
+							(EList)$getSym(3),
+							createIsMarkedPreCS(false)
+						);
+					setOffsets(result, (CSTNode)$getSym(1), getIToken($getToken(4)));
+					$setResult(result);
+		  $EndJava
+		./
+		
+	collectionTypeCS ::= collectionTypeIdentifierCS '(' typeCS ERROR_TOKEN
+		/.$BeginJava
+					reportErrorTokenMessage($getToken(4), OCLParserErrors.MISSING_RPAREN);
+					Object[] objs = (Object[])$getSym(1);
+					CSTNode result = createCollectionTypeCS(
+							(CollectionTypeIdentifierEnum)objs[1],
+							(TypeCS)$getSym(3)
+						);
+					setOffsets(result, (IToken)objs[0], getIToken($getToken(4)));
+					$setResult(result);
+		  $EndJava
+		./
+	collectionTypeCS ::= collectionTypeIdentifierCS ERROR_TOKEN
+		/.$BeginJava
+					reportErrorTokenMessage($getToken(2), OCLParserErrors.MISSING_LPAREN);
+					Object[] objs = (Object[])$getSym(1);
+					CSTNode result = createCollectionTypeCS(
+							(CollectionTypeIdentifierEnum)objs[1],
+							null
+						);
+					setOffsets(result, (IToken)objs[0], getIToken($getToken(2)));
+					$setResult(result);
+		  $EndJava
+		./
+
+	dotArrowExpCS ::=  pathNameCS '::' ERROR_simpleNameCS '(' argumentsCSopt ')'
+		/.$BeginJava
+					OperationCallExpCS result = createOperationCallExpCS(
+							(PathNameCS)$getSym(1),
+							(SimpleNameCS)$getSym(3),
+							(EList)$getSym(5)
+						);
+					setOffsets(result, (CSTNode)$getSym(1), getIToken($getToken(6)));
+					result.setAccessor(DotOrArrowEnum.DOT_LITERAL);
+					$setResult(result);
+		  $EndJava
+		./
+-- FIXME	dotArrowExpCS ::= NUMERIC_OPERATION ERROR_SimpleNameCS
+
+	enumLiteralExpCS ::= pathNameCS '::' ERROR_SimpleNameCS
+		/.$BeginJava
+					PathNameCS pathNameCS = (PathNameCS)$getSym(1);
+					SimpleNameCS simpleNameCS = (SimpleNameCS)$getSym(3);
+					CSTNode result = createEnumLiteralExpCS(
+							pathNameCS,
+							simpleNameCS
+						);
+					setOffsets(result, pathNameCS, simpleNameCS);
+					$setResult(result);
+		  $EndJava
+		./
+		
+	featureCallExpCS ::= unaryName ERROR_IsMarkedPreCS '(' argumentsCSopt ')'
+		/.$NewCase./
+	keywordOperationCallExpCS ::= keywordAsName ERROR_IsMarkedPreCS '(' argumentsCSopt ')'
+		/.$NewCase./
+	operationCallExpCS ::= binaryName ERROR_IsMarkedPreCS '(' argumentsCSopt ')'
+		/.$BeginJava
+					SimpleNameCS simpleNameCS = (SimpleNameCS)$getSym(1);
+					CSTNode result = createOperationCallExpCS(
+							simpleNameCS,
+							(IsMarkedPreCS)$getSym(2),
+							(EList)$getSym(4)
+						);
+					setOffsets(result, simpleNameCS, getIToken($getToken(5)));
+					$setResult(result);
+		  $EndJava
+		./
+	operationCallExpCS ::= oclIsInStateName ERROR_IsMarkedPreCS '(' stateExpCS ')'
+		/.$BeginJava
+					SimpleNameCS simpleNameCS = (SimpleNameCS)$getSym(1);
+					CSTNode result = createOperationCallExpCS(
+							simpleNameCS,
+							(IsMarkedPreCS)$getSym(2),
+							(StateExpCS)$getSym(4)
+						);
+					setOffsets(result, simpleNameCS, getIToken($getToken(5)));
+					$setResult(result);
+		  $EndJava
+		./
+
+	ifExpCS ::= if oclExpressionCS then oclExpressionCS else oclExpressionCS ERROR_Garbage endif
+		/.$BeginJava
+					CSTNode result = createIfExpCS(
+							(OCLExpressionCS)$getSym(2),
+							(OCLExpressionCS)$getSym(4),
+							(OCLExpressionCS)$getSym(6)
+						);
+					setOffsets(result, getIToken($getToken(1)), getIToken($getToken(8)));
+					$setResult(result);
+		  $EndJava
+		./
+	ifExpCS ::= if oclExpressionCS then oclExpressionCS else oclExpressionCS ERROR_TOKEN
+		/.$BeginJava
+					reportErrorTokenMessage($getToken(7), OCLParserErrors.MISSING_ENDIF);
+					CSTNode result = createIfExpCS(
+							(OCLExpressionCS)$getSym(2),
+							(OCLExpressionCS)$getSym(4),
+							(OCLExpressionCS)$getSym(6)
+						);
+					setOffsets(result, getIToken($getToken(1)), getIToken($getToken(7)));
+					$setResult(result);
+		  $EndJava
+		./
+	ifExpCS ::= if oclExpressionCS then oclExpressionCS ERROR_TOKEN
+		/.$BeginJava
+					reportErrorTokenMessage($getToken(5), OCLParserErrors.MISSING_ELSE_ENDIF);
+					CSTNode result = createIfExpCS(
+							(OCLExpressionCS)$getSym(2),
+							(OCLExpressionCS)$getSym(4),
+							createInvalidLiteralExpCS(getTokenText($getToken(5)))
+						);
+					setOffsets(result, getIToken($getToken(1)), getIToken($getToken(5)));
+					$setResult(result);
+		  $EndJava
+		./
+	ifExpCS ::= if oclExpressionCS ERROR_TOKEN
+		/.$BeginJava
+					reportErrorTokenMessage($getToken(3), OCLParserErrors.MISSING_THEN_ELSE_ENDIF);
+					CSTNode result = createIfExpCS(
+							(OCLExpressionCS)$getSym(2),
+							createInvalidLiteralExpCS(getTokenText($getToken(3))),
+							createInvalidLiteralExpCS(getTokenText($getToken(3)))
+						);
+					setOffsets(result, getIToken($getToken(1)), getIToken($getToken(3)));
+					$setResult(result);
+		  $EndJava
+		./
+	ifExpCS ::= if ERROR_TOKEN endif
+		/.$BeginJava
+					reportErrorTokenMessage($getToken(3), OCLParserErrors.MISSING_THEN_ELSE);
+					CSTNode result = createIfExpCS(
+							createInvalidLiteralExpCS(getTokenText($getToken(2))),
+							createInvalidLiteralExpCS(getTokenText($getToken(2))),
+							createInvalidLiteralExpCS(getTokenText($getToken(2)))
+						);
+					setOffsets(result, getIToken($getToken(1)), getIToken($getToken(3)));
+					$setResult(result);
+		  $EndJava
+		./
+		
+	messageExpCS ::= '^' simpleNameCS ERROR_TOKEN
+		/.$NewCase./
+	messageExpCS ::= '^^' simpleNameCS ERROR_TOKEN
+		/.$BeginJava
+					reportErrorTokenMessage($getToken(1), OCLParserErrors.MISSING_MESSAGE_ARGUMENTS);
+					CSTNode result = createMessageExpCS(
+							getIToken($getToken(1)).getKind() == $sym_type.TK_CARET,
+							(SimpleNameCS)$getSym(2),
+							new BasicEList<OCLMessageArgCS>()
+						);
+					setOffsets(result, getIToken($getToken(1)), getIToken($getToken(3)));
+					$setResult(result);
+		  $EndJava
+		./
+	messageExpCS ::= '^' ERROR_SimpleNameCS
+		/.$NewCase./
+	messageExpCS ::= '^^' ERROR_SimpleNameCS
+		/.$BeginJava
+					SimpleNameCS simpleNameCS = (SimpleNameCS)$getSym(2);
+					CSTNode result = createMessageExpCS(
+							getIToken($getToken(1)).getKind() == $sym_type.TK_CARET,
+							simpleNameCS,
+							new BasicEList<OCLMessageArgCS>()
+						);
+					setOffsets(result, getIToken($getToken(1)), simpleNameCS);
+					$setResult(result);
+		  $EndJava
+		./
+
+	oclExpCS ::= ERROR_TOKEN
+		/.$BeginJava
+					reportErrorTokenMessage($getToken(1), OCLParserErrors.MISSING_EXPR);
+					CSTNode result = createInvalidLiteralExpCS(getTokenText($getToken(1)));
+					setOffsets(result, getIToken($getToken(1)));
+					$setResult(result);
+		  $EndJava
+		./
+	oclExpCS ::= '(' oclExpressionCS ERROR_TOKEN
+		/.$BeginJava
+					reportErrorTokenMessage($getToken(3), OCLParserErrors.MISSING_RPAREN);
+					CSTNode result = (CSTNode)$getSym(2);
+					setOffsets(result, getIToken($getToken(1)), getIToken($getToken(3)));
+					$setResult(result);
+		  $EndJava
+		./
+
+	operationCS1 ::= IDENTIFIER '(' parametersCSopt ')' ERROR_Colon
+		/.$BeginJava
+					CSTNode result = createOperationCS(
+							getTokenText($getToken(1)),
+							(EList)$getSym(3),
+							null
+						);
+					setOffsets(result, getIToken($getToken(1)), getIToken($getToken(5)));
+					$setResult(result);
+		  $EndJava
+		./
+	operationCS1 ::= IDENTIFIER '(' parametersCSopt ERROR_TOKEN
+		/.$BeginJava
+					reportErrorTokenMessage($getToken(4), OCLParserErrors.MISSING_RPAREN);
+					CSTNode result = createOperationCS(
+							getTokenText($getToken(1)),
+							(EList)$getSym(3),
+							null
+						);
+					setOffsets(result, getIToken($getToken(1)), getIToken($getToken(4)));
+					$setResult(result);
+		  $EndJava
+		./
+	operationCS1 ::= IDENTIFIER ERROR_TOKEN
+		/.$BeginJava
+					reportErrorTokenMessage($getToken(2), OCLParserErrors.MISSING_LPAREN);
+					CSTNode result = createOperationCS(
+							getTokenText($getToken(1)),
+							new BasicEList(),
+							null
+						);
+					setOffsets(result, getIToken($getToken(1)), getIToken($getToken(2)));
+					$setResult(result);
+		  $EndJava
+		./
+	operationCS1 ::= ERROR_TOKEN
+		/.$BeginJava
+					reportErrorTokenMessage($getToken(1), OCLParserErrors.MISSING_IDENTIFIER);
+					CSTNode result = createOperationCS(
+							getTokenText($getToken(1)),
+							new BasicEList(),
+							null
+						);
+					setOffsets(result, getIToken($getToken(1)));
+					$setResult(result);
+		  $EndJava
+		./
+	operationCS2 ::= pathNameCS '::' simpleNameCS '(' parametersCSopt ')' ERROR_Colon
+		/.$BeginJava
+					PathNameCS pathNameCS = (PathNameCS)$getSym(1);
+					CSTNode result = createOperationCS(
+							pathNameCS,
+							(SimpleNameCS)$getSym(3),
+							(EList)$getSym(5),
+							(TypeCS)$getSym(8)
+						);
+					setOffsets(result, pathNameCS, getIToken($getToken(7)));
+					$setResult(result);
+		  $EndJava
+		./
+	operationCS2 ::= pathNameCS '::' simpleNameCS '(' parametersCSopt ERROR_TOKEN
+		/.$BeginJava
+					reportErrorTokenMessage($getToken(6), OCLParserErrors.MISSING_RPAREN);
+					PathNameCS pathNameCS = (PathNameCS)$getSym(1);
+					CSTNode result = createOperationCS(
+							pathNameCS,
+							(SimpleNameCS)$getSym(3),
+							(EList)$getSym(5),
+							null
+						);
+					setOffsets(result, pathNameCS, getIToken($getToken(7)));
+					$setResult(result);
+		  $EndJava
+		./
+	operationCS2 ::= pathNameCS '::' simpleNameCS ERROR_TOKEN
+		/.$BeginJava
+					reportErrorTokenMessage($getToken(4), OCLParserErrors.MISSING_LPAREN);
+					PathNameCS pathNameCS = (PathNameCS)$getSym(1);
+					CSTNode result = createOperationCS(
+							pathNameCS,
+							(SimpleNameCS)$getSym(3),
+							new BasicEList(),
+							null
+						);
+					setOffsets(result, pathNameCS, getIToken($getToken(4)));
+					$setResult(result);
+		  $EndJava
+		./
+	operationCS2 ::= pathNameCS '::' ERROR_SimpleNameCS
+		/.$BeginJava
+					PathNameCS pathNameCS = (PathNameCS)$getSym(1);
+					SimpleNameCS simpleNameCS = (SimpleNameCS)$getSym(3);
+					CSTNode result = createOperationCS(
+							pathNameCS,
+							simpleNameCS,
+							new BasicEList(),
+							null
+						);
+					setOffsets(result, pathNameCS, simpleNameCS);
+					$setResult(result);
+		  $EndJava
+		./
+
+	parametersCS ::= ERROR_TOKEN
+		/.$BeginJava
+					reportErrorTokenMessage($getToken(1), OCLParserErrors.MISSING_PARAMETERS);
+					EList result = new BasicEList();
+					$setResult(result);
+		  $EndJava
+		./
+	parametersCS ::= parametersCS ',' ERROR_TOKEN
+		/.$BeginJava
+					reportErrorTokenMessage($getToken(3), OCLParserErrors.MISSING_PARAMETER);
+		  $EndJava
+		./
+
+	pathNameCS -> ERROR_PathNameCS
+		
+	simpleNameCSopt -> ERROR_SimpleNameCS
+
+	tupleLiteralExpCS ::= Tuple ERROR_TOKEN
+		/.$BeginJava
+					reportErrorTokenMessage($getToken(7), OCLParserErrors.MISSING_LBRACE);
+					CSTNode result = createTupleLiteralExpCS((EList)$getSym(3));
+					setOffsets(result, getIToken($getToken(1)), getIToken($getToken(4)));
+					$setResult(result);
+		  $EndJava
+		./
+
+	variableCS ::= IDENTIFIER ERROR_TOKEN
+		/.$BeginJava
+					reportErrorTokenMessage($getToken(2), OCLParserErrors.MISSING_VARIABLE_TYPE);
+					CSTNode result = createVariableCS(
+							getTokenText($getToken(1)),
+							null,
+							null
+						);
+					setOffsets(result, getIToken($getToken(1)), getIToken($getToken(2)));
+					$setResult(result);
+		  $EndJava
+		./
+
+	variableExpCS ::= simpleNameCS '[' argumentsCS ERROR_TOKEN
+		/.$NewCase./
+	variableExpCS ::= keywordAsName1 '[' argumentsCS ERROR_TOKEN
+		/.$BeginJava
+					reportErrorTokenMessage($getToken(4), OCLParserErrors.MISSING_RBRACK);
+					CSTNode result = createVariableExpCS(
+							(SimpleNameCS)$getSym(1),
+							(EList)$getSym(3),
+							createIsMarkedPreCS(false)
+						);
+					setOffsets(result, (CSTNode)$getSym(1), getIToken($getToken(4)));
+					$setResult(result);
+		  $EndJava
+		./
+
+	variableListCS ::= ERROR_TOKEN
+		/.$NewCase./
+	variableListCS2 ::= ERROR_TOKEN
+		/.$BeginJava
+					reportErrorTokenMessage($getToken(1), OCLParserErrors.MISSING_VARIABLES);
+					EList result = new BasicEList();
+					result.add($getSym(1));
+					$setResult(result);
+		  $EndJava
+		./
+
+$End
Index: src/org/eclipse/ocl/parser/backtracking/OCLBacktrackingKWLexer.java
===================================================================
RCS file: src/org/eclipse/ocl/parser/backtracking/OCLBacktrackingKWLexer.java
diff -N src/org/eclipse/ocl/parser/backtracking/OCLBacktrackingKWLexer.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ src/org/eclipse/ocl/parser/backtracking/OCLBacktrackingKWLexer.java	1 Jan 1970 00:00:00 -0000
@@ -0,0 +1,514 @@
+/**
+* <copyright>
+*
+* Copyright (c) 2005, 2008 IBM Corporation and others.
+* All rights reserved.   This program and the accompanying materials
+* are made available under the terms of the Eclipse Public License v1.0
+* which accompanies this distribution, and is available at
+* http://www.eclipse.org/legal/epl-v10.html
+*
+* Contributors:
+*   IBM - Initial API and implementation
+*   E.D.Willink - Lexer and Parser refactoring to support extensibility and flexible error handling
+*
+* </copyright>
+*
+* $Id: OCL_v200811051638.patch,v 1.1 2008/11/19 21:26:34 ewillink Exp $
+*/
+
+package org.eclipse.ocl.parser.backtracking;
+
+
+
+public class OCLBacktrackingKWLexer extends OCLBacktrackingKWLexerprs implements OCLBacktrackingParsersym
+{
+    private char[] inputChars;
+    private final int keywordKind[] = new int[63 + 1];
+
+    public int[] getKeywordKinds() { return keywordKind; }
+
+    public int lexer(int curtok, int lasttok)
+    {
+        int current_kind = getKind(inputChars[curtok]),
+            act;
+
+        for (act = tAction(START_STATE, current_kind);
+             act > NUM_RULES && act < ACCEPT_ACTION;
+             act = tAction(act, current_kind))
+        {
+            curtok++;
+            current_kind = (curtok > lasttok
+                                   ? Char_EOF
+                                   : getKind(inputChars[curtok]));
+        }
+
+        if (act > ERROR_ACTION)
+        {
+            curtok++;
+            act -= ERROR_ACTION;
+        }
+
+        return keywordKind[act == ERROR_ACTION  || curtok <= lasttok ? 0 : act];
+    }
+
+    public void setInputChars(char[] inputChars) { this.inputChars = inputChars; }
+
+
+    final static int tokenKind[] = new int[128];
+    static
+    {
+        tokenKind['$'] = Char_DollarSign;
+
+        tokenKind['a'] = Char_a;
+        tokenKind['b'] = Char_b;
+        tokenKind['c'] = Char_c;
+        tokenKind['d'] = Char_d;
+        tokenKind['e'] = Char_e;
+        tokenKind['f'] = Char_f;
+        tokenKind['g'] = Char_g;
+        tokenKind['h'] = Char_h;
+        tokenKind['i'] = Char_i;
+        tokenKind['j'] = Char_j;
+        tokenKind['k'] = Char_k;
+        tokenKind['l'] = Char_l;
+        tokenKind['m'] = Char_m;
+        tokenKind['n'] = Char_n;
+        tokenKind['o'] = Char_o;
+        tokenKind['p'] = Char_p;
+        tokenKind['q'] = Char_q;
+        tokenKind['r'] = Char_r;
+        tokenKind['s'] = Char_s;
+        tokenKind['t'] = Char_t;
+        tokenKind['u'] = Char_u;
+        tokenKind['v'] = Char_v;
+        tokenKind['w'] = Char_w;
+        tokenKind['x'] = Char_x;
+        tokenKind['y'] = Char_y;
+        tokenKind['z'] = Char_z;
+
+        tokenKind['A'] = Char_A;
+        tokenKind['B'] = Char_B;
+        tokenKind['C'] = Char_C;
+        tokenKind['D'] = Char_D;
+        tokenKind['E'] = Char_E;
+        tokenKind['F'] = Char_F;
+        tokenKind['G'] = Char_G;
+        tokenKind['H'] = Char_H;
+        tokenKind['I'] = Char_I;
+        tokenKind['J'] = Char_J;
+        tokenKind['K'] = Char_K;
+        tokenKind['L'] = Char_L;
+        tokenKind['M'] = Char_M;
+        tokenKind['N'] = Char_N;
+        tokenKind['O'] = Char_O;
+        tokenKind['P'] = Char_P;
+        tokenKind['Q'] = Char_Q;
+        tokenKind['R'] = Char_R;
+        tokenKind['S'] = Char_S;
+        tokenKind['T'] = Char_T;
+        tokenKind['U'] = Char_U;
+        tokenKind['V'] = Char_V;
+        tokenKind['W'] = Char_W;
+        tokenKind['X'] = Char_X;
+        tokenKind['Y'] = Char_Y;
+        tokenKind['Z'] = Char_Z;
+    };
+
+    final int getKind(char c)
+    {
+        return (c < 128 ? tokenKind[c] : 0);
+    }
+
+
+    public OCLBacktrackingKWLexer(char[] inputChars, int identifierKind)
+    {
+        this.inputChars = inputChars;
+        keywordKind[0] = identifierKind;
+
+        //
+        // Rule 1:  KeyWord ::= s e l f
+        //
+		keywordKind[1] = (TK_self);
+	  
+	
+        //
+        // Rule 2:  KeyWord ::= i n v
+        //
+		keywordKind[2] = (TK_inv);
+	  
+	
+        //
+        // Rule 3:  KeyWord ::= p r e
+        //
+		keywordKind[3] = (TK_pre);
+	  
+	
+        //
+        // Rule 4:  KeyWord ::= p o s t
+        //
+		keywordKind[4] = (TK_post);
+	  
+	
+        //
+        // Rule 5:  KeyWord ::= b o d y
+        //
+		keywordKind[5] = (TK_body);
+	  
+	
+        //
+        // Rule 6:  KeyWord ::= c o n t e x t
+        //
+		keywordKind[6] = (TK_context);
+	  
+	
+        //
+        // Rule 7:  KeyWord ::= p a c k a g e
+        //
+		keywordKind[7] = (TK_package);
+	  
+	
+        //
+        // Rule 8:  KeyWord ::= e n d p a c k a g e
+        //
+		keywordKind[8] = (TK_endpackage);
+	  
+	
+        //
+        // Rule 9:  KeyWord ::= d e f
+        //
+		keywordKind[9] = (TK_def);
+	  
+	
+        //
+        // Rule 10:  KeyWord ::= d e r i v e
+        //
+		keywordKind[10] = (TK_derive);
+	  
+	
+        //
+        // Rule 11:  KeyWord ::= i n i t
+        //
+		keywordKind[11] = (TK_init);
+	  
+	
+        //
+        // Rule 12:  KeyWord ::= i f
+        //
+		keywordKind[12] = (TK_if);
+	  
+	
+        //
+        // Rule 13:  KeyWord ::= t h e n
+        //
+		keywordKind[13] = (TK_then);
+	  
+	
+        //
+        // Rule 14:  KeyWord ::= e l s e
+        //
+		keywordKind[14] = (TK_else);
+	  
+	
+        //
+        // Rule 15:  KeyWord ::= e n d i f
+        //
+		keywordKind[15] = (TK_endif);
+	  
+	
+        //
+        // Rule 16:  KeyWord ::= a n d
+        //
+		keywordKind[16] = (TK_and);
+	  
+	
+        //
+        // Rule 17:  KeyWord ::= o r
+        //
+		keywordKind[17] = (TK_or);
+	  
+	
+        //
+        // Rule 18:  KeyWord ::= x o r
+        //
+		keywordKind[18] = (TK_xor);
+	  
+	
+        //
+        // Rule 19:  KeyWord ::= n o t
+        //
+		keywordKind[19] = (TK_not);
+	  
+	
+        //
+        // Rule 20:  KeyWord ::= i m p l i e s
+        //
+		keywordKind[20] = (TK_implies);
+	  
+	
+        //
+        // Rule 21:  KeyWord ::= l e t
+        //
+		keywordKind[21] = (TK_let);
+	  
+	
+        //
+        // Rule 22:  KeyWord ::= i n
+        //
+		keywordKind[22] = (TK_in);
+	  
+	
+        //
+        // Rule 23:  KeyWord ::= t r u e
+        //
+		keywordKind[23] = (TK_true);
+	  
+	
+        //
+        // Rule 24:  KeyWord ::= f a l s e
+        //
+		keywordKind[24] = (TK_false);
+	  
+	
+        //
+        // Rule 25:  KeyWord ::= S e t
+        //
+		keywordKind[25] = (TK_Set);
+	  
+	
+        //
+        // Rule 26:  KeyWord ::= B a g
+        //
+		keywordKind[26] = (TK_Bag);
+	  
+	
+        //
+        // Rule 27:  KeyWord ::= S e q u e n c e
+        //
+		keywordKind[27] = (TK_Sequence);
+	  
+	
+        //
+        // Rule 28:  KeyWord ::= C o l l e c t i o n
+        //
+		keywordKind[28] = (TK_Collection);
+	  
+	
+        //
+        // Rule 29:  KeyWord ::= O r d e r e d S e t
+        //
+		keywordKind[29] = (TK_OrderedSet);
+	  
+	
+        //
+        // Rule 30:  KeyWord ::= i t e r a t e
+        //
+		keywordKind[30] = (TK_iterate);
+	  
+	
+        //
+        // Rule 31:  KeyWord ::= f o r A l l
+        //
+		keywordKind[31] = (TK_forAll);
+	  
+	
+        //
+        // Rule 32:  KeyWord ::= e x i s t s
+        //
+		keywordKind[32] = (TK_exists);
+	  
+	
+        //
+        // Rule 33:  KeyWord ::= i s U n i q u e
+        //
+		keywordKind[33] = (TK_isUnique);
+	  
+	
+        //
+        // Rule 34:  KeyWord ::= a n y
+        //
+		keywordKind[34] = (TK_any);
+	  
+	
+        //
+        // Rule 35:  KeyWord ::= o n e
+        //
+		keywordKind[35] = (TK_one);
+	  
+	
+        //
+        // Rule 36:  KeyWord ::= c o l l e c t
+        //
+		keywordKind[36] = (TK_collect);
+	  
+	
+        //
+        // Rule 37:  KeyWord ::= s e l e c t
+        //
+		keywordKind[37] = (TK_select);
+	  
+	
+        //
+        // Rule 38:  KeyWord ::= r e j e c t
+        //
+		keywordKind[38] = (TK_reject);
+	  
+	
+        //
+        // Rule 39:  KeyWord ::= c o l l e c t N e s t e d
+        //
+		keywordKind[39] = (TK_collectNested);
+	  
+	
+        //
+        // Rule 40:  KeyWord ::= s o r t e d B y
+        //
+		keywordKind[40] = (TK_sortedBy);
+	  
+	
+        //
+        // Rule 41:  KeyWord ::= c l o s u r e
+        //
+		keywordKind[41] = (TK_closure);
+	  
+	
+        //
+        // Rule 42:  KeyWord ::= o c l I s K i n d O f
+        //
+		keywordKind[42] = (TK_oclIsKindOf);
+	  
+	
+        //
+        // Rule 43:  KeyWord ::= o c l I s T y p e O f
+        //
+		keywordKind[43] = (TK_oclIsTypeOf);
+	  
+	
+        //
+        // Rule 44:  KeyWord ::= o c l A s T y p e
+        //
+		keywordKind[44] = (TK_oclAsType);
+	  
+	
+        //
+        // Rule 45:  KeyWord ::= o c l I s N e w
+        //
+		keywordKind[45] = (TK_oclIsNew);
+	  
+	
+        //
+        // Rule 46:  KeyWord ::= o c l I s U n d e f i n e d
+        //
+		keywordKind[46] = (TK_oclIsUndefined);
+	  
+	
+        //
+        // Rule 47:  KeyWord ::= o c l I s I n v a l i d
+        //
+		keywordKind[47] = (TK_oclIsInvalid);
+	  
+	
+        //
+        // Rule 48:  KeyWord ::= o c l I s I n S t a t e
+        //
+		keywordKind[48] = (TK_oclIsInState);
+	  
+	
+        //
+        // Rule 49:  KeyWord ::= a l l I n s t a n c e s
+        //
+		keywordKind[49] = (TK_allInstances);
+	  
+	
+        //
+        // Rule 50:  KeyWord ::= S t r i n g
+        //
+		keywordKind[50] = (TK_String);
+	  
+	
+        //
+        // Rule 51:  KeyWord ::= I n t e g e r
+        //
+		keywordKind[51] = (TK_Integer);
+	  
+	
+        //
+        // Rule 52:  KeyWord ::= U n l i m i t e d N a t u r a l
+        //
+		keywordKind[52] = (TK_UnlimitedNatural);
+	  
+	
+        //
+        // Rule 53:  KeyWord ::= R e a l
+        //
+		keywordKind[53] = (TK_Real);
+	  
+	
+        //
+        // Rule 54:  KeyWord ::= B o o l e a n
+        //
+		keywordKind[54] = (TK_Boolean);
+	  
+	
+        //
+        // Rule 55:  KeyWord ::= T u p l e
+        //
+		keywordKind[55] = (TK_Tuple);
+	  
+	
+        //
+        // Rule 56:  KeyWord ::= O c l A n y
+        //
+		keywordKind[56] = (TK_OclAny);
+	  
+	
+        //
+        // Rule 57:  KeyWord ::= O c l V o i d
+        //
+		keywordKind[57] = (TK_OclVoid);
+	  
+	
+        //
+        // Rule 58:  KeyWord ::= I n v a l i d
+        //
+		keywordKind[58] = (TK_Invalid);
+	  
+	
+        //
+        // Rule 59:  KeyWord ::= O c l M e s s a g e
+        //
+		keywordKind[59] = (TK_OclMessage);
+	  
+	
+        //
+        // Rule 60:  KeyWord ::= n u l l
+        //
+		keywordKind[60] = (TK_null);
+	  
+	
+        //
+        // Rule 61:  KeyWord ::= O c l I n v a l i d
+        //
+		keywordKind[61] = (TK_OclInvalid);
+	  
+	
+        //
+        // Rule 62:  KeyWord ::= a t t r
+        //
+		keywordKind[62] = (TK_attr);
+	  
+	
+        //
+        // Rule 63:  KeyWord ::= o p e r
+        //
+		keywordKind[63] = (TK_oper);
+	  
+	
+
+        for (int i = 0; i < keywordKind.length; i++)
+        {
+            if (keywordKind[i] == 0)
+                keywordKind[i] = identifierKind;
+        }
+    }
+}
+
Index: src/org/eclipse/ocl/parser/backtracking/OCLBacktrackingKWLexersym.java
===================================================================
RCS file: src/org/eclipse/ocl/parser/backtracking/OCLBacktrackingKWLexersym.java
diff -N src/org/eclipse/ocl/parser/backtracking/OCLBacktrackingKWLexersym.java
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ src/org/eclipse/ocl/parser/backtracking/OCLBacktrackingKWLexersym.java	1 Jan 1970 00:00:00 -0000
@@ -0,0 +1,138 @@
+/**
+* <copyright>
+*
+* Copyright (c) 2005, 2008 IBM Corporation and others.
+* All rights reserved.   This program and the accompanying materials
+* are made available under the terms of the Eclipse Public License v1.0
+* which accompanies this distribution, and is available at
+* http://www.eclipse.org/legal/epl-v10.html
+*
+* Contributors:
+*   IBM - Initial API and implementation
+*   E.D.Willink - Lexer and Parser refactoring to support extensibility and flexible error handling
+*
+* </copyright>
+*
+* $Id: OCL_v200811051638.patch,v 1.1 2008/11/19 21:26:34 ewillink Exp $
+*/
+
+package org.eclipse.ocl.parser.backtracking;
+
+@SuppressWarnings("nls")
+public interface OCLBacktrackingKWLexersym {
+    public final static int
+      Char_DollarSign = 40,
+      Char_a = 5,
+      Char_b = 30,
+      Char_c = 11,
+      Char_d = 8,
+      Char_e = 1,
+      Char_f = 12,
+      Char_g = 15,
+      Char_h = 31,
+      Char_i = 6,
+      Char_j = 32,
+      Char_k = 26,
+      Char_l = 3,
+      Char_m = 27,
+      Char_n = 4,
+      Char_o = 10,
+      Char_p = 13,
+      Char_q = 28,
+      Char_r = 7,
+      Char_s = 9,
+      Char_t = 2,
+      Char_u = 14,
+      Char_v = 17,
+      Char_w = 33,
+      Char_x = 19,
+      Char_y = 16,
+      Char_z = 41,
+      Char_A = 20,
+      Char_B = 29,
+      Char_C = 34,
+      Char_D = 42,
+      Char_E = 43,
+      Char_F = 44,
+      Char_G = 45,
+      Char_H = 46,
+      Char_I = 18,
+      Char_J = 47,
+      Char_K = 35,
+      Char_L = 48,
+      Char_M = 36,
+      Char_N = 21,
+      Char_O = 22,
+      Char_P = 49,
+      Char_Q = 50,
+      Char_R = 37,
+      Char_S = 23,
+      Char_T = 24,
+      Char_U = 25,
+      Char_V = 38,
+      Char_W = 51,
+      Char_X = 52,
+      Char_Y = 53,
+      Char_Z = 54,
+      Char_EOF = 39;
+
+      public final static String orderedTerminalSymbols[] = {
+                 "",
+                 "e",
+                 "t",
+                 "l",
+                 "n",
+                 "a",
+                 "i",
+                 "r",
+                 "d",
+                 "s",
+                 "o",
+                 "c",
+                 "f",
+                 "p",
+                 "u",
+                 "g",
+                 "y",
+                 "v",
+                 "I",
+                 "x",
+                 "A",
+                 "N",
+                 "O",
+                 "S",
+                 "T",
+                 "U",
+                 "k",
+                 "m",
+                 "q",
+                 "B",
+                 "b",
+                 "h",
+                 "j",
+                 "w",
+                 "C",
+                 "K",
+                 "M",
+                 "R",
+                 "V",
+                 "EOF",
+                 "DollarSign",
+                 "z",
+                 "D",
+                 "E",
+                 "F",
+                 "G",
+                 "H",
+                 "J",
+                 "L",
+                 "P",
+                 "Q",
+                 "W",
+                 "X",
+                 "Y",
+                 "Z"
+             };
+
+    public final static boolean isValidForParser = true;
+}
Index: src/org/eclipse/ocl/parser/backtracking/OCLBacktrackingParser.l
===================================================================
RCS file: src/org/eclipse/ocl/parser/backtracking/OCLBacktrackingParser.l
diff -N src/org/eclipse/ocl/parser/backtracking/OCLBacktrackingParser.l
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ src/org/eclipse/ocl/parser/backtracking/OCLBacktrackingParser.l	1 Jan 1970 00:00:00 -0000
@@ -0,0 +1,449 @@
+
+Options in effect for C:\Development\QvtDeclarative\plugins\org.eclipse.ocl\src\org\eclipse\ocl\parser\backtracking\OCLBacktrackingParser.g:
+
+    ACTION-BLOCK=("OCLBacktrackingParser.java","/.","./")
+
+    AST-DIRECTORY=""  AST-TYPE="CSTNode"  NOATTRIBUTES  NOAUTOMATIC-AST  
+    BACKTRACK  BYTE  CONFLICTS  DAT-DIRECTORY="./"  
+    DAT-FILE="OCLBacktrackingParserdcl.data"  
+    DCL-FILE="OCLBacktrackingParserdcl.java"  NODEBUG  
+    DEF-FILE="OCLBacktrackingParserdef.java"  NOEDIT  ERROR-MAPS  ESCAPE='$'  
+    EXPORT-TERMINALS=("OCLBacktrackingParserexp.java","","")  EXTENDS-PARSETABLE
+    FACTORY="new "  FILE-PREFIX="OCLBacktrackingParser"  NOFIRST  NOFOLLOW  
+    NOGOTO-DEFAULT  
+    GRM-FILE="C:\Development\QvtDeclarative\plugins\org.eclipse.ocl\src\org\eclipse\ocl\parser\backtracking\OCLBacktrackingParser.g"
+    NOGOTO-DEFAULT  IMP-FILE="OCLBacktrackingParserimp.java"  
+    IMPORT-TERMINALS="OCLBacktrackingLexer.g"  
+    INCLUDE-DIRECTORY=".;..;../../lpg"  LALR=2  NOLIST  MARGIN=4  MAX-CASES=1024
+    NAMES=OPTIMIZED  NONT-CHECK  OR_MARKER='|'  
+    PACKAGE="org.eclipse.ocl.parser.backtracking"  NOPARENT-SAVE  
+    PARSETABLE-INTERFACES="lpg.lpgjavaruntime.ParseTable"  PREFIX="TK_"  
+    PRIORITY  PROGRAMMING_LANGUAGE=JAVA  
+    PRS-FILE="OCLBacktrackingParserprs.java"  NOQUIET  READ-REDUCE  
+    REMAP-TERMINALS  SCOPES  NOSERIALIZE  NOSHIFT-DEFAULT  NOSINGLE-PRODUCTIONS
+    NOSOFT-KEYWORDS  NOSTATES  SUFFIX=""  
+    SYM-FILE="OCLBacktrackingParsersym.java"  TAB-FILE="OCLBacktrackingParser.t"
+    TABLE  TEMPLATE=""  TRACE=CONFLICTS  NOVARIABLES  NOVERBOSE  NOVISITOR  
+    VISITOR-TYPE="Visitor"  WARNINGS  NOXREF  
+
+*** The following undeclared symbols are assumed to be Terminals:
+
+        ERROR_simpleNameCS  ERROR_Garbage  
+The macro "$Id" used in file ../EssentialOCL.g at line 224 is undefined. No susbtitution made
+The macro "$" used in file ../EssentialOCL.g at line 224 is undefined. No susbtitution made
+
+
+Strongly-connected components in ranks:
+
+    initOrDerValueCSopt
+    initOrDerValueCS
+
+
+
+RANK RULE
+==== ====
+1    260   classifierContextDeclCS ::= context pathNameCS invOrDefCSm
+2    315   classifierContextDeclCS ::= context pathNameCS ERROR_TOKEN
+3    267   operationContextDeclCS ::= context operationCS2 prePostOrBodyDeclCSm
+4    255   propertyContextCS ::= context pathNameCS COLONCOLON simpleNameCS COLON typeCS initOrDerValueCS
+5    329   propertyContextCS ::= context pathNameCS COLONCOLON ERROR_SimpleNameCS
+6    252   contextDeclCS ::= classifierContextDeclCS
+7    253   contextDeclCS ::= operationContextDeclCS
+8    254   contextDeclCS ::= propertyContextCS
+9    250   contextDeclCSm ::= contextDeclCS
+10   251   contextDeclCSm ::= contextDeclCSm contextDeclCS
+11   247   packageDeclarationCS1 ::= contextDeclCSm
+12   246   packageDeclarationCS ::= package pathNameCS contextDeclCSmopt endpackage
+13   323   packageDeclarationCS ::= package pathNameCS contextDeclCSmopt ERROR_Empty endpackage
+14   324   packageDeclarationCS ::= package pathNameCS contextDeclCSmopt ERROR_TOKEN
+15   325   packageDeclarationCS ::= package ERROR_PathNameCS
+16   244   packageDeclarationCSm ::= packageDeclarationCS
+17   245   packageDeclarationCSm ::= packageDeclarationCSm packageDeclarationCS
+18   263   invOrDefCS ::= inv simpleNameCSopt COLON oclExpressionCS
+19   264   invOrDefCS ::= def simpleNameCSopt COLON defExpressionCS
+20   321   invOrDefCS ::= inv simpleNameCS ERROR_TOKEN
+21   322   invOrDefCS ::= def simpleNameCS ERROR_TOKEN
+22   270   prePostOrBodyDeclCS ::= pre simpleNameCSopt COLON oclExpressionCS
+23   271   prePostOrBodyDeclCS ::= post simpleNameCSopt COLON oclExpressionCS
+24   272   prePostOrBodyDeclCS ::= body simpleNameCSopt COLON oclExpressionCS
+25   326   prePostOrBodyDeclCS ::= pre simpleNameCS ERROR_TOKEN
+26   327   prePostOrBodyDeclCS ::= post simpleNameCS ERROR_TOKEN
+27   328   prePostOrBodyDeclCS ::= body simpleNameCS ERROR_TOKEN
+28   259   initOrDerValueCSopt ::= initOrDerValueCS
+29   258   initOrDerValueCSopt ::=
+30   256   initOrDerValueCS ::= initOrDerValueCSopt init COLON oclExpressionCS
+31   257   initOrDerValueCS ::= initOrDerValueCSopt derive COLON oclExpressionCS
+32   319   initOrDerValueCS ::= initOrDerValueCSopt init ERROR_TOKEN
+33   320   initOrDerValueCS ::= initOrDerValueCSopt derive ERROR_TOKEN
+34   190   typedVariableCS ::= IDENTIFIER COLON typeCS
+35   189   variableCS ::= IDENTIFIER
+36   191   variableCS ::= typedVariableCS
+37   192   variableCS ::= IDENTIFIER COLON typeCS EQUAL oclExpressionCS
+38   310   variableCS ::= IDENTIFIER ERROR_TOKEN
+39   237   goal ::= packageDeclarationCS1
+40   238   goal ::= packageDeclarationCSm
+41   239   goal ::= invOrDefCS
+42   240   goal ::= prePostOrBodyDeclCS
+43   241   goal ::= initOrDerValueCS
+44   242   goal ::= variableCS
+45   243   goal ::=
+46   0     $accept ::= goal
+47   1     binaryIdentifier ::= oclIsUndefined
+48   2     binaryIdentifier ::= oclIsInvalid
+49   3     binaryIdentifier ::= oclIsNew
+50   4     binaryIdentifier ::= oclAsType
+51   5     binaryIdentifier ::= oclIsKindOf
+52   6     binaryIdentifier ::= oclIsTypeOf
+53   7     binaryIdentifier ::= EQUAL
+54   8     binaryIdentifier ::= NOT_EQUAL
+55   9     binaryIdentifier ::= PLUS
+56   10    binaryIdentifier ::= MULTIPLY
+57   11    binaryIdentifier ::= DIVIDE
+58   12    binaryIdentifier ::= GREATER
+59   13    binaryIdentifier ::= LESS
+60   14    binaryIdentifier ::= GREATER_EQUAL
+61   15    binaryIdentifier ::= LESS_EQUAL
+62   16    binaryIdentifier ::= and
+63   17    binaryIdentifier ::= or
+64   18    binaryIdentifier ::= xor
+65   19    unaryIdentifier ::= MINUS
+66   20    unaryIdentifier ::= not
+67   21    iteratorIdentifier ::= forAll
+68   22    iteratorIdentifier ::= exists
+69   23    iteratorIdentifier ::= isUnique
+70   24    iteratorIdentifier ::= any
+71   25    iteratorIdentifier ::= one
+72   26    iteratorIdentifier ::= collect
+73   27    iteratorIdentifier ::= select
+74   28    iteratorIdentifier ::= reject
+75   29    iteratorIdentifier ::= collectNested
+76   30    iteratorIdentifier ::= sortedBy
+77   31    iteratorIdentifier ::= closure
+78   32    keywordAsIdentifier1 ::= iterate
+79   33    keywordAsIdentifier1 ::= iteratorIdentifier
+80   34    keywordAsIdentifier1 ::= allInstances
+81   35    keywordAsIdentifier1 ::= body
+82   36    keywordAsIdentifier1 ::= derive
+83   37    keywordAsIdentifier1 ::= init
+84   38    keywordAsIdentifier1 ::= Set
+85   39    keywordAsIdentifier1 ::= Bag
+86   40    keywordAsIdentifier1 ::= Sequence
+87   41    keywordAsIdentifier1 ::= Collection
+88   42    keywordAsIdentifier1 ::= OrderedSet
+89   43    keywordAsIdentifier ::= keywordAsIdentifier1
+90   44    keywordAsIdentifier ::= null
+91   128   primitiveTypeCS ::= Integer
+92   129   primitiveTypeCS ::= UnlimitedNatural
+93   130   primitiveTypeCS ::= String
+94   131   primitiveTypeCS ::= Real
+95   132   primitiveTypeCS ::= Boolean
+96   133   primitiveTypeCS ::= OclAny
+97   134   primitiveTypeCS ::= OclVoid
+98   135   primitiveTypeCS ::= Invalid
+99   136   primitiveTypeCS ::= OclMessage
+100  125   simpleNameCS ::= primitiveTypeCS
+101  126   simpleNameCS ::= self
+102  127   simpleNameCS ::= IDENTIFIER
+103  45    binaryName ::= simpleNameCS
+104  46    binaryName ::= binaryIdentifier
+105  47    keywordAsName ::= keywordAsIdentifier
+106  48    keywordAsName1 ::= keywordAsIdentifier1
+107  49    unaryName ::= unaryIdentifier
+108  50    iterateName ::= iterate
+109  51    iteratorName ::= iteratorIdentifier
+110  52    oclIsInStateName ::= oclIsInState
+111  55    operationCS1 ::= IDENTIFIER LPAREN parametersCSopt RPAREN COLON typeCSopt
+112  297   operationCS1 ::= IDENTIFIER LPAREN parametersCSopt RPAREN ERROR_TOKEN
+113  298   operationCS1 ::= IDENTIFIER LPAREN parametersCSopt ERROR_TOKEN
+114  299   operationCS1 ::= IDENTIFIER ERROR_TOKEN
+115  300   operationCS1 ::= ERROR_TOKEN
+116  275   ERROR_PathNameCS ::= ERROR_TOKEN
+117  137   pathNameCS ::= IDENTIFIER
+118  138   pathNameCS ::= pathNameCS COLONCOLON simpleNameCS
+119  307   pathNameCS ::= ERROR_PathNameCS
+120  56    operationCS2 ::= pathNameCS COLONCOLON simpleNameCS LPAREN parametersCSopt RPAREN COLON typeCSopt
+121  301   operationCS2 ::= pathNameCS COLONCOLON simpleNameCS LPAREN parametersCSopt RPAREN ERROR_TOKEN
+122  302   operationCS2 ::= pathNameCS COLONCOLON simpleNameCS LPAREN parametersCSopt ERROR_TOKEN
+123  303   operationCS2 ::= pathNameCS COLONCOLON simpleNameCS ERROR_TOKEN
+124  304   operationCS2 ::= pathNameCS COLONCOLON ERROR_SimpleNameCS
+125  53    operationCS ::= operationCS1
+126  54    operationCS ::= operationCS2
+127  59    parametersCS ::= variableCS
+128  60    parametersCS ::= parametersCS COMMA variableCS
+129  305   parametersCS ::= ERROR_TOKEN
+130  306   parametersCS ::= parametersCS COMMA ERROR_TOKEN
+131  58    parametersCSopt ::= parametersCS
+132  57    parametersCSopt ::=
+133  201   tupleTypeCS ::= Tuple LPAREN variableListCSopt RPAREN
+134  150   collectionTypeIdentifierCS ::= Set
+135  151   collectionTypeIdentifierCS ::= Bag
+136  152   collectionTypeIdentifierCS ::= Sequence
+137  153   collectionTypeIdentifierCS ::= Collection
+138  154   collectionTypeIdentifierCS ::= OrderedSet
+139  200   collectionTypeCS ::= collectionTypeIdentifierCS LPAREN typeCS RPAREN
+140  278   collectionTypeCS ::= collectionTypeIdentifierCS LPAREN typeCS ERROR_TOKEN
+141  279   collectionTypeCS ::= collectionTypeIdentifierCS ERROR_TOKEN
+142  196   typeCS ::= primitiveTypeCS
+143  197   typeCS ::= tupleTypeCS
+144  198   typeCS ::= collectionTypeCS
+145  199   typeCS ::= pathNameCS
+146  195   typeCSopt ::= typeCS
+147  194   typeCSopt ::=
+148  276   ERROR_SimpleNameCS ::= ERROR_TOKEN
+149  62    simpleNameCSopt ::= simpleNameCS
+150  308   simpleNameCSopt ::= ERROR_SimpleNameCS
+151  61    simpleNameCSopt ::=
+152  121   variableExpCS ::= simpleNameCS isMarkedPreCS
+153  122   variableExpCS ::= keywordAsName1 isMarkedPreCS
+154  123   variableExpCS ::= simpleNameCS LBRACKET argumentsCS RBRACKET isMarkedPreCS
+155  124   variableExpCS ::= keywordAsName1 LBRACKET argumentsCS RBRACKET isMarkedPreCS
+156  311   variableExpCS ::= simpleNameCS LBRACKET argumentsCS ERROR_TOKEN
+157  312   variableExpCS ::= keywordAsName1 LBRACKET argumentsCS ERROR_TOKEN
+158  147   enumLiteralExpCS ::= pathNameCS COLONCOLON keywordAsName
+159  148   enumLiteralExpCS ::= pathNameCS COLONCOLON simpleNameCS
+160  281   enumLiteralExpCS ::= pathNameCS COLONCOLON ERROR_SimpleNameCS
+161  149   collectionLiteralExpCS ::= collectionTypeIdentifierCS LBRACE collectionLiteralPartsCSopt RBRACE
+162  169   tupleLiteralExpCS ::= Tuple LBRACE variableListCS2 RBRACE
+163  309   tupleLiteralExpCS ::= Tuple ERROR_TOKEN
+164  170   integerLiteralExpCS ::= INTEGER_LITERAL
+165  171   unlimitedNaturalLiteralExpCS ::= MULTIPLY
+166  172   realLiteralExpCS ::= REAL_LITERAL
+167  173   stringLiteralExpCS ::= STRING_LITERAL
+168  174   booleanLiteralExpCS ::= true
+169  175   booleanLiteralExpCS ::= false
+170  164   primitiveLiteralExpCS ::= integerLiteralExpCS
+171  165   primitiveLiteralExpCS ::= unlimitedNaturalLiteralExpCS
+172  166   primitiveLiteralExpCS ::= realLiteralExpCS
+173  167   primitiveLiteralExpCS ::= stringLiteralExpCS
+174  168   primitiveLiteralExpCS ::= booleanLiteralExpCS
+175  176   nullLiteralExpCS ::= null
+176  177   invalidLiteralExpCS ::= OclInvalid
+177  141   literalExpCS ::= enumLiteralExpCS
+178  142   literalExpCS ::= collectionLiteralExpCS
+179  143   literalExpCS ::= tupleLiteralExpCS
+180  144   literalExpCS ::= primitiveLiteralExpCS
+181  145   literalExpCS ::= nullLiteralExpCS
+182  146   literalExpCS ::= invalidLiteralExpCS
+183  213   operationCallExpCS ::= binaryName isMarkedPreCS LPAREN argumentsCSopt RPAREN
+184  216   operationCallExpCS ::= oclIsInStateName isMarkedPreCS LPAREN stateExpCS RPAREN
+185  284   operationCallExpCS ::= binaryName ERROR_IsMarkedPreCS LPAREN argumentsCSopt RPAREN
+186  285   operationCallExpCS ::= oclIsInStateName ERROR_IsMarkedPreCS LPAREN stateExpCS RPAREN
+187  214   keywordOperationCallExpCS ::= keywordAsName isMarkedPreCS LPAREN argumentsCSopt RPAREN
+188  283   keywordOperationCallExpCS ::= keywordAsName ERROR_IsMarkedPreCS LPAREN argumentsCSopt RPAREN
+189  116   oclExpCS ::= variableExpCS
+190  117   oclExpCS ::= literalExpCS
+191  118   oclExpCS ::= operationCallExpCS
+192  119   oclExpCS ::= keywordOperationCallExpCS
+193  120   oclExpCS ::= LPAREN oclExpressionCS RPAREN
+194  295   oclExpCS ::= ERROR_TOKEN
+195  296   oclExpCS ::= LPAREN oclExpressionCS ERROR_TOKEN
+196  111   dotArrowExpCS ::= oclExpCS
+197  112   dotArrowExpCS ::= dotArrowExpCS callExpCS
+198  113   dotArrowExpCS ::= dotArrowExpCS messageExpCS
+199  114   dotArrowExpCS ::= NUMERIC_OPERATION LPAREN argumentsCSopt RPAREN
+200  115   dotArrowExpCS ::= pathNameCS COLONCOLON simpleNameCS LPAREN argumentsCSopt RPAREN
+201  280   dotArrowExpCS ::= pathNameCS COLONCOLON ERROR_simpleNameCS LPAREN argumentsCSopt RPAREN
+202  107   unaryExpCS ::= dotArrowExpCS
+203  109   unaryExpCS ::= MINUS unaryExpCS
+204  110   unaryExpCS ::= not unaryExpCS
+205  101   multiplicativeExpCS ::= unaryExpCS
+206  103   multiplicativeExpCS ::= multiplicativeExpCS MULTIPLY unaryExpCS
+207  105   multiplicativeExpCS ::= multiplicativeExpCS DIVIDE unaryExpCS
+208  95    additiveExpCS ::= multiplicativeExpCS
+209  97    additiveExpCS ::= additiveExpCS PLUS multiplicativeExpCS
+210  99    additiveExpCS ::= additiveExpCS MINUS multiplicativeExpCS
+211  227   ifExpCS ::= if oclExpressionCS then oclExpressionCS else oclExpressionCS endif
+212  286   ifExpCS ::= if oclExpressionCS then oclExpressionCS else oclExpressionCS ERROR_Garbage endif
+213  287   ifExpCS ::= if oclExpressionCS then oclExpressionCS else oclExpressionCS ERROR_TOKEN
+214  288   ifExpCS ::= if oclExpressionCS then oclExpressionCS ERROR_TOKEN
+215  289   ifExpCS ::= if oclExpressionCS ERROR_TOKEN
+216  290   ifExpCS ::= if ERROR_TOKEN endif
+217  93    ifExpCSPrec ::= additiveExpCS
+218  94    ifExpCSPrec ::= ifExpCS
+219  83    relationalExpCS ::= ifExpCSPrec
+220  85    relationalExpCS ::= relationalExpCS GREATER ifExpCSPrec
+221  87    relationalExpCS ::= relationalExpCS LESS ifExpCSPrec
+222  89    relationalExpCS ::= relationalExpCS GREATER_EQUAL ifExpCSPrec
+223  91    relationalExpCS ::= relationalExpCS LESS_EQUAL ifExpCSPrec
+224  77    equalityExpCS ::= relationalExpCS
+225  79    equalityExpCS ::= equalityExpCS EQUAL relationalExpCS
+226  81    equalityExpCS ::= equalityExpCS NOT_EQUAL relationalExpCS
+227  69    andOrXorExpCS ::= equalityExpCS
+228  71    andOrXorExpCS ::= andOrXorExpCS and equalityExpCS
+229  72    andOrXorExpCS ::= andOrXorExpCS or equalityExpCS
+230  73    andOrXorExpCS ::= andOrXorExpCS xor equalityExpCS
+231  65    impliesExpCS ::= andOrXorExpCS
+232  67    impliesExpCS ::= impliesExpCS implies andOrXorExpCS
+233  226   letExpCS ::= let variableListCS in oclExpressionCS
+234  108   unaryWithLet ::= letExpCS
+235  102   multiplicativeWithLet ::= unaryWithLet
+236  104   multiplicativeWithLet ::= multiplicativeExpCS MULTIPLY unaryWithLet
+237  106   multiplicativeWithLet ::= multiplicativeExpCS DIVIDE unaryWithLet
+238  96    additiveWithLet ::= multiplicativeWithLet
+239  98    additiveWithLet ::= additiveExpCS PLUS multiplicativeWithLet
+240  100   additiveWithLet ::= additiveExpCS MINUS multiplicativeWithLet
+241  84    relationalWithLet ::= additiveWithLet
+242  86    relationalWithLet ::= relationalExpCS GREATER additiveWithLet
+243  88    relationalWithLet ::= relationalExpCS LESS additiveWithLet
+244  90    relationalWithLet ::= relationalExpCS GREATER_EQUAL additiveWithLet
+245  92    relationalWithLet ::= relationalExpCS LESS_EQUAL additiveWithLet
+246  78    equalityWithLet ::= relationalWithLet
+247  80    equalityWithLet ::= equalityExpCS EQUAL relationalWithLet
+248  82    equalityWithLet ::= equalityExpCS NOT_EQUAL relationalWithLet
+249  70    andOrXorWithLet ::= equalityWithLet
+250  74    andOrXorWithLet ::= andOrXorExpCS and equalityWithLet
+251  75    andOrXorWithLet ::= andOrXorExpCS or equalityWithLet
+252  76    andOrXorWithLet ::= andOrXorExpCS xor equalityWithLet
+253  66    impliesWithLet ::= andOrXorWithLet
+254  68    impliesWithLet ::= impliesExpCS implies andOrXorWithLet
+255  63    oclExpressionCS ::= impliesExpCS
+256  64    oclExpressionCS ::= impliesWithLet
+257  178   callExpCS ::= ARROW featureCallExpCS
+258  179   callExpCS ::= ARROW loopExpCS
+259  180   callExpCS ::= DOT keywordOperationCallExpCS
+260  181   callExpCS ::= DOT featureCallExpCS
+261  228   messageExpCS ::= CARET simpleNameCS LPAREN oclMessageArgumentsCSopt RPAREN
+262  229   messageExpCS ::= CARETCARET simpleNameCS LPAREN oclMessageArgumentsCSopt RPAREN
+263  291   messageExpCS ::= CARET simpleNameCS ERROR_TOKEN
+264  292   messageExpCS ::= CARETCARET simpleNameCS ERROR_TOKEN
+265  293   messageExpCS ::= CARET ERROR_SimpleNameCS
+266  294   messageExpCS ::= CARETCARET ERROR_SimpleNameCS
+267  224   argumentsCS ::= oclExpressionCS
+268  225   argumentsCS ::= argumentsCS COMMA oclExpressionCS
+269  223   argumentsCSopt ::= argumentsCS
+270  222   argumentsCSopt ::=
+271  221   isMarkedPreCS ::= ATPRE
+272  220   isMarkedPreCS ::=
+273  140   pathNameCSOpt ::= pathNameCS
+274  139   pathNameCSOpt ::=
+275  161   collectionRangeCS ::= MINUS INTEGER_RANGE_START oclExpressionCS
+276  162   collectionRangeCS ::= INTEGER_RANGE_START oclExpressionCS
+277  163   collectionRangeCS ::= oclExpressionCS DOTDOT oclExpressionCS
+278  159   collectionLiteralPartCS ::= collectionRangeCS
+279  160   collectionLiteralPartCS ::= oclExpressionCS
+280  157   collectionLiteralPartsCS ::= collectionLiteralPartCS
+281  158   collectionLiteralPartsCS ::= collectionLiteralPartsCS COMMA collectionLiteralPartCS
+282  156   collectionLiteralPartsCSopt ::= collectionLiteralPartsCS
+283  155   collectionLiteralPartsCSopt ::=
+284  193   variableCS2 ::= IDENTIFIER EQUAL oclExpressionCS
+285  206   variableListCS2 ::= variableCS2
+286  207   variableListCS2 ::= variableCS
+287  208   variableListCS2 ::= variableListCS2 COMMA variableCS2
+288  209   variableListCS2 ::= variableListCS2 COMMA variableCS
+289  314   variableListCS2 ::= ERROR_TOKEN
+290  217   attrOrNavCallExpCS ::= simpleNameCS isMarkedPreCS
+291  218   attrOrNavCallExpCS ::= keywordAsName isMarkedPreCS
+292  219   attrOrNavCallExpCS ::= simpleNameCS LBRACKET argumentsCS RBRACKET isMarkedPreCS
+293  277   attrOrNavCallExpCS ::= simpleNameCS LBRACKET argumentsCS ERROR_TOKEN
+294  210   featureCallExpCS ::= attrOrNavCallExpCS
+295  211   featureCallExpCS ::= operationCallExpCS
+296  212   featureCallExpCS ::= unaryName isMarkedPreCS LPAREN argumentsCSopt RPAREN
+297  282   featureCallExpCS ::= unaryName ERROR_IsMarkedPreCS LPAREN argumentsCSopt RPAREN
+298  184   iteratorExpCS ::= iteratorName LPAREN oclExpressionCS RPAREN
+299  185   iteratorExpCS ::= iteratorName LPAREN variableCS BAR oclExpressionCS RPAREN
+300  186   iteratorExpCS ::= iteratorName LPAREN variableCS COMMA variableCS BAR oclExpressionCS RPAREN
+301  187   iterateExpCS ::= iterateName LPAREN variableCS BAR oclExpressionCS RPAREN
+302  188   iterateExpCS ::= iterateName LPAREN variableCS SEMICOLON variableCS BAR oclExpressionCS RPAREN
+303  182   loopExpCS ::= iteratorExpCS
+304  183   loopExpCS ::= iterateExpCS
+305  204   variableListCS ::= variableCS
+306  205   variableListCS ::= variableListCS COMMA variableCS
+307  313   variableListCS ::= ERROR_TOKEN
+308  203   variableListCSopt ::= variableListCS
+309  202   variableListCSopt ::=
+310  215   stateExpCS ::= pathNameCSOpt
+311  234   oclMessageArgCS ::= oclExpressionCS
+312  235   oclMessageArgCS ::= QUESTIONMARK
+313  236   oclMessageArgCS ::= QUESTIONMARK COLON typeCS
+314  232   oclMessageArgumentsCS ::= oclMessageArgCS
+315  233   oclMessageArgumentsCS ::= oclMessageArgumentsCS COMMA oclMessageArgCS
+316  231   oclMessageArgumentsCSopt ::= oclMessageArgumentsCS
+317  230   oclMessageArgumentsCSopt ::=
+318  249   contextDeclCSmopt ::= contextDeclCSm
+319  248   contextDeclCSmopt ::=
+320  261   invOrDefCSm ::= invOrDefCS
+321  262   invOrDefCSm ::= invOrDefCSm invOrDefCS
+322  265   defExpressionCS ::= typedVariableCS EQUAL oclExpressionCS
+323  266   defExpressionCS ::= operationCS1 EQUAL oclExpressionCS
+324  317   defExpressionCS ::= typedVariableCS ERROR_TOKEN
+325  318   defExpressionCS ::= IDENTIFIER ERROR_TOKEN
+326  268   prePostOrBodyDeclCSm ::= prePostOrBodyDeclCS
+327  269   prePostOrBodyDeclCSm ::= prePostOrBodyDeclCSm prePostOrBodyDeclCS
+328  273   ERROR_Empty ::= ERROR_TOKEN
+329  274   ERROR_IsMarkedPreCS ::= ERROR_TOKEN
+330  316   contextDeclCS99 ::= ERROR_TOKEN
+*** The following Terminals are useless: 
+        attr  oper  
+*** The following Non-Terminals are useless: 
+        operationCS contextDeclCS99 
+
+
+
+C:\Development\QvtDeclarative\plugins\org.eclipse.ocl\src\org\eclipse\ocl\parser\backtracking\OCLBacktrackingParser.g is LALR(2).
+
+
+Number of Terminals: 101
+Number of Nonterminals: 108
+Number of Productions: 330
+Number of Items: 1021
+Number of Scopes: 62
+Number of States: 242
+Number of look-ahead states: 14
+Number of Shift actions: 1085
+Number of Goto actions: 928
+Number of Shift/Reduce actions: 3442
+Number of Goto/Reduce actions: 1946
+Number of Reduce actions: 1850
+Number of Shift-Reduce conflicts: 0
+Number of Reduce-Reduce conflicts: 0
+Number of Keyword/Identifier Shift conflicts: 0
+Number of Keyword/Identifier Shift-Reduce conflicts: 0
+Number of Keyword/Identifier Reduce-Reduce conflicts: 0
+
+Number of entries in base Action Table: 3116
+Additional space required for compaction of Action Table: 0.6%
+
+Number of unique terminal states: 203
+Number of Shift actions saved by merging: 2603
+Number of Conflict points saved by merging: 0
+Number of Reduce actions saved by merging: 191
+Number of Reduce saved by default: 1324
+
+Number of entries in Terminal Action Table: 2476
+Additional space required for compaction of Terminal Table: 4.1%
+
+Actions in Compressed Tables:
+     Number of Shifts: 475
+     Number of Shift/Reduces: 1449
+     Number of conflict points: 0
+     Number of Look-Ahead Shifts: 14
+     Number of Gotos: 928
+     Number of Goto/Reduces: 1946
+     Number of Reduces: 335
+     Number of Defaults: 61
+
+Parsing Tables storage:
+    Storage required for BASE_CHECK: 6932 Bytes
+    Storage required for BASE_ACTION: 6934 Bytes
+    Storage required for TERM_CHECK: 2629 Bytes
+    Storage required for TERM_ACTION: 5158 Bytes
+
+Error maps storage:
+    Storage required for ACTION_SYMBOLS_BASE map: 486 Bytes
+    Storage required for ACTION_SYMBOLS_RANGE map: 595 Bytes
+    Storage required for NACTION_SYMBOLS_BASE map: 243 Bytes
+    Storage required for NACTION_SYMBOLS_RANGE map: 222 Bytes
+    Storage required for TERMINAL_INDEX map: 204 Bytes
+    Storage required for NON_TERMINAL_INDEX map: 220 Bytes
+
+    Storage required for SCOPE_PREFIX map: 124 Bytes
+    Storage required for SCOPE_SUFFIX map: 124 Bytes
+    Storage required for SCOPE_LHS_SYMBOL map: 124 Bytes
+    Storage required for SCOPE_LOOK_AHEAD map: 62 Bytes
+    Storage required for SCOPE_STATE_SET map: 62 Bytes
+    Storage required for SCOPE_RIGHT_SIDE map: 558 Bytes
+    Storage required for SCOPE_STATE map: 178 Bytes
+    Storage required for IN_SYMB map: 486 Bytes
+
+    Number of names: 165
+    Number of characters in name: 1479
#P org.eclipse.ocl.ecore
Index: src/org/eclipse/ocl/ecore/internal/TypeResolverImpl.java
===================================================================
RCS file: /cvsroot/modeling/org.eclipse.mdt/org.eclipse.ocl/plugins/org.eclipse.ocl.ecore/src/org/eclipse/ocl/ecore/internal/TypeResolverImpl.java,v
retrieving revision 1.1
diff -u -r1.1 TypeResolverImpl.java
--- src/org/eclipse/ocl/ecore/internal/TypeResolverImpl.java	10 Sep 2008 19:21:04 -0000	1.1
+++ src/org/eclipse/ocl/ecore/internal/TypeResolverImpl.java	19 Nov 2008 21:05:53 -0000
@@ -18,6 +18,7 @@
 package org.eclipse.ocl.ecore.internal;
 
 import org.eclipse.emf.common.util.URI;
+import org.eclipse.emf.ecore.EAnnotation;
 import org.eclipse.emf.ecore.EClass;
 import org.eclipse.emf.ecore.EClassifier;
 import org.eclipse.emf.ecore.EObject;
@@ -87,6 +88,10 @@
         
         result.setName(name);
         getResource().getContents().add(result);
+		
+		EAnnotation ann = org.eclipse.emf.ecore.EcoreFactory.eINSTANCE.createEAnnotation();
+		ann.setSource(Environment.OCL_NAMESPACE_URI);
+		result.getEAnnotations().add(ann);
         
         return result;
     }
#P org.eclipse.ocl.ecore.tests
Index: src/org/eclipse/ocl/ecore/helper/tests/ParsingTest.java
===================================================================
RCS file: /cvsroot/modeling/org.eclipse.mdt/org.eclipse.ocl/tests/org.eclipse.ocl.ecore.tests/src/org/eclipse/ocl/ecore/helper/tests/ParsingTest.java,v
retrieving revision 1.3
diff -u -r1.3 ParsingTest.java
--- src/org/eclipse/ocl/ecore/helper/tests/ParsingTest.java	16 Oct 2007 16:58:51 -0000	1.3
+++ src/org/eclipse/ocl/ecore/helper/tests/ParsingTest.java	19 Nov 2008 21:05:54 -0000
@@ -89,7 +89,7 @@
 			fail("Parse should not have succeeded"); //$NON-NLS-1$
 		} catch (Exception e) {
 			// success case
-			System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+			debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
 		}
 	}
 	
Index: src/org/eclipse/ocl/ecore/helper/tests/SyntaxHelpTest.java
===================================================================
RCS file: /cvsroot/modeling/org.eclipse.mdt/org.eclipse.ocl/tests/org.eclipse.ocl.ecore.tests/src/org/eclipse/ocl/ecore/helper/tests/SyntaxHelpTest.java,v
retrieving revision 1.3
diff -u -r1.3 SyntaxHelpTest.java
--- src/org/eclipse/ocl/ecore/helper/tests/SyntaxHelpTest.java	30 Apr 2007 12:38:16 -0000	1.3
+++ src/org/eclipse/ocl/ecore/helper/tests/SyntaxHelpTest.java	19 Nov 2008 21:05:55 -0000
@@ -469,7 +469,7 @@
 					ConstraintKind.INVARIANT, "self.oclIsInState("); //$NON-NLS-1$
 			dumpChoices(choices);
 			
-			System.out.println("----"); //$NON-NLS-1$
+			debugPrintln("----"); //$NON-NLS-1$
 			
 			choices = helper.getSyntaxHelp(
 					ConstraintKind.INVARIANT, "self.oclIsInState(Bad::"); //$NON-NLS-1$
@@ -632,7 +632,7 @@
 		assertNotNull(choices);
 		
 		for (Choice next : choices) {
-			System.out.println("    " + next); //$NON-NLS-1$
+			debugPrintln("    " + next); //$NON-NLS-1$
 		}
 	}
 }
Index: src/org/eclipse/ocl/ecore/tests/AssociationTest.java
===================================================================
RCS file: /cvsroot/modeling/org.eclipse.mdt/org.eclipse.ocl/tests/org.eclipse.ocl.ecore.tests/src/org/eclipse/ocl/ecore/tests/AssociationTest.java,v
retrieving revision 1.4
diff -u -r1.4 AssociationTest.java
--- src/org/eclipse/ocl/ecore/tests/AssociationTest.java	16 Oct 2007 16:58:51 -0000	1.4
+++ src/org/eclipse/ocl/ecore/tests/AssociationTest.java	19 Nov 2008 21:05:56 -0000
@@ -115,7 +115,7 @@
 		} catch (AssertionFailedError e) {
 			// this is expected (success case)
 			err = e;
-			System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+			debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
 		}
 		assertNotNull("Parse should have failed", err); //$NON-NLS-1$
 		
@@ -128,7 +128,7 @@
 		} catch (AssertionFailedError e) {
 			// this is expected (success case)
 			err = e;
-			System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+			debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
 		}
 		assertNotNull("Parse should have failed", err); //$NON-NLS-1$
 		
@@ -141,7 +141,7 @@
 		} catch (AssertionFailedError e) {
 			// this is expected (success case)
 			err = e;
-			System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+			debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
 		}
 		assertNotNull("Parse should have failed", err); //$NON-NLS-1$
 	}
@@ -184,7 +184,7 @@
 		} catch (AssertionFailedError e) {
 			// this is expected (success case)
 			err = e;
-			System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+			debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
 		}
 		assertNotNull("Parse should have failed", err); //$NON-NLS-1$
 			
@@ -197,7 +197,7 @@
 		} catch (AssertionFailedError e) {
 			// this is expected (success case)
 			err = e;
-			System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+			debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
 		}
 		assertNotNull("Parse should have failed", err); //$NON-NLS-1$
 		
@@ -210,7 +210,7 @@
 		} catch (AssertionFailedError e) {
 			// this is expected (success case)
 			err = e;
-			System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+			debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
 		}
 		assertNotNull("Parse should have failed", err); //$NON-NLS-1$
 	}
@@ -282,7 +282,7 @@
 		} catch (AssertionFailedError e) {
 			// this is expected (success case)
 			err = e;
-			System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+			debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
 		}
 		assertNotNull("Parse should have failed", err); //$NON-NLS-1$
 	}
@@ -607,10 +607,22 @@
     protected void tearDown()
 		throws Exception {
 		
-		super.tearDown();
+		// delete customizations, to allow garbage collection
+		stem_apple = null;
+		stem_tree = null;
+		stem_thickness = null;		
+		apple_tree = null;		
+		tree = null;
+		tree_apples = null;		
+		forest = null;
+		forest_trees = null;		
+		q1 = null;
+		q2 = null;
 		
 		// delete customizations, to re-initialize schema for subsequent tests
 		fruitPackage = null;
+		
+		super.tearDown();
 	}
 	
 	private class AssocClassFruitEnvironmentFactory extends EcoreEnvironmentFactory {
Index: src/org/eclipse/ocl/ecore/tests/KeywordsTest.java
===================================================================
RCS file: /cvsroot/modeling/org.eclipse.mdt/org.eclipse.ocl/tests/org.eclipse.ocl.ecore.tests/src/org/eclipse/ocl/ecore/tests/KeywordsTest.java,v
retrieving revision 1.1
diff -u -r1.1 KeywordsTest.java
--- src/org/eclipse/ocl/ecore/tests/KeywordsTest.java	20 Apr 2007 22:42:54 -0000	1.1
+++ src/org/eclipse/ocl/ecore/tests/KeywordsTest.java	19 Nov 2008 21:06:00 -0000
@@ -372,6 +372,9 @@
         collection = null;
         block = null;
         elseClass = null;
+        clazz = null;
+        property = null;
+        constraint = null;
 
         res.unload();
         res = null;
Index: src/org/eclipse/ocl/ecore/tests/RegressionTest.java
===================================================================
RCS file: /cvsroot/modeling/org.eclipse.mdt/org.eclipse.ocl/tests/org.eclipse.ocl.ecore.tests/src/org/eclipse/ocl/ecore/tests/RegressionTest.java,v
retrieving revision 1.9
diff -u -r1.9 RegressionTest.java
--- src/org/eclipse/ocl/ecore/tests/RegressionTest.java	28 Sep 2008 17:34:22 -0000	1.9
+++ src/org/eclipse/ocl/ecore/tests/RegressionTest.java	19 Nov 2008 21:06:04 -0000
@@ -184,7 +184,7 @@
 			} catch (AssertionFailedError e) {
 				// success
 				err = e;
-				System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+				debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
 			}
 			
 			assertNotNull("Should not have parsed.", err); //$NON-NLS-1$
@@ -469,7 +469,7 @@
 		} catch (AssertionFailedError e) {
 			// success
 			err = e;
-			System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+			debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
 		}
 		
 		assertNotNull("Should not have succeeded in validating illegal oclIsNew", err); //$NON-NLS-1$
@@ -492,7 +492,7 @@
 		} catch (AssertionFailedError e) {
 			// success
 			err = e;
-			System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+			debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
 		}
 		
 		assertNotNull("Should not have succeeded in validating illegal oclIsNew", err); //$NON-NLS-1$
@@ -751,7 +751,7 @@
 		} catch (AssertionFailedError e) {
 			// this is expected (success case)
 			err = e;
-			System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+			debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
 		}
 		assertNotNull("Parse should have failed", err); //$NON-NLS-1$
 		
@@ -780,7 +780,7 @@
 		} catch (AssertionFailedError e) {
 			// this is expected (success case)
 			err = e;
-			System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+			debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
 		}
 		assertNotNull("Parse should have failed", err); //$NON-NLS-1$
 		
@@ -809,7 +809,7 @@
 		} catch (AssertionFailedError e) {
 			// this is expected (success case)
 			err = e;
-			System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+			debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
 		}
 		assertNotNull("Parse should have failed", err); //$NON-NLS-1$
 		
@@ -838,7 +838,7 @@
 		} catch (AssertionFailedError e) {
 			// this is expected (success case)
 			err = e;
-			System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+			debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
 		}
 		assertNotNull("Parse should have failed", err); //$NON-NLS-1$
 		
@@ -912,7 +912,7 @@
 		} catch (AssertionFailedError e) {
 			// this is expected (success case)
 			err = e;
-			System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+			debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
 		}
 		assertNotNull("Parse should have failed", err); //$NON-NLS-1$
 	}
@@ -932,7 +932,7 @@
 			fail("Parse should have failed"); //$NON-NLS-1$
 		} catch (Exception e) {
 			// success
-			System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+			debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
 		}
 	}
 	
@@ -951,7 +951,7 @@
 			fail("Parse should have failed"); //$NON-NLS-1$
 		} catch (Exception e) {
 			// success
-			System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+			debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
 		}
 	}
 	
@@ -993,7 +993,7 @@
 		} catch (AssertionFailedError e) {
 			// this is expected (success case)
 			err = e;
-			System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+			debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
 		}
 		assertNotNull("Parse should have failed", err); //$NON-NLS-1$
 	}
@@ -1279,7 +1279,7 @@
 		} catch (AssertionFailedError e) {
 			// this is expected (success case)
 			err = e;
-			System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+			debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
 		}
 		assertNotNull("Parse should have failed", err); //$NON-NLS-1$
 	}
@@ -1377,7 +1377,7 @@
 		} catch (AssertionFailedError e) {
 			// this is expected (success case)
 			err = e;
-			System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+			debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
 		}
 		assertNotNull("Parse should have failed", err); //$NON-NLS-1$
 		
@@ -1698,7 +1698,7 @@
             fail("Should have failed to parse or validate"); //$NON-NLS-1$
         } catch (AssertionFailedError e) {
             // success
-            System.out.println("Got the expected exception: " + e.getLocalizedMessage()); //$NON-NLS-1$
+            debugPrintln("Got the expected exception: " + e.getLocalizedMessage()); //$NON-NLS-1$
         } catch (Exception e) {
             fail("Parse failed with run-time exception: " + e.getLocalizedMessage()); //$NON-NLS-1$
         }
Index: src/org/eclipse/ocl/ecore/tests/FeatureRedefinitionTest.java
===================================================================
RCS file: /cvsroot/modeling/org.eclipse.mdt/org.eclipse.ocl/tests/org.eclipse.ocl.ecore.tests/src/org/eclipse/ocl/ecore/tests/FeatureRedefinitionTest.java,v
retrieving revision 1.1
diff -u -r1.1 FeatureRedefinitionTest.java
--- src/org/eclipse/ocl/ecore/tests/FeatureRedefinitionTest.java	30 Aug 2008 23:33:06 -0000	1.1
+++ src/org/eclipse/ocl/ecore/tests/FeatureRedefinitionTest.java	19 Nov 2008 21:05:58 -0000
@@ -237,6 +237,17 @@
 			throws Exception {
 		
 		ocl.dispose();
+		helper = null;
+		ocl = null;
+		c3 = null;
+		op3 = null;
+		attr3 = null;
+		c2 = null;
+		attr2 = null;
+		op2 = null;
+		c1 = null;
+		attr1 = null;
+		op1 = null;
 		
 		super.tearDown();
 	}
Index: src/org/eclipse/ocl/ecore/tests/ExpressionsValidatorTest.java
===================================================================
RCS file: /cvsroot/modeling/org.eclipse.mdt/org.eclipse.ocl/tests/org.eclipse.ocl.ecore.tests/src/org/eclipse/ocl/ecore/tests/ExpressionsValidatorTest.java,v
retrieving revision 1.3
diff -u -r1.3 ExpressionsValidatorTest.java
--- src/org/eclipse/ocl/ecore/tests/ExpressionsValidatorTest.java	17 May 2008 00:53:06 -0000	1.3
+++ src/org/eclipse/ocl/ecore/tests/ExpressionsValidatorTest.java	19 Nov 2008 21:05:58 -0000
@@ -948,7 +948,7 @@
 	protected void assertProblem(Diagnostic diagnostic, EObject target, int code) {
 		Diagnostic problem = findProblem(diagnostic, target, code);
 		assertNotNull("Problem not found", problem); //$NON-NLS-1$
-		System.out.println("Found expected problem: " + problem.getMessage()); //$NON-NLS-1$
+		debugPrintln("Found expected problem: " + problem.getMessage()); //$NON-NLS-1$
 	}
 	
 	protected Diagnostic findProblem(Diagnostic diagnostic, EObject target, int code) {
Index: src/org/eclipse/ocl/ecore/tests/MessagesTest.java
===================================================================
RCS file: /cvsroot/modeling/org.eclipse.mdt/org.eclipse.ocl/tests/org.eclipse.ocl.ecore.tests/src/org/eclipse/ocl/ecore/tests/MessagesTest.java,v
retrieving revision 1.4
diff -u -r1.4 MessagesTest.java
--- src/org/eclipse/ocl/ecore/tests/MessagesTest.java	16 Oct 2007 16:58:51 -0000	1.4
+++ src/org/eclipse/ocl/ecore/tests/MessagesTest.java	19 Nov 2008 21:06:00 -0000
@@ -113,7 +113,7 @@
 			fail("Should have failed to parse unknown operation"); //$NON-NLS-1$
 		} catch (Exception e) {
 			// success
-			System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+			debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
 		}
 		
 		try {
@@ -123,7 +123,7 @@
 			fail("Should have failed to parse non-conformant arg"); //$NON-NLS-1$
 		} catch (Exception e) {
 			// success
-			System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+			debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
 		}
 	}
 	
@@ -165,7 +165,7 @@
 			fail("Should have failed to parse unknown operation"); //$NON-NLS-1$
 		} catch (Exception e) {
 			// success
-			System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+			debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
 		}
 		
 		try {
@@ -175,7 +175,7 @@
 			fail("Should have failed to parse non-conformant arg"); //$NON-NLS-1$
 		} catch (Exception e) {
 			// success
-			System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+			debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
 		}
 	}
 	
@@ -266,7 +266,7 @@
 			fail("Should have failed to parse unknown operation"); //$NON-NLS-1$
 		} catch (Exception e) {
 			// success
-			System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+			debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
 		}
 		
 		try {
@@ -276,7 +276,7 @@
 			fail("Should have failed to parse non-conformant arg"); //$NON-NLS-1$
 		} catch (Exception e) {
 			// success
-			System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+			debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
 		}
 	}
 	
@@ -321,7 +321,7 @@
 			fail("Should have failed to parse unknown signal"); //$NON-NLS-1$
 		} catch (Exception e) {
 			// success
-			System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+			debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
 		}
 		
 		try {
@@ -331,7 +331,7 @@
 			fail("Should have failed to parse non-conformant arg"); //$NON-NLS-1$
 		} catch (Exception e) {
 			// success
-			System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+			debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
 		}
 	}
 	
@@ -394,7 +394,7 @@
 			fail("Should have failed to parse unknown signal"); //$NON-NLS-1$
 		} catch (Exception e) {
 			// success
-			System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+			debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
 		}
 		
 		try {
@@ -404,7 +404,7 @@
 			fail("Should have failed to parse non-conformant arg"); //$NON-NLS-1$
 		} catch (Exception e) {
 			// success
-			System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+			debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
 		}
 	}
 	
Index: src/org/eclipse/ocl/ecore/tests/OCLDocumentTest.java
===================================================================
RCS file: /cvsroot/modeling/org.eclipse.mdt/org.eclipse.ocl/tests/org.eclipse.ocl.ecore.tests/src/org/eclipse/ocl/ecore/tests/OCLDocumentTest.java,v
retrieving revision 1.5
diff -u -r1.5 OCLDocumentTest.java
--- src/org/eclipse/ocl/ecore/tests/OCLDocumentTest.java	16 Oct 2007 16:58:51 -0000	1.5
+++ src/org/eclipse/ocl/ecore/tests/OCLDocumentTest.java	19 Nov 2008 21:06:01 -0000
@@ -28,6 +28,7 @@
 import junit.framework.TestSuite;
 
 import org.eclipse.emf.common.util.EList;
+import org.eclipse.emf.common.util.URI;
 import org.eclipse.emf.ecore.EClass;
 import org.eclipse.emf.ecore.EClassifier;
 import org.eclipse.emf.ecore.EObject;
@@ -243,7 +244,7 @@
                 ));
         } catch (ParserException e) {
             // success
-            System.out.println("Got expected exception: " + e.getLocalizedMessage()); //$NON-NLS-1$
+            debugPrintln("Got expected exception: " + e.getLocalizedMessage()); //$NON-NLS-1$
         } catch (RuntimeException e) {
             fail("Got runtime exception: " + e.getLocalizedMessage()); //$NON-NLS-1$
         }
@@ -314,9 +315,8 @@
 		super.setUp();
 		
 		constraints = new java.util.HashMap<String, Constraint>();
-		
-		URL url = new URL(
-				"platform:/plugin/org.eclipse.ocl.ecore.tests/model/test_constraints.ocl"); //$NON-NLS-1$
+		URI uri = getTestModelURI("/model/test_constraints.ocl"); //$NON-NLS-1$
+		URL url = new URL(uri.toString());
 		InputStream is = url.openStream();
 		List<Constraint> parsed = ocl.parse(new OCLInput(is));
 		is.close();
@@ -326,6 +326,14 @@
 			constraints.put(ct.getName(), ct);
 		}
 	}
+
+    @Override
+	protected void tearDown() throws Exception {
+		// delete customizations, to allow garbage collection
+		constraints = null;
+
+		super.tearDown();		
+	}
 	
 	Constraint getConstraint(String name) {
 		Constraint result = constraints.get(name);
Index: src/org/eclipse/ocl/ecore/tests/ComparisonTest.java
===================================================================
RCS file: /cvsroot/modeling/org.eclipse.mdt/org.eclipse.ocl/tests/org.eclipse.ocl.ecore.tests/src/org/eclipse/ocl/ecore/tests/ComparisonTest.java,v
retrieving revision 1.9
diff -u -r1.9 ComparisonTest.java
--- src/org/eclipse/ocl/ecore/tests/ComparisonTest.java	10 Sep 2008 18:43:57 -0000	1.9
+++ src/org/eclipse/ocl/ecore/tests/ComparisonTest.java	19 Nov 2008 21:05:56 -0000
@@ -708,7 +708,7 @@
             fail("Should not have parsed"); //$NON-NLS-1$
         } catch (ParserException e) {
             // success
-            System.out.println("Got expected exception: " + e.getLocalizedMessage()); //$NON-NLS-1$
+            debugPrintln("Got expected exception: " + e.getLocalizedMessage()); //$NON-NLS-1$
         } catch (Exception e) {
             fail("Unexpected exception during parse: " + e.getLocalizedMessage()); //$NON-NLS-1$
         }
@@ -729,7 +729,7 @@
             fail("Should not have parsed"); //$NON-NLS-1$
         } catch (ParserException e) {
             // success
-            System.out.println("Got expected exception: " + e.getLocalizedMessage()); //$NON-NLS-1$
+            debugPrintln("Got expected exception: " + e.getLocalizedMessage()); //$NON-NLS-1$
         } catch (Exception e) {
             fail("Unexpected exception during parse: " + e.getLocalizedMessage()); //$NON-NLS-1$
         }
@@ -896,6 +896,24 @@
 		list.add(new Numero(6));
 		list.add(new Numero(2));
 	}
+
+	@Override
+	protected void tearDown() throws Exception {
+		// delete customizations, to allow garbage collection
+		pkg = null;
+		thingType = null;
+		values = null;
+		bdValue = null;
+		biValue = null;
+		valueType = null;
+		numeroType = null;
+		numeros = null;
+		comparable = null;
+	    myDataType = null;
+		thing = null;
+
+		super.tearDown();		
+	}
 	
 	private static class Value implements Comparable<Value> {
 		private final String value;
Index: src/org/eclipse/ocl/ecore/tests/IteratorsTest.java
===================================================================
RCS file: /cvsroot/modeling/org.eclipse.mdt/org.eclipse.ocl/tests/org.eclipse.ocl.ecore.tests/src/org/eclipse/ocl/ecore/tests/IteratorsTest.java,v
retrieving revision 1.6
diff -u -r1.6 IteratorsTest.java
--- src/org/eclipse/ocl/ecore/tests/IteratorsTest.java	17 May 2008 20:41:25 -0000	1.6
+++ src/org/eclipse/ocl/ecore/tests/IteratorsTest.java	19 Nov 2008 21:06:00 -0000
@@ -557,8 +557,7 @@
             fail("Validation should have failed"); //$NON-NLS-1$
         } catch (ParserException e) {
             // success
-            System.out
-                .println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+            debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
         }
     }
 
@@ -602,8 +601,7 @@
             fail("Validation should have failed"); //$NON-NLS-1$
         } catch (ParserException e) {
             // success
-            System.out
-                .println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+        	debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
         }
 
         helper.setContext(fake);
@@ -996,8 +994,7 @@
             fail("Parse should have failed"); //$NON-NLS-1$
         } catch (ParserException e) {
             // success
-            System.out
-                .println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+        	debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
         }
 
         try {
@@ -1007,8 +1004,7 @@
             fail("Parse should have failed"); //$NON-NLS-1$
         } catch (ParserException e) {
             // success
-            System.out
-                .println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+        	debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
         }
 
         try {
@@ -1018,8 +1014,7 @@
             fail("Parse should have failed"); //$NON-NLS-1$
         } catch (ParserException e) {
             // success
-            System.out
-                .println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+        	debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
         }
 
         try {
@@ -1029,8 +1024,7 @@
             fail("Parse should have failed"); //$NON-NLS-1$
         } catch (ParserException e) {
             // success
-            System.out
-                .println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+        	debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
         }
 
         try {
@@ -1040,8 +1034,7 @@
             fail("Parse should have failed"); //$NON-NLS-1$
         } catch (ParserException e) {
             // success
-            System.out
-                .println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+        	debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
         }
 
         try {
@@ -1051,8 +1044,7 @@
             fail("Parse should have failed"); //$NON-NLS-1$
         } catch (ParserException e) {
             // success
-            System.out
-                .println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+        	debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
         }
 
         try {
@@ -1062,8 +1054,7 @@
             fail("v should have failed"); //$NON-NLS-1$
         } catch (ParserException e) {
             // success
-            System.out
-                .println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+        	debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
         }
 
         try {
@@ -1073,8 +1064,7 @@
             fail("Parse should have failed"); //$NON-NLS-1$
         } catch (ParserException e) {
             // success
-            System.out
-                .println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+        	debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
         }
     }
     
@@ -1091,7 +1081,7 @@
             fail("Should have failed to parse"); //$NON-NLS-1$
         } catch (ParserException e) {
             // success
-            System.out.println("Got expected exception: " + e.getLocalizedMessage()); //$NON-NLS-1$
+            debugPrintln("Got expected exception: " + e.getLocalizedMessage()); //$NON-NLS-1$
         }
         
         try {
@@ -1162,4 +1152,19 @@
         george.setName("george"); //$NON-NLS-1$
         pkg5.getESubpackages().add(george);
     }
+
+    @Override
+	protected void tearDown() throws Exception {
+		// delete customizations, to allow garbage collection
+	    pkg1 = null;
+	    pkg2 = null;
+	    pkg3 = null;
+		pkg4 = null;
+		pkg5 = null;
+		jim = null;
+		bob = null;
+		george = null;
+
+		super.tearDown();		
+	}
 }
Index: src/org/eclipse/ocl/ecore/tests/StatesTest.java
===================================================================
RCS file: /cvsroot/modeling/org.eclipse.mdt/org.eclipse.ocl/tests/org.eclipse.ocl.ecore.tests/src/org/eclipse/ocl/ecore/tests/StatesTest.java,v
retrieving revision 1.4
diff -u -r1.4 StatesTest.java
--- src/org/eclipse/ocl/ecore/tests/StatesTest.java	16 Oct 2007 16:58:51 -0000	1.4
+++ src/org/eclipse/ocl/ecore/tests/StatesTest.java	19 Nov 2008 21:06:04 -0000
@@ -89,7 +89,7 @@
 			fail("Should have failed to parse non-existent state"); //$NON-NLS-1$
 		} catch (Exception e) {
 			// success
-			System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+			debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
 		}
 	}
 	
@@ -107,7 +107,7 @@
 			fail("Should have failed to parse empty arglist"); //$NON-NLS-1$
 		} catch (Exception e) {
 			// success
-			System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+			debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
 		}
 		
 		try {
@@ -118,7 +118,7 @@
 			fail("Should have failed to parse overabundant arglist"); //$NON-NLS-1$
 		} catch (Exception e) {
 			// success
-			System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+			debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
 		}
 		
 		try {
@@ -129,7 +129,7 @@
 			fail("Should have failed to parse arg of wrong type"); //$NON-NLS-1$
 		} catch (Exception e) {
 			// success
-			System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+			debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
 		}
 		
 		try {
@@ -140,7 +140,7 @@
 			fail("Should have failed to parse arg of wrong type"); //$NON-NLS-1$
 		} catch (Exception e) {
 			// success
-			System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+			debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
 		}
 	}
 	
Index: src/org/eclipse/ocl/ecore/tests/ValidationTest.java
===================================================================
RCS file: /cvsroot/modeling/org.eclipse.mdt/org.eclipse.ocl/tests/org.eclipse.ocl.ecore.tests/src/org/eclipse/ocl/ecore/tests/ValidationTest.java,v
retrieving revision 1.5
diff -u -r1.5 ValidationTest.java
--- src/org/eclipse/ocl/ecore/tests/ValidationTest.java	4 May 2008 01:13:47 -0000	1.5
+++ src/org/eclipse/ocl/ecore/tests/ValidationTest.java	19 Nov 2008 21:06:04 -0000
@@ -74,7 +74,7 @@
 			fail("Should not have successfully validated"); //$NON-NLS-1$
 		} catch (SemanticException e) {
 			// success
-			System.out.println("Got expected exception: " + e.getLocalizedMessage()); //$NON-NLS-1$
+			debugPrintln("Got expected exception: " + e.getLocalizedMessage()); //$NON-NLS-1$
 		}
 	}
 	
Index: src/org/eclipse/ocl/ecore/tests/TypesValidatorTest.java
===================================================================
RCS file: /cvsroot/modeling/org.eclipse.mdt/org.eclipse.ocl/tests/org.eclipse.ocl.ecore.tests/src/org/eclipse/ocl/ecore/tests/TypesValidatorTest.java,v
retrieving revision 1.4
diff -u -r1.4 TypesValidatorTest.java
--- src/org/eclipse/ocl/ecore/tests/TypesValidatorTest.java	3 Aug 2008 23:02:11 -0000	1.4
+++ src/org/eclipse/ocl/ecore/tests/TypesValidatorTest.java	19 Nov 2008 21:06:04 -0000
@@ -152,11 +152,8 @@
 	public void test_emptyCollectionType_196972() {
 		// load our test resource
 		ResourceSet rset = new ResourceSetImpl();
-		Resource res = rset
-			.getResource(
-				URI
-					.createPlatformPluginURI(
-						"/org.eclipse.ocl.ecore.tests/model/VoidCollectionTypes.ecore", true), true); //$NON-NLS-1$
+		URI uri = getTestModelURI("/model/VoidCollectionTypes.ecore"); //$NON-NLS-1$
+		Resource res = rset.getResource(uri, true);
 		EPackage epackage = (EPackage) res.getContents().get(0);
 		
 		// this one is ill-named
@@ -257,7 +254,7 @@
 	protected void assertProblem(Diagnostic diagnostic, EObject target, int code) {
 		Diagnostic problem = findProblem(diagnostic, target, code);
 		assertNotNull("Problem not found", problem); //$NON-NLS-1$
-		System.out.println("Found expected problem: " + problem.getMessage()); //$NON-NLS-1$
+		debugPrintln("Found expected problem: " + problem.getMessage()); //$NON-NLS-1$
 	}
 	
 	protected Diagnostic findProblem(Diagnostic diagnostic, EObject target,
Index: src/org/eclipse/ocl/ecore/tests/ExtensibilityTest.java
===================================================================
RCS file: /cvsroot/modeling/org.eclipse.mdt/org.eclipse.ocl/tests/org.eclipse.ocl.ecore.tests/src/org/eclipse/ocl/ecore/tests/ExtensibilityTest.java,v
retrieving revision 1.1
diff -u -r1.1 ExtensibilityTest.java
--- src/org/eclipse/ocl/ecore/tests/ExtensibilityTest.java	11 Oct 2007 23:04:44 -0000	1.1
+++ src/org/eclipse/ocl/ecore/tests/ExtensibilityTest.java	19 Nov 2008 21:05:58 -0000
@@ -109,7 +109,7 @@
             assertNotNull(diag);
             assertEquals(Diagnostic.WARNING, diag.getSeverity());
             
-            System.out.println("Got expected warning: " + diag.getMessage()); //$NON-NLS-1$
+            debugPrintln("Got expected warning: " + diag.getMessage()); //$NON-NLS-1$
         } catch (ParserException e) {
             fail("Failed to parse: " + e.getLocalizedMessage()); //$NON-NLS-1$
         }
@@ -123,7 +123,7 @@
             assertNotNull(diag);
             assertEquals(Diagnostic.WARNING, diag.getSeverity());
             
-            System.out.println("Got expected warning: " + diag.getMessage()); //$NON-NLS-1$
+            debugPrintln("Got expected warning: " + diag.getMessage()); //$NON-NLS-1$
         } catch (ParserException e) {
             fail("Failed to parse: " + e.getLocalizedMessage()); //$NON-NLS-1$
         }
@@ -141,7 +141,7 @@
             fail("Should not have parsed"); //$NON-NLS-1$
         } catch (ParserException e) {
             // success
-            System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+            debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
         }
         
         try {
@@ -151,7 +151,7 @@
             fail("Should not have parsed"); //$NON-NLS-1$
         } catch (ParserException e) {
             // success
-            System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+            debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
         }
     }
 
@@ -167,7 +167,7 @@
             fail("Should not have parsed"); //$NON-NLS-1$
         } catch (ParserException e) {
             // success
-            System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+            debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
         }
         
         try {
@@ -177,7 +177,7 @@
             fail("Should not have parsed"); //$NON-NLS-1$
         } catch (ParserException e) {
             // success
-            System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+            debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
         }
     }
     
Index: src/org/eclipse/ocl/ecore/tests/PrimitiveTypesTest.java
===================================================================
RCS file: /cvsroot/modeling/org.eclipse.mdt/org.eclipse.ocl/tests/org.eclipse.ocl.ecore.tests/src/org/eclipse/ocl/ecore/tests/PrimitiveTypesTest.java,v
retrieving revision 1.3
diff -u -r1.3 PrimitiveTypesTest.java
--- src/org/eclipse/ocl/ecore/tests/PrimitiveTypesTest.java	28 Sep 2008 17:34:22 -0000	1.3
+++ src/org/eclipse/ocl/ecore/tests/PrimitiveTypesTest.java	19 Nov 2008 21:06:02 -0000
@@ -120,7 +120,7 @@
             fail("Should have failed to parse or validate"); //$NON-NLS-1$
         } catch (ParserException e) {
             // Success
-            System.out.println("Got expected exception: " + e.getLocalizedMessage()); //$NON-NLS-1$
+            debugPrintln("Got expected exception: " + e.getLocalizedMessage()); //$NON-NLS-1$
         }
         
         try {
@@ -128,7 +128,7 @@
             fail("Should have failed to parse or validate"); //$NON-NLS-1$
         } catch (ParserException e) {
             // Success
-            System.out.println("Got expected exception: " + e.getLocalizedMessage()); //$NON-NLS-1$
+            debugPrintln("Got expected exception: " + e.getLocalizedMessage()); //$NON-NLS-1$
         }
     }
     
Index: src/org/eclipse/ocl/ecore/tests/InitOrDerExpressionTest.java
===================================================================
RCS file: /cvsroot/modeling/org.eclipse.mdt/org.eclipse.ocl/tests/org.eclipse.ocl.ecore.tests/src/org/eclipse/ocl/ecore/tests/InitOrDerExpressionTest.java,v
retrieving revision 1.4
diff -u -r1.4 InitOrDerExpressionTest.java
--- src/org/eclipse/ocl/ecore/tests/InitOrDerExpressionTest.java	16 Oct 2007 16:58:51 -0000	1.4
+++ src/org/eclipse/ocl/ecore/tests/InitOrDerExpressionTest.java	19 Nov 2008 21:05:59 -0000
@@ -275,7 +275,7 @@
 			fail("Should not have parsed"); //$NON-NLS-1$
 		} catch (Exception e) {
 			// success
-			System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+			debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
 		}
 	}
 	
@@ -289,7 +289,7 @@
 			fail("Should not have parsed"); //$NON-NLS-1$
 		} catch (Exception e) {
 			// success
-			System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+			debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
 		}
 	}
 	
@@ -324,7 +324,7 @@
 		} catch (AssertionFailedError e) {
 			// success
 			err = e;
-			System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+			debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
 		}
 		
 		assertNotNull("Should not have successfully parsed", err); //$NON-NLS-1$
@@ -339,7 +339,7 @@
 		} catch (AssertionFailedError e) {
 			// success
 			err = e;
-			System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+			debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
 		}
 		
 		assertNotNull("Should not have successfully parsed", err); //$NON-NLS-1$
@@ -355,7 +355,7 @@
 		} catch (AssertionFailedError e) {
 			// success
 			err = e;
-			System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+			debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
 		}
 		
 		assertNotNull("Should not have successfully parsed", err); //$NON-NLS-1$
@@ -371,7 +371,7 @@
 		} catch (AssertionFailedError e) {
 			// success
 			err = e;
-			System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+			debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
 		}
 		
 		assertNotNull("Should not have successfully parsed", err); //$NON-NLS-1$
@@ -418,6 +418,9 @@
     protected void tearDown() throws Exception {
 		extents = null;
 		allApples = null;
+		aFruit = null;
+		anApple = null;
+		anotherApple = null;
 		
 		fruitPackage.getEClassifiers().remove(banana);
 		banana = null;
Index: src/org/eclipse/ocl/ecore/tests/ParsingOptionsTest.java
===================================================================
RCS file: /cvsroot/modeling/org.eclipse.mdt/org.eclipse.ocl/tests/org.eclipse.ocl.ecore.tests/src/org/eclipse/ocl/ecore/tests/ParsingOptionsTest.java,v
retrieving revision 1.1
diff -u -r1.1 ParsingOptionsTest.java
--- src/org/eclipse/ocl/ecore/tests/ParsingOptionsTest.java	30 Jan 2008 12:46:14 -0000	1.1
+++ src/org/eclipse/ocl/ecore/tests/ParsingOptionsTest.java	19 Nov 2008 21:06:01 -0000
@@ -59,7 +59,7 @@
             fail("Should not have successfully parsed."); //$NON-NLS-1$
         } catch (ParserException e) {
             // success
-            System.out.println("Got expected exception: " + e.getLocalizedMessage()); //$NON-NLS-1$
+            debugPrintln("Got expected exception: " + e.getLocalizedMessage()); //$NON-NLS-1$
         }
         
         ParsingOptions.setOption(ocl.getEnvironment(),
@@ -95,7 +95,7 @@
             fail("Should not have successfully parsed."); //$NON-NLS-1$
         } catch (ParserException e) {
             // success
-            System.out.println("Got expected exception: " + e.getLocalizedMessage()); //$NON-NLS-1$
+            debugPrintln("Got expected exception: " + e.getLocalizedMessage()); //$NON-NLS-1$
         }
         
         ParsingOptions.setOption(ocl.getEnvironment(),
Index: src/org/eclipse/ocl/ecore/tests/OCLOperationCollisionTest.java
===================================================================
RCS file: /cvsroot/modeling/org.eclipse.mdt/org.eclipse.ocl/tests/org.eclipse.ocl.ecore.tests/src/org/eclipse/ocl/ecore/tests/OCLOperationCollisionTest.java,v
retrieving revision 1.2
diff -u -r1.2 OCLOperationCollisionTest.java
--- src/org/eclipse/ocl/ecore/tests/OCLOperationCollisionTest.java	30 Aug 2008 17:03:27 -0000	1.2
+++ src/org/eclipse/ocl/ecore/tests/OCLOperationCollisionTest.java	19 Nov 2008 21:06:01 -0000
@@ -70,6 +70,7 @@
 	@Override
 	protected void setUp()
 			throws Exception {
+		AbstractTestSuite.debugPrintln("==> Start  " + getName()); //$NON-NLS-1$
 		super.setUp();
 
 		ocl = OCL.newInstance(new MyEnvironmentFactory());
@@ -83,8 +84,12 @@
 			throws Exception {
 
 		enteredMyOperationBody = false;
+	    ocl.dispose();
+	    ocl = null;
 
 		super.tearDown();
+	    
+	    AbstractTestSuite.debugPrintln("==> Finish " + getName()); //$NON-NLS-1$
 	}
 
 	/**
Index: src/org/eclipse/ocl/ecore/tests/AbstractTestSuite.java
===================================================================
RCS file: /cvsroot/modeling/org.eclipse.mdt/org.eclipse.ocl/tests/org.eclipse.ocl.ecore.tests/src/org/eclipse/ocl/ecore/tests/AbstractTestSuite.java,v
retrieving revision 1.16
diff -u -r1.16 AbstractTestSuite.java
--- src/org/eclipse/ocl/ecore/tests/AbstractTestSuite.java	10 Oct 2008 15:23:39 -0000	1.16
+++ src/org/eclipse/ocl/ecore/tests/AbstractTestSuite.java	19 Nov 2008 21:05:55 -0000
@@ -19,11 +19,11 @@
 package org.eclipse.ocl.ecore.tests;
 
 import java.lang.reflect.Method;
-import java.net.MalformedURLException;
 import java.net.URL;
 import java.util.Collection;
 import java.util.Collections;
 import java.util.List;
+import java.util.Map;
 
 import junit.framework.Test;
 import junit.framework.TestCase;
@@ -47,8 +47,10 @@
 import org.eclipse.emf.ecore.resource.Resource;
 import org.eclipse.emf.ecore.resource.ResourceSet;
 import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;
+import org.eclipse.emf.ecore.resource.impl.URIMappingRegistryImpl;
 import org.eclipse.emf.ecore.util.EcoreUtil;
-import org.eclipse.emf.ecore.xmi.impl.XMIResourceFactoryImpl;
+import org.eclipse.emf.ecore.xmi.impl.EcoreResourceFactoryImpl;
+import org.eclipse.ocl.Environment;
 import org.eclipse.ocl.EnvironmentFactory;
 import org.eclipse.ocl.OCLInput;
 import org.eclipse.ocl.ParserException;
@@ -56,6 +58,7 @@
 import org.eclipse.ocl.ecore.CallOperationAction;
 import org.eclipse.ocl.ecore.Constraint;
 import org.eclipse.ocl.ecore.EcoreEnvironment;
+import org.eclipse.ocl.ecore.EcoreEnvironmentFactory;
 import org.eclipse.ocl.ecore.OCL;
 import org.eclipse.ocl.ecore.SendSignalAction;
 import org.eclipse.ocl.ecore.internal.OCLFactoryImpl;
@@ -125,6 +128,8 @@
 	helper;
 	protected final OCLFactory oclFactory = OCLFactoryImpl.INSTANCE;
 	
+	protected static boolean noDebug = System.getProperty("org.eclipse.ocl.ecore.tests.nodebug") != null; //$NON-NLS-1$
+	
 	public AbstractTestSuite(String name) {
 		super(name);
 	}
@@ -180,9 +185,10 @@
     protected void setUp()
 		throws Exception {
 		
-		System.out.println("==> Start  " + getName()); //$NON-NLS-1$
+		debugPrintln("==> Start  " + getName()); //$NON-NLS-1$
 		
 		if (fruitPackage == null) {
+			initRegistries();
 			initFruitPackage();
 		}
 		
@@ -201,7 +207,11 @@
 	}
 	
 	protected OCL createOCL() {
-		return OCL.newInstance();
+		OCL newInstance = OCL.newInstance();
+		String repairs = System.getProperty("org.eclipse.ocl.ecore.tests.repairs"); //$NON-NLS-1$
+		if (repairs != null)
+			newInstance.setParserRepairCount(Integer.parseInt(repairs));
+		return newInstance;
 	}
 	
 	protected OCLHelper<EClassifier, EOperation, EStructuralFeature, Constraint>
@@ -214,8 +224,16 @@
 		throws Exception {
 		
 	    ocl.dispose();
-	    
-		System.out.println("==> Finish " + getName()); //$NON-NLS-1$
+	    ocl = null;
+	    helper = null;
+
+	    debugPrintln("==> Finish " + getName()); //$NON-NLS-1$
+	}
+	
+	public static void debugPrintln(String string) {
+		if (!noDebug) {
+			System.out.println(string);
+		}		
 	}
 	
 	/**
@@ -439,7 +457,7 @@
 		}
 		
 		OCLExpression<EClassifier> result = null;
-		result = constraint.getSpecification().getBodyExpression();
+		result = constraint != null ? constraint.getSpecification().getBodyExpression() : null;
 		
 		validate(result);
 		
@@ -662,10 +680,8 @@
 	protected void assertInvalid(Object value) {
 		assertTrue("Expected OclInvalid", ocl.isInvalid(value)); //$NON-NLS-1$
 	}
-	
-	private static void initFruitPackage() {
-		URL url = null;
 
+	protected static URI getTestModelURI(String localFileName) {
 		try {
 			Class<?> platformClass = Class.forName("org.eclipse.core.runtime.Platform"); //$NON-NLS-1$
 			Method getBundle = platformClass.getDeclaredMethod("getBundle", new Class[] {String.class}); //$NON-NLS-1$
@@ -673,28 +689,22 @@
 			
 			if (bundle != null) {
 				Method getEntry = bundle.getClass().getMethod("getEntry", new Class[] {String.class}); //$NON-NLS-1$
-				url = (URL) getEntry.invoke(bundle, new Object[] {"/model/OCLTest.ecore"}); //$NON-NLS-1$
+				URL url = (URL) getEntry.invoke(bundle, new Object[] {localFileName});
+				return URI.createURI(url.toString());
 			}
 		} catch (Exception e) {
 			// not running in Eclipse
 		}
-		
-		if (url == null) {
-			try {
-				Resource.Factory.Registry.INSTANCE.getExtensionToFactoryMap().put(
-						"ecore", new XMIResourceFactoryImpl()); //$NON-NLS-1$
-				String urlString = System.getProperty("org.eclipse.ocl.ecore.tests.testmodel"); //$NON-NLS-1$
-				if (!urlString.startsWith("file:")) { //$NON-NLS-1$
-					urlString = "file:" + urlString; //$NON-NLS-1$
-				}
-				url = new URL(urlString);
-			} catch (MalformedURLException e) {
-				fail(e.getLocalizedMessage());
-			}
-		}
-		
+		String urlString = System.getProperty("org.eclipse.ocl.ecore.tests"); //$NON-NLS-1$
+		if (urlString == null)
+			fail("'org.eclipse.ocl.ecore.tests' property not defined; use the launch configuration to define it"); //$NON-NLS-1$
+		return URI.createFileURI(urlString + "/" + localFileName); //$NON-NLS-1$
+	}
+	
+	private static void initFruitPackage() {
+		URI uri = getTestModelURI("/model/OCLTest.ecore"); //$NON-NLS-1$
 		ResourceSet rset = new ResourceSetImpl();
-		Resource res = rset.getResource(URI.createURI(url.toString()), true);
+		Resource res = rset.getResource(uri, true);
 		
 		fruitPackage = (EPackage) res.getContents().get(0);
 		EPackage.Registry.INSTANCE.put(fruitPackage.getNsURI(), fruitPackage);
@@ -735,4 +745,20 @@
 		util_processBag = util.getEOperations().get(2);
 		util_processSequence = util.getEOperations().get(3);
 	}
+	
+	protected static void initRegistries() {
+		Map<URI, URI> uriMap = URIMappingRegistryImpl.INSTANCE.map();		
+		URI oclStandardLibraryURI = URI.createURI(EcoreEnvironment.OCL_STANDARD_LIBRARY_NS_URI);
+		if (uriMap.get(oclStandardLibraryURI) == null) {			// If no mapping registered then must set up standalone context
+			Resource.Factory.Registry.INSTANCE.getExtensionToFactoryMap().put(
+					"ecore", new EcoreResourceFactoryImpl()); //$NON-NLS-1$
+			Environment.Registry.INSTANCE.registerEnvironment(
+					new EcoreEnvironmentFactory().createEnvironment());
+			String oclLocation = System.getProperty("org.eclipse.ocl.ecore"); //$NON-NLS-1$
+			if (oclLocation == null)
+				fail("'org.eclipse.ocl.ecore' property not defined; use the launch configuration to define it"); //$NON-NLS-1$
+			oclLocation = "file:/" + oclLocation; //$NON-NLS-1$
+			uriMap.put(URI.createURI(EcoreEnvironment.OCL_STANDARD_LIBRARY_NS_URI), URI.createURI(oclLocation + "/model/oclstdlib.ecore")); //$NON-NLS-1$
+		}
+	}
 }
Index: src/org/eclipse/ocl/ecore/tests/TypeConformanceTests.java
===================================================================
RCS file: /cvsroot/modeling/org.eclipse.mdt/org.eclipse.ocl/tests/org.eclipse.ocl.ecore.tests/src/org/eclipse/ocl/ecore/tests/TypeConformanceTests.java,v
retrieving revision 1.1
diff -u -r1.1 TypeConformanceTests.java
--- src/org/eclipse/ocl/ecore/tests/TypeConformanceTests.java	10 Oct 2008 15:23:39 -0000	1.1
+++ src/org/eclipse/ocl/ecore/tests/TypeConformanceTests.java	19 Nov 2008 21:06:04 -0000
@@ -1,179 +1,192 @@
-/**
- * <copyright>
- *
- * Copyright (c) 2006, 2008 Stefan Schulze, Zeligsoft Inc., and others.
- * All rights reserved.   This program and the accompanying materials
- * are made available under the terms of the Eclipse Public License v1.0
- * which accompanies this distribution, and is available at
- * http://www.eclipse.org/legal/epl-v10.html
- *
- * Contributors:
- *   Stefan Schulze - Initial API and implementation
- *   Zeligsoft - Bug 245619
- * 
- * </copyright>
- * 
- * $Id: OCL_v200811051638.patch,v 1.1 2008/11/19 21:26:34 ewillink Exp $
- */
-package org.eclipse.ocl.ecore.tests;
-
-import junit.framework.Test;
-import junit.framework.TestCase;
-import junit.framework.TestSuite;
-
-import org.eclipse.emf.ecore.EClass;
-import org.eclipse.emf.ecore.EClassifier;
-import org.eclipse.emf.ecore.EDataType;
-import org.eclipse.emf.ecore.EEnum;
-import org.eclipse.emf.ecore.EEnumLiteral;
-import org.eclipse.emf.ecore.EObject;
-import org.eclipse.emf.ecore.EOperation;
-import org.eclipse.emf.ecore.EPackage;
-import org.eclipse.emf.ecore.EParameter;
-import org.eclipse.emf.ecore.EStructuralFeature;
-import org.eclipse.emf.ecore.EcoreFactory;
-import org.eclipse.ocl.OCL;
-import org.eclipse.ocl.ecore.CallOperationAction;
-import org.eclipse.ocl.ecore.Constraint;
-import org.eclipse.ocl.ecore.EcoreEnvironmentFactory;
-import org.eclipse.ocl.ecore.OperationCallExp;
-import org.eclipse.ocl.ecore.SendSignalAction;
-import org.eclipse.ocl.expressions.ExpressionsFactory;
-import org.eclipse.ocl.expressions.OCLExpression;
-import org.eclipse.ocl.expressions.Variable;
-import org.eclipse.ocl.helper.OCLHelper;
-
-/**
- * Tests consistency of the conversion of user-defined types to OCL primitive
- * types in a variety of contexts in which they were formerly missed.
- * 
- * @author Stefan Schulze
- */
-@SuppressWarnings("nls")
-public class TypeConformanceTests
-		extends TestCase {
-
-	private OCLHelper<EClassifier, EOperation, EStructuralFeature, Constraint> helper;
-
-	private OCL<EPackage, EClassifier, EOperation, EStructuralFeature, EEnumLiteral, EParameter, EObject, CallOperationAction, SendSignalAction, Constraint, EClass, EObject> ocl;
-
-	private EDataType dt;
-
-	private EClass cl;
-
-	private EOperation op3;
-
-	private EPackage p;
-
-	public static Test suite() {
-		return new TestSuite(TypeConformanceTests.class,
-			"Primitive Type Conformance Tests");
-	}
-
-	protected void setUp()
-			throws Exception {
-		ocl = OCL.newInstance(EcoreEnvironmentFactory.INSTANCE
-			.createEnvironment());
-		helper = ocl.createOCLHelper();
-		EcoreFactory f = EcoreFactory.eINSTANCE;
-		p = f.createEPackage();
-		dt = f.createEDataType();
-		dt.setName("OwnInteger");
-		dt.setInstanceClassName("java.lang.Integer");
-		p.getEClassifiers().add(dt);
-
-		EEnum e = f.createEEnum();
-		e.setName("TestEnum");
-		EEnumLiteral lit1 = f.createEEnumLiteral();
-		lit1.setName("EnumLiteral");
-		e.getELiterals().add(lit1);
-		p.getEClassifiers().add(e);
-
-		cl = f.createEClass();
-		cl.setName("ClassName");
-		p.getEClassifiers().add(cl);
-		EOperation op1 = f.createEOperation();
-		cl.getEOperations().add(op1);
-		op1.setName("fooOwnInteger");
-		EParameter param = f.createEParameter();
-		param.setName("p");
-		param.setEType(dt);
-		op1.getEParameters().add(param);
-
-		EOperation op2 = f.createEOperation();
-		cl.getEOperations().add(op2);
-		op2.setName("fooInteger");
-		param = f.createEParameter();
-		param.setName("p");
-		param.setEType(ocl.getEnvironment().getOCLStandardLibrary()
-			.getInteger());
-		op2.getEParameters().add(param);
-
-		op3 = f.createEOperation();
-		cl.getEOperations().add(op3);
-		op3.setName("enumMethod");
-		param = f.createEParameter();
-		param.setName("p");
-		param.setEType(e);
-		op3.getEParameters().add(param);
-
-		helper.setContext(cl);
-	}
-
-	public void testLetVariableTypeConformance()
-			throws Exception {
-		OCLExpression<EClassifier> expr = helper
-			.createQuery("let i:OwnInteger=5 in i");
-		Object result = ocl.evaluate(null, expr);
-		assertEquals(5, result);
-	}
-
-	public void testIterateVariableTypeConformance()
-			throws Exception {
-		OCLExpression<EClassifier> expr = helper
-			.createQuery("Set{1,2}->iterate(i:Integer; acc:OwnInteger=5 | acc)");
-		Object result = ocl.evaluate(null, expr);
-		assertEquals(5, result);
-	}
-
-	public void testOperationMatchOwnerTypeConformance()
-			throws Exception {
-		defineVariable("i", dt, 1);
-		helper.createQuery("i+2");
-		helper.createQuery("2+2");
-	}
-
-	public void testOperationMatchParameterTypeConformance1()
-			throws Exception {
-		defineVariable("i", dt, 1);
-		helper.createQuery("2+2");
-		helper.createQuery("2+i");
-	}
-
-	public void testOperationMatchParameterTypeConformance2()
-			throws Exception {
-		defineVariable("i", dt, 1);
-		helper.setContext(cl);
-		helper.createQuery("self.fooOwnInteger(2)");
-		helper.createQuery("self.fooInteger(i)");
-	}
-
-	public void testEnumMethod()
-			throws Exception {
-		helper.setContext(cl);
-		final OCLExpression<EClassifier> query = helper
-			.createQuery("self.enumMethod(TestEnum::EnumLiteral)");
-		assertSame(op3, ((OperationCallExp) query).getReferredOperation());
-		EObject eo = p.getEFactoryInstance().create(cl);
-		helper.getOCL().evaluate(eo, query);
-	}
-
-	private void defineVariable(String name, EClassifier type, Object value) {
-		Variable<EClassifier, EParameter> contextVar = ExpressionsFactory.eINSTANCE
-			.createVariable();
-		contextVar.setName(name);
-		contextVar.setType(type);
-		ocl.getEnvironment().addElement(name, contextVar, true);
-		ocl.getEvaluationEnvironment().add(name, value);
-	}
-}
+/**
+ * <copyright>
+ *
+ * Copyright (c) 2006, 2008 Stefan Schulze, Zeligsoft Inc., and others.
+ * All rights reserved.   This program and the accompanying materials
+ * are made available under the terms of the Eclipse Public License v1.0
+ * which accompanies this distribution, and is available at
+ * http://www.eclipse.org/legal/epl-v10.html
+ *
+ * Contributors:
+ *   Stefan Schulze - Initial API and implementation
+ *   Zeligsoft - Bug 245619
+ * 
+ * </copyright>
+ * 
+ * $Id: OCL_v200811051638.patch,v 1.1 2008/11/19 21:26:34 ewillink Exp $
+ */
+package org.eclipse.ocl.ecore.tests;
+
+import junit.framework.Test;
+import junit.framework.TestCase;
+import junit.framework.TestSuite;
+
+import org.eclipse.emf.ecore.EClass;
+import org.eclipse.emf.ecore.EClassifier;
+import org.eclipse.emf.ecore.EDataType;
+import org.eclipse.emf.ecore.EEnum;
+import org.eclipse.emf.ecore.EEnumLiteral;
+import org.eclipse.emf.ecore.EObject;
+import org.eclipse.emf.ecore.EOperation;
+import org.eclipse.emf.ecore.EPackage;
+import org.eclipse.emf.ecore.EParameter;
+import org.eclipse.emf.ecore.EStructuralFeature;
+import org.eclipse.emf.ecore.EcoreFactory;
+import org.eclipse.ocl.OCL;
+import org.eclipse.ocl.ecore.CallOperationAction;
+import org.eclipse.ocl.ecore.Constraint;
+import org.eclipse.ocl.ecore.EcoreEnvironmentFactory;
+import org.eclipse.ocl.ecore.OperationCallExp;
+import org.eclipse.ocl.ecore.SendSignalAction;
+import org.eclipse.ocl.expressions.ExpressionsFactory;
+import org.eclipse.ocl.expressions.OCLExpression;
+import org.eclipse.ocl.expressions.Variable;
+import org.eclipse.ocl.helper.OCLHelper;
+
+/**
+ * Tests consistency of the conversion of user-defined types to OCL primitive
+ * types in a variety of contexts in which they were formerly missed.
+ * 
+ * @author Stefan Schulze
+ */
+@SuppressWarnings("nls")
+public class TypeConformanceTests
+		extends TestCase {
+
+	private OCLHelper<EClassifier, EOperation, EStructuralFeature, Constraint> helper;
+
+	private OCL<EPackage, EClassifier, EOperation, EStructuralFeature, EEnumLiteral, EParameter, EObject, CallOperationAction, SendSignalAction, Constraint, EClass, EObject> ocl;
+
+	private EDataType dt;
+
+	private EClass cl;
+
+	private EOperation op3;
+
+	private EPackage p;
+
+	public static Test suite() {
+		return new TestSuite(TypeConformanceTests.class,
+			"Primitive Type Conformance Tests");
+	}
+
+	@Override
+	protected void setUp()
+			throws Exception {
+		ocl = OCL.newInstance(EcoreEnvironmentFactory.INSTANCE
+			.createEnvironment());
+		helper = ocl.createOCLHelper();
+		EcoreFactory f = EcoreFactory.eINSTANCE;
+		p = f.createEPackage();
+		dt = f.createEDataType();
+		dt.setName("OwnInteger");
+		dt.setInstanceClassName("java.lang.Integer");
+		p.getEClassifiers().add(dt);
+
+		EEnum e = f.createEEnum();
+		e.setName("TestEnum");
+		EEnumLiteral lit1 = f.createEEnumLiteral();
+		lit1.setName("EnumLiteral");
+		e.getELiterals().add(lit1);
+		p.getEClassifiers().add(e);
+
+		cl = f.createEClass();
+		cl.setName("ClassName");
+		p.getEClassifiers().add(cl);
+		EOperation op1 = f.createEOperation();
+		cl.getEOperations().add(op1);
+		op1.setName("fooOwnInteger");
+		EParameter param = f.createEParameter();
+		param.setName("p");
+		param.setEType(dt);
+		op1.getEParameters().add(param);
+
+		EOperation op2 = f.createEOperation();
+		cl.getEOperations().add(op2);
+		op2.setName("fooInteger");
+		param = f.createEParameter();
+		param.setName("p");
+		param.setEType(ocl.getEnvironment().getOCLStandardLibrary()
+			.getInteger());
+		op2.getEParameters().add(param);
+
+		op3 = f.createEOperation();
+		cl.getEOperations().add(op3);
+		op3.setName("enumMethod");
+		param = f.createEParameter();
+		param.setName("p");
+		param.setEType(e);
+		op3.getEParameters().add(param);
+
+		helper.setContext(cl);
+	}
+
+	@Override
+	protected void tearDown() throws Exception {
+		helper = null;
+		ocl = null;
+		dt = null;
+		cl = null;
+		op3 = null;
+		p = null;
+
+		super.tearDown();		
+	}
+
+	public void testLetVariableTypeConformance()
+			throws Exception {
+		OCLExpression<EClassifier> expr = helper
+			.createQuery("let i:OwnInteger=5 in i");
+		Object result = ocl.evaluate(null, expr);
+		assertEquals(5, result);
+	}
+
+	public void testIterateVariableTypeConformance()
+			throws Exception {
+		OCLExpression<EClassifier> expr = helper
+			.createQuery("Set{1,2}->iterate(i:Integer; acc:OwnInteger=5 | acc)");
+		Object result = ocl.evaluate(null, expr);
+		assertEquals(5, result);
+	}
+
+	public void testOperationMatchOwnerTypeConformance()
+			throws Exception {
+		defineVariable("i", dt, 1);
+		helper.createQuery("i+2");
+		helper.createQuery("2+2");
+	}
+
+	public void testOperationMatchParameterTypeConformance1()
+			throws Exception {
+		defineVariable("i", dt, 1);
+		helper.createQuery("2+2");
+		helper.createQuery("2+i");
+	}
+
+	public void testOperationMatchParameterTypeConformance2()
+			throws Exception {
+		defineVariable("i", dt, 1);
+		helper.setContext(cl);
+		helper.createQuery("self.fooOwnInteger(2)");
+		helper.createQuery("self.fooInteger(i)");
+	}
+
+	public void testEnumMethod()
+			throws Exception {
+		helper.setContext(cl);
+		final OCLExpression<EClassifier> query = helper
+			.createQuery("self.enumMethod(TestEnum::EnumLiteral)");
+		assertSame(op3, ((OperationCallExp) query).getReferredOperation());
+		EObject eo = p.getEFactoryInstance().create(cl);
+		helper.getOCL().evaluate(eo, query);
+	}
+
+	private void defineVariable(String name, EClassifier type, Object value) {
+		Variable<EClassifier, EParameter> contextVar = ExpressionsFactory.eINSTANCE
+			.createVariable();
+		contextVar.setName(name);
+		contextVar.setType(type);
+		ocl.getEnvironment().addElement(name, contextVar, true);
+		ocl.getEvaluationEnvironment().add(name, value);
+	}
+}
Index: src/org/eclipse/ocl/ecore/tests/DefExpressionTest.java
===================================================================
RCS file: /cvsroot/modeling/org.eclipse.mdt/org.eclipse.ocl/tests/org.eclipse.ocl.ecore.tests/src/org/eclipse/ocl/ecore/tests/DefExpressionTest.java,v
retrieving revision 1.6
diff -u -r1.6 DefExpressionTest.java
--- src/org/eclipse/ocl/ecore/tests/DefExpressionTest.java	5 Aug 2008 00:33:46 -0000	1.6
+++ src/org/eclipse/ocl/ecore/tests/DefExpressionTest.java	19 Nov 2008 21:05:57 -0000
@@ -281,7 +281,7 @@
 			fail("Should not have parsed"); //$NON-NLS-1$
 		} catch (Exception e) {
 			// success
-			System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+			debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
 		}
 		
 		try {
@@ -293,7 +293,7 @@
 			fail("Should not have parsed"); //$NON-NLS-1$
 		} catch (Exception e) {
 			// success
-			System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+			debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
 		}
 	}
 	
@@ -309,7 +309,7 @@
 			fail("Should not have parsed"); //$NON-NLS-1$
 		} catch (Exception e) {
 			// success
-			System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+			debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
 		}
 		
 		try {
@@ -321,7 +321,7 @@
 			fail("Should not have parsed"); //$NON-NLS-1$
 		} catch (Exception e) {
 			// success
-			System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+			debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
 		}
 		
 		try {
@@ -333,7 +333,7 @@
 			fail("Should not have parsed"); //$NON-NLS-1$
 		} catch (Exception e) {
 			// success
-			System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+			debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
 		}
 	}
 	
@@ -349,7 +349,7 @@
 			fail("Should not have parsed"); //$NON-NLS-1$
 		} catch (Exception e) {
 			// success
-			System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+			debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
 		}
 		
 		try {
@@ -361,7 +361,7 @@
 			fail("Should not have parsed"); //$NON-NLS-1$
 		} catch (Exception e) {
 			// success
-			System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+			debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
 		}
 	}
 	
@@ -377,7 +377,7 @@
 			fail("Should not have parsed"); //$NON-NLS-1$
 		} catch (Exception e) {
 			// success
-			System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+			debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
 		}
 		
 		try {
@@ -389,7 +389,7 @@
 			fail("Should not have parsed"); //$NON-NLS-1$
 		} catch (Exception e) {
 			// success
-			System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+			debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
 		}
 		
 		try {
@@ -480,7 +480,7 @@
 			fail("Should not have parsed"); //$NON-NLS-1$
 		} catch (Exception e) {
 			// success
-			System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+			debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
 		}
 		
 		try {
@@ -519,7 +519,7 @@
 			fail("Should not have parsed"); //$NON-NLS-1$
 		} catch (Exception e) {
 			// success
-			System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+			debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
 		}
 		
 		try {
@@ -633,7 +633,7 @@
             fail("Should have failed to parse the undefined attribute"); //$NON-NLS-1$
         } catch (ParserException e) {
             // success!
-            System.out.println("Got the expected exception: " + e.getLocalizedMessage()); //$NON-NLS-1$
+            debugPrintln("Got the expected exception: " + e.getLocalizedMessage()); //$NON-NLS-1$
         }
     }
     
@@ -692,7 +692,7 @@
             fail("Should have failed to parse the undefined operation"); //$NON-NLS-1$
         } catch (ParserException e) {
             // success!
-            System.out.println("Got the expected exception: " + e.getLocalizedMessage()); //$NON-NLS-1$
+            debugPrintln("Got the expected exception: " + e.getLocalizedMessage()); //$NON-NLS-1$
         }
     }
     
@@ -750,7 +750,7 @@
             fail("Should have failed to parse the undefined attribute"); //$NON-NLS-1$
         } catch (ParserException e) {
             // success!
-            System.out.println("Got the expected exception: " + e.getLocalizedMessage()); //$NON-NLS-1$
+            debugPrintln("Got the expected exception: " + e.getLocalizedMessage()); //$NON-NLS-1$
         }
     }
     
@@ -808,7 +808,7 @@
             fail("Should have failed to parse the undefined operation"); //$NON-NLS-1$
         } catch (ParserException e) {
             // success!
-            System.out.println("Got the expected exception: " + e.getLocalizedMessage()); //$NON-NLS-1$
+            debugPrintln("Got the expected exception: " + e.getLocalizedMessage()); //$NON-NLS-1$
         }
     }
     
Index: src/org/eclipse/ocl/ecore/tests/PredefinedSuperTypeInheritedOperationTest.java
===================================================================
RCS file: /cvsroot/modeling/org.eclipse.mdt/org.eclipse.ocl/tests/org.eclipse.ocl.ecore.tests/src/org/eclipse/ocl/ecore/tests/PredefinedSuperTypeInheritedOperationTest.java,v
retrieving revision 1.1
diff -u -r1.1 PredefinedSuperTypeInheritedOperationTest.java
--- src/org/eclipse/ocl/ecore/tests/PredefinedSuperTypeInheritedOperationTest.java	30 Aug 2008 20:18:10 -0000	1.1
+++ src/org/eclipse/ocl/ecore/tests/PredefinedSuperTypeInheritedOperationTest.java	19 Nov 2008 21:06:01 -0000
@@ -103,6 +103,7 @@
 	
 	@Override
 	protected void setUp() {
+		AbstractTestSuite.debugPrintln("==> Start  " + getName()); //$NON-NLS-1$
 		ocl = OCL.newInstance(new EcoreEnvironmentFactory());
 		EcoreEnvironment env = (EcoreEnvironment) ocl.getEnvironment();
 		env.addHelperOperation(env.getOCLStandardLibrary().getReal(),
@@ -114,6 +115,16 @@
 		env.addHelperProperty(env.getOCLStandardLibrary().getOclAny(),
 			createAdditionalOclAnyAttribute());
 	}
+	
+	@Override
+    protected void tearDown()
+		throws Exception {
+		
+	    ocl.dispose();
+	    ocl = null;
+	    
+	    AbstractTestSuite.debugPrintln("==> Finish " + getName()); //$NON-NLS-1$
+	}
 
 	private EOperation createAdditionalRealOperation() {
 		EOperation operation = EcoreFactory.eINSTANCE.createEOperation();
Index: src/org/eclipse/ocl/ecore/tests/OperationConstraintsTest.java
===================================================================
RCS file: /cvsroot/modeling/org.eclipse.mdt/org.eclipse.ocl/tests/org.eclipse.ocl.ecore.tests/src/org/eclipse/ocl/ecore/tests/OperationConstraintsTest.java,v
retrieving revision 1.6
diff -u -r1.6 OperationConstraintsTest.java
--- src/org/eclipse/ocl/ecore/tests/OperationConstraintsTest.java	28 Sep 2008 17:34:22 -0000	1.6
+++ src/org/eclipse/ocl/ecore/tests/OperationConstraintsTest.java	19 Nov 2008 21:06:01 -0000
@@ -141,7 +141,7 @@
 		} catch (AssertionFailedError e) {
 			// success
 			err = e;
-			System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+			debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
 		}
 		
 		assertNotNull("Should not have succeeded in validating illegal @pre", err); //$NON-NLS-1$
@@ -162,7 +162,7 @@
 		} catch (AssertionFailedError e) {
 			// success
 			err = e;
-			System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+			debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
 		}
 		
 		assertNotNull("Should not have succeeded in validating illegal @pre", err); //$NON-NLS-1$
@@ -182,7 +182,7 @@
 				"endpackage"); //$NON-NLS-1$
 		} catch (AssertionFailedError e) {
 			err = e;
-			System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+			debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
 		}
 		
 		assertNotNull("Should not have succeeded in validating illegal @pre", err); //$NON-NLS-1$
@@ -215,7 +215,7 @@
 				"endpackage"); //$NON-NLS-1$
 		} catch (AssertionFailedError e) {
 			err = e;
-			System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+			debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
 		}
 		
 		assertNotNull(err);
@@ -236,7 +236,7 @@
 				"endpackage"); //$NON-NLS-1$
 		} catch (AssertionFailedError e) {
 			err = e;
-			System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+			debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
 		}
 		
 		assertNotNull(err);
@@ -250,7 +250,7 @@
 				"endpackage"); //$NON-NLS-1$
 		} catch (AssertionFailedError e) {
 			err = e;
-			System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+			debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
 		}
 		
 		assertNotNull(err);
@@ -283,7 +283,7 @@
 				"endpackage"); //$NON-NLS-1$
 		} catch (AssertionFailedError e) {
 			err = e;
-			System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+			debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
 		}
 		
 		assertNotNull(err);
@@ -549,7 +549,7 @@
                 "endpackage"); //$NON-NLS-1$
         } catch (AssertionFailedError e) {
             err = e;
-            System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+            debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
         }
         
         assertNotNull(err);
@@ -563,7 +563,7 @@
                 "endpackage"); //$NON-NLS-1$
         } catch (AssertionFailedError e) {
             err = e;
-            System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+            debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
         }
         
         assertNotNull(err);
@@ -598,7 +598,7 @@
                 "endpackage"); //$NON-NLS-1$
         } catch (AssertionFailedError e) {
             err = e;
-            System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+            debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
         }
         
         assertNotNull(err);
Index: src/org/eclipse/ocl/ecore/tests/ProblemOptionTest.java
===================================================================
RCS file: /cvsroot/modeling/org.eclipse.mdt/org.eclipse.ocl/tests/org.eclipse.ocl.ecore.tests/src/org/eclipse/ocl/ecore/tests/ProblemOptionTest.java,v
retrieving revision 1.2
diff -u -r1.2 ProblemOptionTest.java
--- src/org/eclipse/ocl/ecore/tests/ProblemOptionTest.java	6 Nov 2007 19:48:59 -0000	1.2
+++ src/org/eclipse/ocl/ecore/tests/ProblemOptionTest.java	19 Nov 2008 21:06:02 -0000
@@ -164,7 +164,7 @@
         	fail("Should have failed to parse"); //$NON-NLS-1$
         } catch (ParserException e) {
             // success
-        	System.out.println("Got expected exception: " + e.getLocalizedMessage()); //$NON-NLS-1$
+        	debugPrintln("Got expected exception: " + e.getLocalizedMessage()); //$NON-NLS-1$
         } catch (Exception e) {
             fail("Failed to parse for unexpected reason: " + e.getLocalizedMessage()); //$NON-NLS-1$
         }
Index: launches/org.eclipse.ocl.ecore.tests (Standalone Backtracking).launch
===================================================================
RCS file: launches/org.eclipse.ocl.ecore.tests (Standalone Backtracking).launch
diff -N launches/org.eclipse.ocl.ecore.tests (Standalone Backtracking).launch
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ launches/org.eclipse.ocl.ecore.tests (Standalone Backtracking).launch	1 Jan 1970 00:00:00 -0000
@@ -0,0 +1,24 @@
+<?xml version="1.0" encoding="UTF-8" standalone="no"?>
+<launchConfiguration type="org.eclipse.jdt.junit.launchconfig">
+<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_PATHS">
+<listEntry value="/org.eclipse.ocl.ecore.tests/src/org/eclipse/ocl/ecore/tests/AllTests.java"/>
+</listAttribute>
+<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_TYPES">
+<listEntry value="1"/>
+</listAttribute>
+<stringAttribute key="org.eclipse.hyades.trace.ui.ATTR_DATA_COLLECTOR" value="org.eclipse.tptp.trace.jvmti.jvmtiMechanism:org.eclipse.tptp.analysisType.jvmti.heap"/>
+<stringAttribute key="org.eclipse.hyades.trace.ui.ATTR_DESTINATION_FILE" value=""/>
+<stringAttribute key="org.eclipse.hyades.trace.ui.ATTR_DESTINATION_MONITOR" value="DefaultMonitor"/>
+<stringAttribute key="org.eclipse.hyades.trace.ui.ATTR_DESTINATION_PROJECT" value="ProfileProject"/>
+<booleanAttribute key="org.eclipse.hyades.trace.ui.ATTR_PROFILE_TO_FILE" value="false"/>
+<stringAttribute key="org.eclipse.hyades.trace.ui.ATTR_PROFILING_SET" value="tptp-dummy-profiling-set-org.eclipse.ocl.ecore.tests (Standalone)"/>
+<stringAttribute key="org.eclipse.jdt.junit.CONTAINER" value=""/>
+<booleanAttribute key="org.eclipse.jdt.junit.KEEPRUNNING_ATTR" value="false"/>
+<stringAttribute key="org.eclipse.jdt.junit.TESTNAME" value=""/>
+<stringAttribute key="org.eclipse.jdt.junit.TEST_KIND" value="org.eclipse.jdt.junit.loader.junit3"/>
+<stringAttribute key="org.eclipse.jdt.launching.MAIN_TYPE" value="org.eclipse.ocl.ecore.tests.AllTests"/>
+<stringAttribute key="org.eclipse.jdt.launching.PROJECT_ATTR" value="org.eclipse.ocl.ecore.tests"/>
+<stringAttribute key="org.eclipse.jdt.launching.VM_ARGUMENTS" value="-Dorg.eclipse.ocl.ecore.tests=${resource_loc:/org.eclipse.ocl.ecore.tests}&#13;&#10;-Dorg.eclipse.ocl.ecore=${resource_loc:/org.eclipse.ocl.ecore}&#13;&#10;-Dorg.eclipse.ocl.ecore.tests.nodebug=true&#13;&#10;-Dorg.eclipse.ocl.ecore.tests.repairs=100&#13;&#10;-ea"/>
+<booleanAttribute key="org.eclipse.tptp.platform.jvmti.client.ATTR_EXEC_OBJ_ALLOC_SITE" value="false"/>
+<booleanAttribute key="org.eclipse.tptp.platform.jvmti.client.ATTR_HEAP_COLLECT_INSTANCE" value="true"/>
+</launchConfiguration>
Index: src/JMXProbe.probescript
===================================================================
RCS file: src/JMXProbe.probescript
diff -N src/JMXProbe.probescript
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ src/JMXProbe.probescript	1 Jan 1970 00:00:00 -0000
@@ -0,0 +1,18 @@
+REM unnamed_probe
+PROBE
+RULE com/ibm* * * * EXCLUDE
+RULE com/sun* * * * EXCLUDE
+RULE COM/ibm* * * * EXCLUDE
+RULE java* * * * EXCLUDE
+RULE org* * * * EXCLUDE
+RULE sun* * * * EXCLUDE
+RULE junit* * * * EXCLUDE
+RULE * JMXProbe_probe * * EXCLUDE
+RULE * JMXProbe_probe$Probe_0 * * EXCLUDE
+RULE * JMXProbe_probe * * EXCLUDE
+RULE * JMXProbe_probe$Probe_0 * * EXCLUDE
+RULE org/eclipse/tptp/trace/arm* * * * EXCLUDE
+RULE org/eclipse/tptp/monitoring/instrumentation* * * * EXCLUDE
+
+REF ONEXIT JMXProbe_probe$Probe_0 _exit (Ljava/lang/String;Ljava/lang/Object;)V methodName,thisObject
+REF ONENTRY JMXProbe_probe$Probe_0 _entry (Ljava/lang/String;Ljava/lang/String;)V className,methodName
Index: launches/org.eclipse.ocl.ecore.tests (Plugin).launch
===================================================================
RCS file: launches/org.eclipse.ocl.ecore.tests (Plugin).launch
diff -N launches/org.eclipse.ocl.ecore.tests (Plugin).launch
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ launches/org.eclipse.ocl.ecore.tests (Plugin).launch	1 Jan 1970 00:00:00 -0000
@@ -0,0 +1,38 @@
+<?xml version="1.0" encoding="UTF-8" standalone="no"?>
+<launchConfiguration type="org.eclipse.pde.ui.JunitLaunchConfig">
+<booleanAttribute key="append.args" value="true"/>
+<stringAttribute key="application" value="org.eclipse.pde.junit.runtime.coretestapplication"/>
+<booleanAttribute key="askclear" value="false"/>
+<booleanAttribute key="automaticAdd" value="true"/>
+<booleanAttribute key="automaticValidate" value="false"/>
+<stringAttribute key="bootstrap" value=""/>
+<booleanAttribute key="clearConfig" value="true"/>
+<booleanAttribute key="clearws" value="true"/>
+<booleanAttribute key="clearwslog" value="false"/>
+<stringAttribute key="configLocation" value="${workspace_loc}/.metadata/.plugins/org.eclipse.pde.core/pde-junit"/>
+<booleanAttribute key="default" value="true"/>
+<booleanAttribute key="includeOptional" value="true"/>
+<stringAttribute key="location" value="${workspace_loc}/../junit-workspace"/>
+<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_PATHS">
+<listEntry value="/org.eclipse.ocl.ecore.tests/src/org/eclipse/ocl/ecore/tests/AllTests.java"/>
+</listAttribute>
+<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_TYPES">
+<listEntry value="1"/>
+</listAttribute>
+<stringAttribute key="org.eclipse.jdt.junit.CONTAINER" value=""/>
+<booleanAttribute key="org.eclipse.jdt.junit.KEEPRUNNING_ATTR" value="false"/>
+<stringAttribute key="org.eclipse.jdt.junit.TESTNAME" value=""/>
+<stringAttribute key="org.eclipse.jdt.junit.TEST_KIND" value="org.eclipse.jdt.junit.loader.junit3"/>
+<stringAttribute key="org.eclipse.jdt.launching.MAIN_TYPE" value="org.eclipse.ocl.ecore.tests.AllTests"/>
+<stringAttribute key="org.eclipse.jdt.launching.PROGRAM_ARGUMENTS" value="-os ${target.os} -ws ${target.ws} -arch ${target.arch} -nl ${target.nl}"/>
+<stringAttribute key="org.eclipse.jdt.launching.PROJECT_ATTR" value="org.eclipse.ocl.ecore.tests"/>
+<stringAttribute key="org.eclipse.jdt.launching.SOURCE_PATH_PROVIDER" value="org.eclipse.pde.ui.workbenchClasspathProvider"/>
+<stringAttribute key="org.eclipse.jdt.launching.VM_ARGUMENTS" value="-Dorg.eclipse.ocl.ecore.tests.nodebug=true&#13;&#10;-ea"/>
+<stringAttribute key="pde.version" value="3.3"/>
+<stringAttribute key="product" value=""/>
+<booleanAttribute key="show_selected_only" value="false"/>
+<booleanAttribute key="tracing" value="false"/>
+<booleanAttribute key="useDefaultConfig" value="true"/>
+<booleanAttribute key="useDefaultConfigArea" value="false"/>
+<booleanAttribute key="useProduct" value="false"/>
+</launchConfiguration>
Index: launches/org.eclipse.ocl.ecore.tests (Standalone Backtracking with debug).launch
===================================================================
RCS file: launches/org.eclipse.ocl.ecore.tests (Standalone Backtracking with debug).launch
diff -N launches/org.eclipse.ocl.ecore.tests (Standalone Backtracking with debug).launch
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ launches/org.eclipse.ocl.ecore.tests (Standalone Backtracking with debug).launch	1 Jan 1970 00:00:00 -0000
@@ -0,0 +1,24 @@
+<?xml version="1.0" encoding="UTF-8" standalone="no"?>
+<launchConfiguration type="org.eclipse.jdt.junit.launchconfig">
+<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_PATHS">
+<listEntry value="/org.eclipse.ocl.ecore.tests/src/org/eclipse/ocl/ecore/tests/AllTests.java"/>
+</listAttribute>
+<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_TYPES">
+<listEntry value="1"/>
+</listAttribute>
+<stringAttribute key="org.eclipse.hyades.trace.ui.ATTR_DATA_COLLECTOR" value="org.eclipse.tptp.trace.jvmti.jvmtiMechanism:org.eclipse.tptp.analysisType.jvmti.heap"/>
+<stringAttribute key="org.eclipse.hyades.trace.ui.ATTR_DESTINATION_FILE" value=""/>
+<stringAttribute key="org.eclipse.hyades.trace.ui.ATTR_DESTINATION_MONITOR" value="DefaultMonitor"/>
+<stringAttribute key="org.eclipse.hyades.trace.ui.ATTR_DESTINATION_PROJECT" value="ProfileProject"/>
+<booleanAttribute key="org.eclipse.hyades.trace.ui.ATTR_PROFILE_TO_FILE" value="false"/>
+<stringAttribute key="org.eclipse.hyades.trace.ui.ATTR_PROFILING_SET" value="tptp-dummy-profiling-set-org.eclipse.ocl.ecore.tests (Standalone)"/>
+<stringAttribute key="org.eclipse.jdt.junit.CONTAINER" value=""/>
+<booleanAttribute key="org.eclipse.jdt.junit.KEEPRUNNING_ATTR" value="false"/>
+<stringAttribute key="org.eclipse.jdt.junit.TESTNAME" value=""/>
+<stringAttribute key="org.eclipse.jdt.junit.TEST_KIND" value="org.eclipse.jdt.junit.loader.junit3"/>
+<stringAttribute key="org.eclipse.jdt.launching.MAIN_TYPE" value="org.eclipse.ocl.ecore.tests.AllTests"/>
+<stringAttribute key="org.eclipse.jdt.launching.PROJECT_ATTR" value="org.eclipse.ocl.ecore.tests"/>
+<stringAttribute key="org.eclipse.jdt.launching.VM_ARGUMENTS" value="-Dorg.eclipse.ocl.ecore.tests=${resource_loc:/org.eclipse.ocl.ecore.tests}&#13;&#10;-Dorg.eclipse.ocl.ecore=${resource_loc:/org.eclipse.ocl.ecore}&#13;&#10;-Dorg.eclipse.ocl.ecore.tests.repairs=100&#13;&#10;-ea"/>
+<booleanAttribute key="org.eclipse.tptp.platform.jvmti.client.ATTR_EXEC_OBJ_ALLOC_SITE" value="false"/>
+<booleanAttribute key="org.eclipse.tptp.platform.jvmti.client.ATTR_HEAP_COLLECT_INSTANCE" value="true"/>
+</launchConfiguration>
Index: launches/org.eclipse.ocl.ecore.tests (Standalone).launch
===================================================================
RCS file: launches/org.eclipse.ocl.ecore.tests (Standalone).launch
diff -N launches/org.eclipse.ocl.ecore.tests (Standalone).launch
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ launches/org.eclipse.ocl.ecore.tests (Standalone).launch	1 Jan 1970 00:00:00 -0000
@@ -0,0 +1,24 @@
+<?xml version="1.0" encoding="UTF-8" standalone="no"?>
+<launchConfiguration type="org.eclipse.jdt.junit.launchconfig">
+<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_PATHS">
+<listEntry value="/org.eclipse.ocl.ecore.tests/src/org/eclipse/ocl/ecore/tests/AllTests.java"/>
+</listAttribute>
+<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_TYPES">
+<listEntry value="1"/>
+</listAttribute>
+<stringAttribute key="org.eclipse.hyades.trace.ui.ATTR_DATA_COLLECTOR" value="org.eclipse.tptp.trace.jvmti.jvmtiMechanism:org.eclipse.tptp.analysisType.jvmti.heap"/>
+<stringAttribute key="org.eclipse.hyades.trace.ui.ATTR_DESTINATION_FILE" value=""/>
+<stringAttribute key="org.eclipse.hyades.trace.ui.ATTR_DESTINATION_MONITOR" value="DefaultMonitor"/>
+<stringAttribute key="org.eclipse.hyades.trace.ui.ATTR_DESTINATION_PROJECT" value="ProfileProject"/>
+<booleanAttribute key="org.eclipse.hyades.trace.ui.ATTR_PROFILE_TO_FILE" value="false"/>
+<stringAttribute key="org.eclipse.hyades.trace.ui.ATTR_PROFILING_SET" value="tptp-dummy-profiling-set-org.eclipse.ocl.ecore.tests (Standalone)"/>
+<stringAttribute key="org.eclipse.jdt.junit.CONTAINER" value=""/>
+<booleanAttribute key="org.eclipse.jdt.junit.KEEPRUNNING_ATTR" value="false"/>
+<stringAttribute key="org.eclipse.jdt.junit.TESTNAME" value=""/>
+<stringAttribute key="org.eclipse.jdt.junit.TEST_KIND" value="org.eclipse.jdt.junit.loader.junit3"/>
+<stringAttribute key="org.eclipse.jdt.launching.MAIN_TYPE" value="org.eclipse.ocl.ecore.tests.AllTests"/>
+<stringAttribute key="org.eclipse.jdt.launching.PROJECT_ATTR" value="org.eclipse.ocl.ecore.tests"/>
+<stringAttribute key="org.eclipse.jdt.launching.VM_ARGUMENTS" value="-Dorg.eclipse.ocl.ecore.tests=${resource_loc:/org.eclipse.ocl.ecore.tests}&#13;&#10;-Dorg.eclipse.ocl.ecore=${resource_loc:/org.eclipse.ocl.ecore}&#13;&#10;-Dorg.eclipse.ocl.ecore.tests.nodebug=true&#13;&#10;-ea"/>
+<booleanAttribute key="org.eclipse.tptp.platform.jvmti.client.ATTR_EXEC_OBJ_ALLOC_SITE" value="false"/>
+<booleanAttribute key="org.eclipse.tptp.platform.jvmti.client.ATTR_HEAP_COLLECT_INSTANCE" value="true"/>
+</launchConfiguration>
Index: launches/org.eclipse.ocl.ecore.tests (Standalone with debug).launch
===================================================================
RCS file: launches/org.eclipse.ocl.ecore.tests (Standalone with debug).launch
diff -N launches/org.eclipse.ocl.ecore.tests (Standalone with debug).launch
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ launches/org.eclipse.ocl.ecore.tests (Standalone with debug).launch	1 Jan 1970 00:00:00 -0000
@@ -0,0 +1,23 @@
+<?xml version="1.0" encoding="UTF-8" standalone="no"?>
+<launchConfiguration type="org.eclipse.jdt.junit.launchconfig">
+<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_PATHS">
+<listEntry value="/org.eclipse.ocl.ecore.tests/src/org/eclipse/ocl/ecore/tests/AllTests.java"/>
+</listAttribute>
+<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_TYPES">
+<listEntry value="1"/>
+</listAttribute>
+<stringAttribute key="org.eclipse.hyades.trace.ui.ATTR_DATA_COLLECTOR" value="org.eclipse.tptp.trace.jvmti.jvmtiMechanism:org.eclipse.tptp.analysisType.jvmti.heap"/>
+<stringAttribute key="org.eclipse.hyades.trace.ui.ATTR_DESTINATION_FILE" value="C:\Temp\try.trcxml"/>
+<stringAttribute key="org.eclipse.hyades.trace.ui.ATTR_DESTINATION_MONITOR" value="DefaultMonitor"/>
+<stringAttribute key="org.eclipse.hyades.trace.ui.ATTR_DESTINATION_PROJECT" value="ProfileProject"/>
+<booleanAttribute key="org.eclipse.hyades.trace.ui.ATTR_PROFILE_TO_FILE" value="true"/>
+<stringAttribute key="org.eclipse.hyades.trace.ui.ATTR_PROFILING_SET" value="tptp-dummy-profiling-set-org.eclipse.ocl.ecore.tests (Standalone with debug)"/>
+<stringAttribute key="org.eclipse.jdt.junit.CONTAINER" value=""/>
+<booleanAttribute key="org.eclipse.jdt.junit.KEEPRUNNING_ATTR" value="false"/>
+<stringAttribute key="org.eclipse.jdt.junit.TEST_KIND" value="org.eclipse.jdt.junit.loader.junit3"/>
+<stringAttribute key="org.eclipse.jdt.launching.MAIN_TYPE" value="org.eclipse.ocl.ecore.tests.AllTests"/>
+<stringAttribute key="org.eclipse.jdt.launching.PROJECT_ATTR" value="org.eclipse.ocl.ecore.tests"/>
+<stringAttribute key="org.eclipse.jdt.launching.VM_ARGUMENTS" value="-Dorg.eclipse.ocl.ecore.tests=${resource_loc:/org.eclipse.ocl.ecore.tests}&#13;&#10;-Dorg.eclipse.ocl.ecore=${resource_loc:/org.eclipse.ocl.ecore}&#13;&#10;-ea"/>
+<booleanAttribute key="org.eclipse.tptp.platform.jvmti.client.ATTR_EXEC_OBJ_ALLOC_SITE" value="true"/>
+<booleanAttribute key="org.eclipse.tptp.platform.jvmti.client.ATTR_HEAP_COLLECT_INSTANCE" value="true"/>
+</launchConfiguration>
Index: launches/org.eclipse.ocl.ecore.tests (Plugin with debug).launch
===================================================================
RCS file: launches/org.eclipse.ocl.ecore.tests (Plugin with debug).launch
diff -N launches/org.eclipse.ocl.ecore.tests (Plugin with debug).launch
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ launches/org.eclipse.ocl.ecore.tests (Plugin with debug).launch	1 Jan 1970 00:00:00 -0000
@@ -0,0 +1,38 @@
+<?xml version="1.0" encoding="UTF-8" standalone="no"?>
+<launchConfiguration type="org.eclipse.pde.ui.JunitLaunchConfig">
+<booleanAttribute key="append.args" value="true"/>
+<stringAttribute key="application" value="org.eclipse.pde.junit.runtime.coretestapplication"/>
+<booleanAttribute key="askclear" value="false"/>
+<booleanAttribute key="automaticAdd" value="true"/>
+<booleanAttribute key="automaticValidate" value="false"/>
+<stringAttribute key="bootstrap" value=""/>
+<booleanAttribute key="clearConfig" value="true"/>
+<booleanAttribute key="clearws" value="true"/>
+<booleanAttribute key="clearwslog" value="false"/>
+<stringAttribute key="configLocation" value="${workspace_loc}/.metadata/.plugins/org.eclipse.pde.core/pde-junit"/>
+<booleanAttribute key="default" value="true"/>
+<booleanAttribute key="includeOptional" value="true"/>
+<stringAttribute key="location" value="${workspace_loc}/../junit-workspace"/>
+<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_PATHS">
+<listEntry value="/org.eclipse.ocl.ecore.tests/src/org/eclipse/ocl/ecore/tests/AllTests.java"/>
+</listAttribute>
+<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_TYPES">
+<listEntry value="1"/>
+</listAttribute>
+<stringAttribute key="org.eclipse.jdt.junit.CONTAINER" value=""/>
+<booleanAttribute key="org.eclipse.jdt.junit.KEEPRUNNING_ATTR" value="false"/>
+<stringAttribute key="org.eclipse.jdt.junit.TESTNAME" value=""/>
+<stringAttribute key="org.eclipse.jdt.junit.TEST_KIND" value="org.eclipse.jdt.junit.loader.junit3"/>
+<stringAttribute key="org.eclipse.jdt.launching.MAIN_TYPE" value="org.eclipse.ocl.ecore.tests.AllTests"/>
+<stringAttribute key="org.eclipse.jdt.launching.PROGRAM_ARGUMENTS" value="-os ${target.os} -ws ${target.ws} -arch ${target.arch} -nl ${target.nl}"/>
+<stringAttribute key="org.eclipse.jdt.launching.PROJECT_ATTR" value="org.eclipse.ocl.ecore.tests"/>
+<stringAttribute key="org.eclipse.jdt.launching.SOURCE_PATH_PROVIDER" value="org.eclipse.pde.ui.workbenchClasspathProvider"/>
+<stringAttribute key="org.eclipse.jdt.launching.VM_ARGUMENTS" value="-ea"/>
+<stringAttribute key="pde.version" value="3.3"/>
+<stringAttribute key="product" value=""/>
+<booleanAttribute key="show_selected_only" value="false"/>
+<booleanAttribute key="tracing" value="false"/>
+<booleanAttribute key="useDefaultConfig" value="true"/>
+<booleanAttribute key="useDefaultConfigArea" value="false"/>
+<booleanAttribute key="useProduct" value="false"/>
+</launchConfiguration>
#P org.eclipse.ocl.uml.tests
Index: src/org/eclipse/ocl/uml/tests/TypesValidatorTest.java
===================================================================
RCS file: /cvsroot/modeling/org.eclipse.mdt/org.eclipse.ocl/tests/org.eclipse.ocl.uml.tests/src/org/eclipse/ocl/uml/tests/TypesValidatorTest.java,v
retrieving revision 1.2
diff -u -r1.2 TypesValidatorTest.java
--- src/org/eclipse/ocl/uml/tests/TypesValidatorTest.java	11 May 2008 05:37:19 -0000	1.2
+++ src/org/eclipse/ocl/uml/tests/TypesValidatorTest.java	19 Nov 2008 21:06:16 -0000
@@ -136,11 +136,8 @@
 	public void test_emptyCollectionType_196972() {
 		// load our test resource
 		ResourceSet rset = new ResourceSetImpl();
-		Resource res = rset
-			.getResource(
-				URI
-					.createPlatformPluginURI(
-						"/org.eclipse.ocl.uml.tests/model/VoidCollectionTypes.uml", true), true); //$NON-NLS-1$
+		URI uri = getTestModelURI("/model/VoidCollectionTypes.uml"); //$NON-NLS-1$
+		Resource res = rset.getResource(uri, true);
 		Package epackage = (Package) res.getContents().get(0);
 		
 		// this one is ill-named
@@ -188,7 +185,7 @@
 	protected void assertProblem(Diagnostic diagnostic, EObject target, int code) {
 		Diagnostic problem = findProblem(diagnostic, target, code);
 		assertNotNull("Problem not found", problem); //$NON-NLS-1$
-		System.out.println("Found expected problem: " + problem.getMessage()); //$NON-NLS-1$
+		debugPrintln("Found expected problem: " + problem.getMessage()); //$NON-NLS-1$
 	}
 	
 	protected Diagnostic findProblem(Diagnostic diagnostic, EObject target, int code) {
Index: src/org/eclipse/ocl/uml/tests/AssociationTest.java
===================================================================
RCS file: /cvsroot/modeling/org.eclipse.mdt/org.eclipse.ocl/tests/org.eclipse.ocl.uml.tests/src/org/eclipse/ocl/uml/tests/AssociationTest.java,v
retrieving revision 1.8
diff -u -r1.8 AssociationTest.java
--- src/org/eclipse/ocl/uml/tests/AssociationTest.java	2 Nov 2008 17:52:11 -0000	1.8
+++ src/org/eclipse/ocl/uml/tests/AssociationTest.java	19 Nov 2008 21:06:10 -0000
@@ -150,7 +150,7 @@
 		} catch (AssertionFailedError e) {
 			// this is expected (success case)
 			err = e;
-			System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+			debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
 		}
 		assertNotNull("Parse should have failed", err); //$NON-NLS-1$
 		
@@ -163,7 +163,7 @@
 		} catch (AssertionFailedError e) {
 			// this is expected (success case)
 			err = e;
-			System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+			debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
 		}
 		assertNotNull("Parse should have failed", err); //$NON-NLS-1$
 		
@@ -176,7 +176,7 @@
 		} catch (AssertionFailedError e) {
 			// this is expected (success case)
 			err = e;
-			System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+			debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
 		}
 		assertNotNull("Parse should have failed", err); //$NON-NLS-1$
 	}
@@ -320,7 +320,7 @@
 		} catch (AssertionFailedError e) {
 			// this is expected (success case)
 			err = e;
-			System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+			debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
 		}
 		assertNotNull("Parse should have failed", err); //$NON-NLS-1$
 			
@@ -333,7 +333,7 @@
 		} catch (AssertionFailedError e) {
 			// this is expected (success case)
 			err = e;
-			System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+			debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
 		}
 		assertNotNull("Parse should have failed", err); //$NON-NLS-1$
 		
@@ -346,7 +346,7 @@
 		} catch (AssertionFailedError e) {
 			// this is expected (success case)
 			err = e;
-			System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+			debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
 		}
 		assertNotNull("Parse should have failed", err); //$NON-NLS-1$
 	}
@@ -443,7 +443,7 @@
 		} catch (AssertionFailedError e) {
 			// this is expected (success case)
 			err = e;
-			System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+			debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
 		}
 		assertNotNull("Parse should have failed", err); //$NON-NLS-1$
 	}
@@ -845,7 +845,7 @@
             Diagnostic diag = ocl.getProblems();
             assertNotNull(diag);
             assertEquals(Diagnostic.WARNING, diag.getSeverity());
-            System.out.println("Got expected warning: " + diag.getMessage()); //$NON-NLS-1$
+            debugPrintln("Got expected warning: " + diag.getMessage()); //$NON-NLS-1$
         } finally {
             fruitPackage = null; // re-initialize for next test
         }
@@ -875,7 +875,7 @@
             Diagnostic diag = ocl.getProblems();
             assertNotNull(diag);
             assertEquals(Diagnostic.WARNING, diag.getSeverity());
-            System.out.println("Got expected warning: " + diag.getMessage()); //$NON-NLS-1$
+            debugPrintln("Got expected warning: " + diag.getMessage()); //$NON-NLS-1$
         } finally {
             fruitPackage = null; // re-initialize for next test
         }
@@ -895,7 +895,7 @@
             fail("Should not have parsed"); //$NON-NLS-1$
         } catch (ParserException e) {
             // success
-            System.out.println("Got expected exception: " + e.getLocalizedMessage()); //$NON-NLS-1$
+            debugPrintln("Got expected exception: " + e.getLocalizedMessage()); //$NON-NLS-1$
         } finally {
             fruitPackage = null; // re-initialize for next test
         }
@@ -1048,6 +1048,7 @@
 		instancePackage = null;
 		instanceResource.unload();
 		resourceSet.getResources().remove(instanceResource);
+		instanceResource = null;
 		
 		super.tearDown();
 	}
Index: src/org/eclipse/ocl/uml/tests/IteratorsTest.java
===================================================================
RCS file: /cvsroot/modeling/org.eclipse.mdt/org.eclipse.ocl/tests/org.eclipse.ocl.uml.tests/src/org/eclipse/ocl/uml/tests/IteratorsTest.java,v
retrieving revision 1.5
diff -u -r1.5 IteratorsTest.java
--- src/org/eclipse/ocl/uml/tests/IteratorsTest.java	17 May 2008 20:41:31 -0000	1.5
+++ src/org/eclipse/ocl/uml/tests/IteratorsTest.java	19 Nov 2008 21:06:13 -0000
@@ -527,8 +527,7 @@
             fail("Validation should have failed"); //$NON-NLS-1$
         } catch (ParserException e) {
             // success
-            System.out
-                .println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+        	debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
         }
     }
 
@@ -566,8 +565,7 @@
             fail("Validation should have failed"); //$NON-NLS-1$
         } catch (ParserException e) {
             // success
-            System.out
-                .println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+        	debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
         }
 
         helper.setContext(fake);
@@ -934,4 +932,19 @@
         pkg5 = pkg3.createNestedPackage("pkg5"); //$NON-NLS-1$
         george = pkg5.createNestedPackage("george"); //$NON-NLS-1$
     }
+
+    @Override
+	protected void tearDown() throws Exception {
+		// delete customizations, to allow garbage collection
+	    pkg1 = null;
+	    pkg2 = null;
+	    pkg3 = null;
+		pkg4 = null;
+		pkg5 = null;
+		jim = null;
+		bob = null;
+		george = null;
+
+		super.tearDown();		
+	}
 }
Index: src/org/eclipse/ocl/uml/tests/DefExpressionTest.java
===================================================================
RCS file: /cvsroot/modeling/org.eclipse.mdt/org.eclipse.ocl/tests/org.eclipse.ocl.uml.tests/src/org/eclipse/ocl/uml/tests/DefExpressionTest.java,v
retrieving revision 1.6
diff -u -r1.6 DefExpressionTest.java
--- src/org/eclipse/ocl/uml/tests/DefExpressionTest.java	5 Aug 2008 00:36:50 -0000	1.6
+++ src/org/eclipse/ocl/uml/tests/DefExpressionTest.java	19 Nov 2008 21:06:12 -0000
@@ -288,7 +288,7 @@
 			fail("Should not have parsed"); //$NON-NLS-1$
 		} catch (Exception e) {
 			// success
-			System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+			debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
 		}
 		
 		try {
@@ -300,7 +300,7 @@
 			fail("Should not have parsed"); //$NON-NLS-1$
 		} catch (Exception e) {
 			// success
-			System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+			debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
 		}
 	}
 	
@@ -316,7 +316,7 @@
 			fail("Should not have parsed"); //$NON-NLS-1$
 		} catch (Exception e) {
 			// success
-			System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+			debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
 		}
 		
 		try {
@@ -328,7 +328,7 @@
 			fail("Should not have parsed"); //$NON-NLS-1$
 		} catch (Exception e) {
 			// success
-			System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+			debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
 		}
 		
 		try {
@@ -340,7 +340,7 @@
 			fail("Should not have parsed"); //$NON-NLS-1$
 		} catch (Exception e) {
 			// success
-			System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+			debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
 		}
 	}
 	
@@ -356,7 +356,7 @@
 			fail("Should not have parsed"); //$NON-NLS-1$
 		} catch (Exception e) {
 			// success
-			System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+			debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
 		}
 		
 		try {
@@ -368,7 +368,7 @@
 			fail("Should not have parsed"); //$NON-NLS-1$
 		} catch (Exception e) {
 			// success
-			System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+			debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
 		}
 	}
 	
@@ -384,7 +384,7 @@
 			fail("Should not have parsed"); //$NON-NLS-1$
 		} catch (Exception e) {
 			// success
-			System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+			debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
 		}
 		
 		try {
@@ -396,7 +396,7 @@
 			fail("Should not have parsed"); //$NON-NLS-1$
 		} catch (Exception e) {
 			// success
-			System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+			debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
 		}
 		
 		try {
@@ -487,7 +487,7 @@
 			fail("Should not have parsed"); //$NON-NLS-1$
 		} catch (Exception e) {
 			// success
-			System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+			debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
 		}
 		
 		try {
@@ -526,7 +526,7 @@
 			fail("Should not have parsed"); //$NON-NLS-1$
 		} catch (Exception e) {
 			// success
-			System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+			debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
 		}
 		
 		try {
@@ -640,7 +640,7 @@
             fail("Should have failed to parse the undefined attribute"); //$NON-NLS-1$
         } catch (ParserException e) {
             // success!
-            System.out.println("Got the expected exception: " + e.getLocalizedMessage()); //$NON-NLS-1$
+            debugPrintln("Got the expected exception: " + e.getLocalizedMessage()); //$NON-NLS-1$
         }
     }
     
@@ -699,7 +699,7 @@
             fail("Should have failed to parse the undefined operation"); //$NON-NLS-1$
         } catch (ParserException e) {
             // success!
-            System.out.println("Got the expected exception: " + e.getLocalizedMessage()); //$NON-NLS-1$
+            debugPrintln("Got the expected exception: " + e.getLocalizedMessage()); //$NON-NLS-1$
         }
     }
     
@@ -757,7 +757,7 @@
             fail("Should have failed to parse the undefined attribute"); //$NON-NLS-1$
         } catch (ParserException e) {
             // success!
-            System.out.println("Got the expected exception: " + e.getLocalizedMessage()); //$NON-NLS-1$
+            debugPrintln("Got the expected exception: " + e.getLocalizedMessage()); //$NON-NLS-1$
         }
     }
     
@@ -815,7 +815,7 @@
             fail("Should have failed to parse the undefined operation"); //$NON-NLS-1$
         } catch (ParserException e) {
             // success!
-            System.out.println("Got the expected exception: " + e.getLocalizedMessage()); //$NON-NLS-1$
+            debugPrintln("Got the expected exception: " + e.getLocalizedMessage()); //$NON-NLS-1$
         }
     }
     
@@ -968,6 +968,7 @@
 		instancePackage = null;
 		instanceResource.unload();
 		resourceSet.getResources().remove(instanceResource);
+		instanceResource = null;
 		
 		super.tearDown();
 	}
Index: src/org/eclipse/ocl/uml/tests/ExpressionsValidatorTest.java
===================================================================
RCS file: /cvsroot/modeling/org.eclipse.mdt/org.eclipse.ocl/tests/org.eclipse.ocl.uml.tests/src/org/eclipse/ocl/uml/tests/ExpressionsValidatorTest.java,v
retrieving revision 1.2
diff -u -r1.2 ExpressionsValidatorTest.java
--- src/org/eclipse/ocl/uml/tests/ExpressionsValidatorTest.java	17 May 2008 00:53:07 -0000	1.2
+++ src/org/eclipse/ocl/uml/tests/ExpressionsValidatorTest.java	19 Nov 2008 21:06:12 -0000
@@ -915,7 +915,7 @@
 	protected void assertProblem(Diagnostic diagnostic, EObject target, int code) {
 		Diagnostic problem = findProblem(diagnostic, target, code);
 		assertNotNull("Problem not found", problem); //$NON-NLS-1$
-		System.out.println("Found expected problem: " + problem.getMessage()); //$NON-NLS-1$
+		debugPrintln("Found expected problem: " + problem.getMessage()); //$NON-NLS-1$
 	}
 	
 	protected Diagnostic findProblem(Diagnostic diagnostic, EObject target, int code) {
Index: src/org/eclipse/ocl/uml/tests/MessagesTest.java
===================================================================
RCS file: /cvsroot/modeling/org.eclipse.mdt/org.eclipse.ocl/tests/org.eclipse.ocl.uml.tests/src/org/eclipse/ocl/uml/tests/MessagesTest.java,v
retrieving revision 1.2
diff -u -r1.2 MessagesTest.java
--- src/org/eclipse/ocl/uml/tests/MessagesTest.java	14 Feb 2007 14:46:16 -0000	1.2
+++ src/org/eclipse/ocl/uml/tests/MessagesTest.java	19 Nov 2008 21:06:14 -0000
@@ -93,7 +93,7 @@
 			fail("Should have failed to parse unknown operation"); //$NON-NLS-1$
 		} catch (Exception e) {
 			// success
-			System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+			debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
 		}
 		
 		try {
@@ -103,7 +103,7 @@
 			fail("Should have failed to parse non-conformant arg"); //$NON-NLS-1$
 		} catch (Exception e) {
 			// success
-			System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+			debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
 		}
 	}
 	
@@ -145,7 +145,7 @@
 			fail("Should have failed to parse unknown operation"); //$NON-NLS-1$
 		} catch (Exception e) {
 			// success
-			System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+			debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
 		}
 		
 		try {
@@ -155,7 +155,7 @@
 			fail("Should have failed to parse non-conformant arg"); //$NON-NLS-1$
 		} catch (Exception e) {
 			// success
-			System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+			debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
 		}
 	}
 	
@@ -246,7 +246,7 @@
 			fail("Should have failed to parse unknown operation"); //$NON-NLS-1$
 		} catch (Exception e) {
 			// success
-			System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+			debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
 		}
 		
 		try {
@@ -256,7 +256,7 @@
 			fail("Should have failed to parse non-conformant arg"); //$NON-NLS-1$
 		} catch (Exception e) {
 			// success
-			System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+			debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
 		}
 	}
 	
@@ -301,7 +301,7 @@
 			fail("Should have failed to parse unknown signal"); //$NON-NLS-1$
 		} catch (Exception e) {
 			// success
-			System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+			debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
 		}
 		
 		try {
@@ -311,7 +311,7 @@
 			fail("Should have failed to parse non-conformant arg"); //$NON-NLS-1$
 		} catch (Exception e) {
 			// success
-			System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+			debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
 		}
 	}
 	
@@ -374,7 +374,7 @@
 			fail("Should have failed to parse unknown signal"); //$NON-NLS-1$
 		} catch (Exception e) {
 			// success
-			System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+			debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
 		}
 		
 		try {
@@ -384,7 +384,7 @@
 			fail("Should have failed to parse non-conformant arg"); //$NON-NLS-1$
 		} catch (Exception e) {
 			// success
-			System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+			debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
 		}
 	}
 	
Index: src/org/eclipse/ocl/uml/tests/InitOrDerExpressionTest.java
===================================================================
RCS file: /cvsroot/modeling/org.eclipse.mdt/org.eclipse.ocl/tests/org.eclipse.ocl.uml.tests/src/org/eclipse/ocl/uml/tests/InitOrDerExpressionTest.java,v
retrieving revision 1.3
diff -u -r1.3 InitOrDerExpressionTest.java
--- src/org/eclipse/ocl/uml/tests/InitOrDerExpressionTest.java	11 Oct 2007 23:04:36 -0000	1.3
+++ src/org/eclipse/ocl/uml/tests/InitOrDerExpressionTest.java	19 Nov 2008 21:06:13 -0000
@@ -269,7 +269,7 @@
 			fail("Should not have parsed"); //$NON-NLS-1$
 		} catch (Exception e) {
 			// success
-			System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+			debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
 		}
 	}
 	
@@ -283,7 +283,7 @@
 			fail("Should not have parsed"); //$NON-NLS-1$
 		} catch (Exception e) {
 			// success
-			System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+			debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
 		}
 	}
 	
@@ -318,7 +318,7 @@
 		} catch (AssertionFailedError e) {
 			// success
 			err = e;
-			System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+			debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
 		}
 		
 		assertNotNull("Should not have successfully parsed", err); //$NON-NLS-1$
@@ -333,7 +333,7 @@
 		} catch (AssertionFailedError e) {
 			// success
 			err = e;
-			System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+			debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
 		}
 		
 		assertNotNull("Should not have successfully parsed", err); //$NON-NLS-1$
@@ -349,7 +349,7 @@
 		} catch (AssertionFailedError e) {
 			// success
 			err = e;
-			System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+			debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
 		}
 		
 		assertNotNull("Should not have successfully parsed", err); //$NON-NLS-1$
@@ -365,7 +365,7 @@
 		} catch (AssertionFailedError e) {
 			// success
 			err = e;
-			System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+			debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
 		}
 		
 		assertNotNull("Should not have successfully parsed", err); //$NON-NLS-1$
@@ -403,6 +403,10 @@
 		fruitPackage.getPackagedElements().remove(anotherApple);
 		
 		banana = null;
+		allApples = null;
+		aFruit = null;
+		anApple = null;
+		anotherApple = null;
 		
 		super.tearDown();
 	}
Index: src/org/eclipse/ocl/uml/tests/AbstractTestSuite.java
===================================================================
RCS file: /cvsroot/modeling/org.eclipse.mdt/org.eclipse.ocl/tests/org.eclipse.ocl.uml.tests/src/org/eclipse/ocl/uml/tests/AbstractTestSuite.java,v
retrieving revision 1.13
diff -u -r1.13 AbstractTestSuite.java
--- src/org/eclipse/ocl/uml/tests/AbstractTestSuite.java	10 Sep 2008 18:44:05 -0000	1.13
+++ src/org/eclipse/ocl/uml/tests/AbstractTestSuite.java	19 Nov 2008 21:06:09 -0000
@@ -19,12 +19,12 @@
 package org.eclipse.ocl.uml.tests;
 
 import java.lang.reflect.Method;
-import java.net.MalformedURLException;
 import java.net.URL;
 import java.util.Collection;
 import java.util.Collections;
 import java.util.Iterator;
 import java.util.List;
+import java.util.Map;
 import java.util.Set;
 
 import junit.framework.Test;
@@ -41,7 +41,9 @@
 import org.eclipse.emf.ecore.resource.Resource;
 import org.eclipse.emf.ecore.resource.ResourceSet;
 import org.eclipse.emf.ecore.resource.impl.ResourceSetImpl;
+import org.eclipse.emf.ecore.resource.impl.URIMappingRegistryImpl;
 import org.eclipse.emf.ecore.util.EcoreUtil;
+import org.eclipse.ocl.Environment;
 import org.eclipse.ocl.EnvironmentFactory;
 import org.eclipse.ocl.OCLInput;
 import org.eclipse.ocl.ParserException;
@@ -55,6 +57,9 @@
 import org.eclipse.ocl.types.OCLStandardLibrary;
 import org.eclipse.ocl.uml.ExpressionInOCL;
 import org.eclipse.ocl.uml.OCL;
+import org.eclipse.ocl.uml.UMLEnvironment;
+import org.eclipse.ocl.uml.UMLEnvironmentFactory;
+import org.eclipse.ocl.uml.internal.OCLStandardLibraryImpl;
 import org.eclipse.ocl.uml.util.OCLUMLUtil;
 import org.eclipse.ocl.util.OCLUtil;
 import org.eclipse.ocl.utilities.Visitable;
@@ -167,6 +172,8 @@
 	protected OCL ocl;
 	protected OCLHelper<Classifier, Operation, Property, Constraint> helper;
 	
+	protected static boolean noDebug = System.getProperty("org.eclipse.ocl.uml.tests.nodebug") != null; //$NON-NLS-1$
+	
 	public AbstractTestSuite(String name) {
 		super(name);
 	}
@@ -219,9 +226,10 @@
     protected void setUp()
 		throws Exception {
 		
-		System.out.println("==> Start  " + getName()); //$NON-NLS-1$
+		debugPrintln("==> Start  " + getName()); //$NON-NLS-1$
 		
 		if (fruitPackage == null) {
+			initRegistries();
 			initFruitPackage();
 		}
 		
@@ -239,7 +247,11 @@
 	}
 	
 	protected OCL createOCL() {
-		return OCL.newInstance(resourceSet);
+		OCL newInstance = OCL.newInstance(resourceSet);
+		String repairs = System.getProperty("org.eclipse.ocl.uml.tests.repairs"); //$NON-NLS-1$
+		if (repairs != null)
+			newInstance.setParserRepairCount(Integer.parseInt(repairs));
+		return newInstance;
 	}
 	
 	protected OCLHelper<Classifier, Operation, Property, Constraint> createHelper() {
@@ -249,14 +261,22 @@
 	@Override
     protected void tearDown()
 		throws Exception {
-		
+
+		fruitPackage = null;		// Prevent modifications from this test accumulating
+
 	    ocl.dispose();
         helper = null;
 	    ocl = null;
 	    
 	    disposeResourceSet();
-	    
-		System.out.println("==> Finish " + getName()); //$NON-NLS-1$
+
+		debugPrintln("==> Finish " + getName()); //$NON-NLS-1$
+	}
+	
+	public static void debugPrintln(String string) {
+		if (!noDebug) {
+			System.out.println(string);
+		}		
 	}
     
     protected final Classifier getMetaclass(String name) {
@@ -1000,10 +1020,8 @@
         
         fruitPackage = null;
 	}
-	
-	private static void initFruitPackage() {
-		URL url = null;
 
+	protected static URI getTestModelURI(String localFileName) {
 		try {
 			java.lang.Class<?> platformClass = java.lang.Class.forName("org.eclipse.core.runtime.Platform"); //$NON-NLS-1$
 			Method getBundle = platformClass.getDeclaredMethod("getBundle", new java.lang.Class[] {String.class}); //$NON-NLS-1$
@@ -1011,33 +1029,26 @@
 			
 			if (bundle != null) {
 				Method getEntry = bundle.getClass().getMethod("getEntry", new java.lang.Class[] {String.class}); //$NON-NLS-1$
-				url = (URL) getEntry.invoke(bundle, new Object[] {"/model/OCLTest.uml"}); //$NON-NLS-1$
+				URL url = (URL) getEntry.invoke(bundle, new Object[] {localFileName});
+				return URI.createURI(url.toString());
 			}
 		} catch (Exception e) {
 			// not running in Eclipse
 		}
-		
-		if (url == null) {
-			try {
-				Resource.Factory.Registry.INSTANCE.getExtensionToFactoryMap().put(
-						UMLResource.FILE_EXTENSION, UMLResource.Factory.INSTANCE);
-				String urlString = System.getProperty("org.eclipse.ocl.uml.tests.testmodel"); //$NON-NLS-1$
-				if (!urlString.startsWith("file:")) { //$NON-NLS-1$
-					urlString = "file:" + urlString; //$NON-NLS-1$
-				}
-				url = new URL(urlString);
-			} catch (MalformedURLException e) {
-				fail(e.getLocalizedMessage());
-			}
-		}
-		
+		String urlString = System.getProperty("org.eclipse.ocl.uml.tests"); //$NON-NLS-1$
+		if (urlString == null)
+			fail("'org.eclipse.ocl.uml.tests' property not defined; use the launch configuration to define it"); //$NON-NLS-1$
+		return URI.createFileURI(urlString + "/" + localFileName); //$NON-NLS-1$
+	}
+	
+	private static void initFruitPackage() {
+		URI uri = getTestModelURI("/model/OCLTest.uml"); //$NON-NLS-1$
 		disposeResourceSet();
 		
 		if (resourceSet == null) {
 		    resourceSet = new ResourceSetImpl();
 		}
-		
-		Resource res = resourceSet.getResource(URI.createURI(url.toString()), true);
+		Resource res = resourceSet.getResource(uri, true);
 		
 		fruitPackage = (Package) res.getContents().get(0);
 		
@@ -1109,4 +1120,30 @@
 		EPackage.Registry.INSTANCE.put(fruitEPackage.getNsURI(), fruitEPackage);
 		fruitEFactory = fruitEPackage.getEFactoryInstance();
 	}
+
+	protected static void initRegistries() {
+		Map<URI, URI> uriMap = URIMappingRegistryImpl.INSTANCE.map();		
+		URI oclStandardLibraryURI = URI.createURI(UMLEnvironment.OCL_STANDARD_LIBRARY_NS_URI);
+		if (uriMap.get(oclStandardLibraryURI) == null) {			// If no mapping registered then must set up standalone context
+			Resource.Factory.Registry.INSTANCE.getExtensionToFactoryMap().put(
+					UMLResource.FILE_EXTENSION, UMLResource.Factory.INSTANCE);
+			Environment.Registry.INSTANCE.registerEnvironment(
+					new UMLEnvironmentFactory().createEnvironment());
+			String oclLocation = System.getProperty("org.eclipse.ocl.uml"); //$NON-NLS-1$
+			if (oclLocation == null)
+				fail("'org.eclipse.ocl.uml' property not defined; use the launch configuration to define it"); //$NON-NLS-1$
+			oclLocation = "file:/" + oclLocation; //$NON-NLS-1$
+			uriMap.put(URI.createURI(UMLEnvironment.OCL_STANDARD_LIBRARY_NS_URI), URI.createURI(oclLocation + "/model/oclstdlib.uml")); //$NON-NLS-1$
+			String resourcesLocation = System.getProperty("org.eclipse.uml2.uml.resources"); //$NON-NLS-1$
+			if (resourcesLocation == null)
+				fail("'org.eclipse.uml2.uml.resources' property not defined; use the launch configuration to define it"); //$NON-NLS-1$
+			resourcesLocation = "file:/" + resourcesLocation; //$NON-NLS-1$
+			uriMap.put(URI.createURI("pathmap://UML_PROFILES/Standard.profile.uml"), URI.createURI(resourcesLocation + "/profiles/Standard.profile.uml")); //$NON-NLS-1$ //$NON-NLS-2$
+			uriMap.put(URI.createURI("pathmap://UML_PROFILES/Ecore.profile.uml"), URI.createURI(resourcesLocation + "/profiles/Ecore.profile.uml")); //$NON-NLS-1$ //$NON-NLS-2$
+			uriMap.put(URI.createURI("pathmap://UML_METAMODELS/UML.metamodel.uml"), URI.createURI(resourcesLocation + "/metamodels/UML.metamodel.uml")); //$NON-NLS-1$ //$NON-NLS-2$
+			uriMap.put(URI.createURI("pathmap://UML_LIBRARIES/UMLPrimitiveTypes.library.uml"), URI.createURI(resourcesLocation + "/libraries/UMLPrimitiveTypes.library.uml")); //$NON-NLS-1$ //$NON-NLS-2$
+			uriMap.put(URI.createURI("pathmap://UML_LIBRARIES/EcorePrimitiveTypes.library.uml"), URI.createURI(resourcesLocation + "/libraries/EcorePrimitiveTypes.library.uml")); //$NON-NLS-1$ //$NON-NLS-2$
+		}
+		OCLStandardLibraryImpl.INSTANCE.getClass();		// Ensure OCLStandardLibrary loaded before use
+	}
 }
Index: src/org/eclipse/ocl/uml/tests/UMLTest.java
===================================================================
RCS file: /cvsroot/modeling/org.eclipse.mdt/org.eclipse.ocl/tests/org.eclipse.ocl.uml.tests/src/org/eclipse/ocl/uml/tests/UMLTest.java,v
retrieving revision 1.6
diff -u -r1.6 UMLTest.java
--- src/org/eclipse/ocl/uml/tests/UMLTest.java	3 Jan 2008 15:28:30 -0000	1.6
+++ src/org/eclipse/ocl/uml/tests/UMLTest.java	19 Nov 2008 21:06:16 -0000
@@ -209,8 +209,7 @@
             fail("Should have failed to parse"); //$NON-NLS-1$
         } catch (AssertionFailedError e) {
             // success
-            System.out
-                .println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+        	debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
         }
 
         try {
@@ -222,8 +221,7 @@
             fail("Should have failed to parse"); //$NON-NLS-1$
         } catch (AssertionFailedError e) {
             // success
-            System.out
-                .println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+        	debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
         }
     }
 
@@ -241,8 +239,7 @@
             fail("Should have failed to parse"); //$NON-NLS-1$
         } catch (AssertionFailedError e) {
             // success
-            System.out
-                .println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+        	debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
         }
 
         try {
@@ -254,8 +251,7 @@
             fail("Should have failed to parse"); //$NON-NLS-1$
         } catch (AssertionFailedError e) {
             // success
-            System.out
-                .println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+        	debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
         }
     }
 
@@ -273,8 +269,7 @@
             fail("Should have failed to parse"); //$NON-NLS-1$
         } catch (AssertionFailedError e) {
             // success
-            System.out
-                .println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+        	debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
         }
 
         try {
@@ -286,8 +281,7 @@
             fail("Should have failed to parse"); //$NON-NLS-1$
         } catch (AssertionFailedError e) {
             // success
-            System.out
-                .println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+        	debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
         }
     }
 
@@ -305,8 +299,7 @@
             fail("Should have failed to parse"); //$NON-NLS-1$
         } catch (AssertionFailedError e) {
             // success
-            System.out
-                .println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+        	debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
         }
 
         try {
@@ -318,8 +311,7 @@
             fail("Should have failed to parse"); //$NON-NLS-1$
         } catch (AssertionFailedError e) {
             // success
-            System.out
-                .println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+        	debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
         }
     }
 
@@ -484,6 +476,7 @@
         instancePackage = null;
         instanceResource.unload();
         resourceSet.getResources().remove(instanceResource);
+        instanceResource = null;
 
         super.tearDown();
     }
Index: src/org/eclipse/ocl/uml/tests/PrimitiveTypesTest.java
===================================================================
RCS file: /cvsroot/modeling/org.eclipse.mdt/org.eclipse.ocl/tests/org.eclipse.ocl.uml.tests/src/org/eclipse/ocl/uml/tests/PrimitiveTypesTest.java,v
retrieving revision 1.1
diff -u -r1.1 PrimitiveTypesTest.java
--- src/org/eclipse/ocl/uml/tests/PrimitiveTypesTest.java	25 Jan 2007 18:41:55 -0000	1.1
+++ src/org/eclipse/ocl/uml/tests/PrimitiveTypesTest.java	19 Nov 2008 21:06:14 -0000
@@ -113,7 +113,7 @@
             fail("Should have failed to parse or validate"); //$NON-NLS-1$
         } catch (ParserException e) {
             // Success
-            System.out.println("Got expected exception: " + e.getLocalizedMessage()); //$NON-NLS-1$
+            debugPrintln("Got expected exception: " + e.getLocalizedMessage()); //$NON-NLS-1$
         }
         
         try {
@@ -121,7 +121,7 @@
             fail("Should have failed to parse or validate"); //$NON-NLS-1$
         } catch (ParserException e) {
             // Success
-            System.out.println("Got expected exception: " + e.getLocalizedMessage()); //$NON-NLS-1$
+            debugPrintln("Got expected exception: " + e.getLocalizedMessage()); //$NON-NLS-1$
         }
     }
     
Index: src/org/eclipse/ocl/uml/tests/OperationConstraintsTest.java
===================================================================
RCS file: /cvsroot/modeling/org.eclipse.mdt/org.eclipse.ocl/tests/org.eclipse.ocl.uml.tests/src/org/eclipse/ocl/uml/tests/OperationConstraintsTest.java,v
retrieving revision 1.4
diff -u -r1.4 OperationConstraintsTest.java
--- src/org/eclipse/ocl/uml/tests/OperationConstraintsTest.java	28 Sep 2008 17:32:44 -0000	1.4
+++ src/org/eclipse/ocl/uml/tests/OperationConstraintsTest.java	19 Nov 2008 21:06:14 -0000
@@ -139,7 +139,7 @@
 		} catch (AssertionFailedError e) {
 			// success
 			err = e;
-			System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+			debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
 		}
 		
 		assertNotNull("Should not have succeeded in validating illegal @pre", err); //$NON-NLS-1$
@@ -160,7 +160,7 @@
 		} catch (AssertionFailedError e) {
 			// success
 			err = e;
-			System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+			debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
 		}
 		
 		assertNotNull("Should not have succeeded in validating illegal @pre", err); //$NON-NLS-1$
@@ -180,7 +180,7 @@
 				"endpackage"); //$NON-NLS-1$
 		} catch (AssertionFailedError e) {
 			err = e;
-			System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+			debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
 		}
 		
 		assertNotNull("Should not have succeeded in validating illegal @pre", err); //$NON-NLS-1$
@@ -213,7 +213,7 @@
 				"endpackage"); //$NON-NLS-1$
 		} catch (AssertionFailedError e) {
 			err = e;
-			System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+			debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
 		}
 		
 		assertNotNull(err);
@@ -234,7 +234,7 @@
 				"endpackage"); //$NON-NLS-1$
 		} catch (AssertionFailedError e) {
 			err = e;
-			System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+			debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
 		}
 		
 		assertNotNull(err);
@@ -248,7 +248,7 @@
 				"endpackage"); //$NON-NLS-1$
 		} catch (AssertionFailedError e) {
 			err = e;
-			System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+			debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
 		}
 		
 		assertNotNull(err);
@@ -281,7 +281,7 @@
 				"endpackage"); //$NON-NLS-1$
 		} catch (AssertionFailedError e) {
 			err = e;
-			System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+			debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
 		}
 		
 		assertNotNull(err);
Index: src/org/eclipse/ocl/uml/tests/OCLDocumentTest.java
===================================================================
RCS file: /cvsroot/modeling/org.eclipse.mdt/org.eclipse.ocl/tests/org.eclipse.ocl.uml.tests/src/org/eclipse/ocl/uml/tests/OCLDocumentTest.java,v
retrieving revision 1.3
diff -u -r1.3 OCLDocumentTest.java
--- src/org/eclipse/ocl/uml/tests/OCLDocumentTest.java	15 Feb 2008 05:20:16 -0000	1.3
+++ src/org/eclipse/ocl/uml/tests/OCLDocumentTest.java	19 Nov 2008 21:06:14 -0000
@@ -30,6 +30,7 @@
 
 import org.eclipse.emf.common.util.BasicEList;
 import org.eclipse.emf.common.util.EList;
+import org.eclipse.emf.common.util.URI;
 import org.eclipse.emf.ecore.EObject;
 import org.eclipse.ocl.Environment;
 import org.eclipse.ocl.OCLInput;
@@ -241,8 +242,8 @@
 		instancePackage = umlf.createPackage();
 		constraints = new java.util.HashMap<String, Constraint>();
 		
-		URL url = new URL(
-				"platform:/plugin/org.eclipse.ocl.uml.tests/model/test_constraints.ocl"); //$NON-NLS-1$
+		URI uri = getTestModelURI("/model/test_constraints.ocl"); //$NON-NLS-1$
+		URL url = new URL(uri.toString());
 		InputStream is = url.openStream();
 		List<Constraint> parsed = ocl.parse(new OCLInput(is));
 		is.close();
Index: src/org/eclipse/ocl/uml/tests/FeatureRedefinitionTest.java
===================================================================
RCS file: /cvsroot/modeling/org.eclipse.mdt/org.eclipse.ocl/tests/org.eclipse.ocl.uml.tests/src/org/eclipse/ocl/uml/tests/FeatureRedefinitionTest.java,v
retrieving revision 1.1
diff -u -r1.1 FeatureRedefinitionTest.java
--- src/org/eclipse/ocl/uml/tests/FeatureRedefinitionTest.java	30 Aug 2008 23:33:11 -0000	1.1
+++ src/org/eclipse/ocl/uml/tests/FeatureRedefinitionTest.java	19 Nov 2008 21:06:12 -0000
@@ -169,6 +169,7 @@
 
 	protected void setUp() {
 
+		AbstractTestSuite.debugPrintln("==> Start  " + getName()); //$NON-NLS-1$
 		UMLFactory f = UMLFactory.eINSTANCE;
 		
 		rset = new ResourceSetImpl();
@@ -235,7 +236,20 @@
 		}
 		
 		ocl.dispose();
+		rset = null;
+		helper = null;
+		ocl = null;
+		c3 = null;
+		op3 = null;
+		attr3 = null;
+		c2 = null;
+		attr2 = null;
+		op2 = null;
+		c1 = null;
+		attr1 = null;
+		op1 = null;
 		
 		super.tearDown();
+		AbstractTestSuite.debugPrintln("==> Finish " + getName()); //$NON-NLS-1$
 	}
 }
Index: src/org/eclipse/ocl/uml/tests/StatesTest.java
===================================================================
RCS file: /cvsroot/modeling/org.eclipse.mdt/org.eclipse.ocl/tests/org.eclipse.ocl.uml.tests/src/org/eclipse/ocl/uml/tests/StatesTest.java,v
retrieving revision 1.2
diff -u -r1.2 StatesTest.java
--- src/org/eclipse/ocl/uml/tests/StatesTest.java	14 Feb 2007 14:46:16 -0000	1.2
+++ src/org/eclipse/ocl/uml/tests/StatesTest.java	19 Nov 2008 21:06:16 -0000
@@ -70,7 +70,7 @@
 			fail("Should have failed to parse non-existent state"); //$NON-NLS-1$
 		} catch (Exception e) {
 			// success
-			System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+			debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
 		}
 	}
 	
@@ -88,7 +88,7 @@
 			fail("Should have failed to parse empty arglist"); //$NON-NLS-1$
 		} catch (Exception e) {
 			// success
-			System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+			debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
 		}
 		
 		try {
@@ -99,7 +99,7 @@
 			fail("Should have failed to parse overabundant arglist"); //$NON-NLS-1$
 		} catch (Exception e) {
 			// success
-			System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+			debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
 		}
 		
 		try {
@@ -110,7 +110,7 @@
 			fail("Should have failed to parse arg of wrong type"); //$NON-NLS-1$
 		} catch (Exception e) {
 			// success
-			System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+			debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
 		}
 		
 		try {
@@ -121,7 +121,7 @@
 			fail("Should have failed to parse arg of wrong type"); //$NON-NLS-1$
 		} catch (Exception e) {
 			// success
-			System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+			debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
 		}
 	}
 	
@@ -202,7 +202,7 @@
 				fail("Should have failed to parse ambiguous state"); //$NON-NLS-1$
 			} catch (Exception e) {
 				// success
-				System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+				debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
 			}
 		} finally {
 			machine2.destroy();
Index: src/org/eclipse/ocl/uml/tests/ComparisonTest.java
===================================================================
RCS file: /cvsroot/modeling/org.eclipse.mdt/org.eclipse.ocl/tests/org.eclipse.ocl.uml.tests/src/org/eclipse/ocl/uml/tests/ComparisonTest.java,v
retrieving revision 1.6
diff -u -r1.6 ComparisonTest.java
--- src/org/eclipse/ocl/uml/tests/ComparisonTest.java	10 Sep 2008 18:44:04 -0000	1.6
+++ src/org/eclipse/ocl/uml/tests/ComparisonTest.java	19 Nov 2008 21:06:11 -0000
@@ -703,7 +703,7 @@
             fail("Should not have parsed"); //$NON-NLS-1$
         } catch (ParserException e) {
             // success
-            System.out.println("Got expected exception: " + e.getLocalizedMessage()); //$NON-NLS-1$
+            debugPrintln("Got expected exception: " + e.getLocalizedMessage()); //$NON-NLS-1$
         } catch (Exception e) {
             fail("Unexpected exception during parse: " + e.getLocalizedMessage()); //$NON-NLS-1$
         }
@@ -845,6 +845,32 @@
 		list.add(new Numero(6));
 		list.add(new Numero(2));
 	}
+
+	@Override
+	protected void tearDown() throws Exception {
+		// delete customizations, to allow garbage collection
+		pkg = null;
+		thingType = null;
+		values = null;
+		valueType = null;
+		numeroType = null;
+		numeros = null;
+		bdValue = null;
+		biValue = null;
+		epkg = null;
+		efactory = null;
+		ethingType = null;
+		evalues = null;
+		evalueType = null;
+		enumeroType = null;
+		enumeros = null;
+		ebdValue = null;
+		ebiValue = null;
+		comparable = null;
+		thing = null;
+
+		super.tearDown();		
+	}
 	
 	private static class Value implements Comparable<Value> {
 		private final String value;
Index: src/org/eclipse/ocl/uml/tests/RegressionTest.java
===================================================================
RCS file: /cvsroot/modeling/org.eclipse.mdt/org.eclipse.ocl/tests/org.eclipse.ocl.uml.tests/src/org/eclipse/ocl/uml/tests/RegressionTest.java,v
retrieving revision 1.6
diff -u -r1.6 RegressionTest.java
--- src/org/eclipse/ocl/uml/tests/RegressionTest.java	28 Sep 2008 17:32:44 -0000	1.6
+++ src/org/eclipse/ocl/uml/tests/RegressionTest.java	19 Nov 2008 21:06:16 -0000
@@ -159,7 +159,7 @@
 			} catch (AssertionFailedError e) {
 				// success
 				err = e;
-				System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+				debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
 			}
 			
 			assertNotNull("Should not have parsed.", err); //$NON-NLS-1$
@@ -379,7 +379,7 @@
 		} catch (AssertionFailedError e) {
 			// success
 			err = e;
-			System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+			debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
 		}
 		
 		assertNotNull("Should not have succeeded in validating illegal oclIsNew", err); //$NON-NLS-1$
@@ -402,7 +402,7 @@
 		} catch (AssertionFailedError e) {
 			// success
 			err = e;
-			System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+			debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
 		}
 		
 		assertNotNull("Should not have succeeded in validating illegal oclIsNew", err); //$NON-NLS-1$
@@ -669,7 +669,7 @@
 		} catch (AssertionFailedError e) {
 			// this is expected (success case)
 			err = e;
-			System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+			debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
 		}
 		assertNotNull("Parse should have failed", err); //$NON-NLS-1$
 		
@@ -698,7 +698,7 @@
 		} catch (AssertionFailedError e) {
 			// this is expected (success case)
 			err = e;
-			System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+			debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
 		}
 		assertNotNull("Parse should have failed", err); //$NON-NLS-1$
 		
@@ -727,7 +727,7 @@
 		} catch (AssertionFailedError e) {
 			// this is expected (success case)
 			err = e;
-			System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+			debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
 		}
 		assertNotNull("Parse should have failed", err); //$NON-NLS-1$
 		
@@ -756,7 +756,7 @@
 		} catch (AssertionFailedError e) {
 			// this is expected (success case)
 			err = e;
-			System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+			debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
 		}
 		assertNotNull("Parse should have failed", err); //$NON-NLS-1$
 		
@@ -830,7 +830,7 @@
 		} catch (AssertionFailedError e) {
 			// this is expected (success case)
 			err = e;
-			System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+			debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
 		}
 		assertNotNull("Parse should have failed", err); //$NON-NLS-1$
 	}
@@ -850,7 +850,7 @@
 			fail("Parse should have failed"); //$NON-NLS-1$
 		} catch (Exception e) {
 			// success
-			System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+			debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
 		}
 	}
 	
@@ -869,7 +869,7 @@
 			fail("Parse should have failed"); //$NON-NLS-1$
 		} catch (Exception e) {
 			// success
-			System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+			debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
 		}
 	}
 	
@@ -911,7 +911,7 @@
 		} catch (AssertionFailedError e) {
 			// this is expected (success case)
 			err = e;
-			System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+			debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
 		}
 		assertNotNull("Parse should have failed", err); //$NON-NLS-1$
 	}
@@ -1172,7 +1172,7 @@
 		} catch (AssertionFailedError e) {
 			// this is expected (success case)
 			err = e;
-			System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+			debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
 		}
 		assertNotNull("Parse should have failed", err); //$NON-NLS-1$
 	}
@@ -1253,7 +1253,7 @@
 		} catch (AssertionFailedError e) {
 			// this is expected (success case)
 			err = e;
-			System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+			debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
 		}
 		assertNotNull("Parse should have failed", err); //$NON-NLS-1$
 		
Index: src/org/eclipse/ocl/uml/tests/ValidationTest.java
===================================================================
RCS file: /cvsroot/modeling/org.eclipse.mdt/org.eclipse.ocl/tests/org.eclipse.ocl.uml.tests/src/org/eclipse/ocl/uml/tests/ValidationTest.java,v
retrieving revision 1.2
diff -u -r1.2 ValidationTest.java
--- src/org/eclipse/ocl/uml/tests/ValidationTest.java	14 Feb 2007 14:46:16 -0000	1.2
+++ src/org/eclipse/ocl/uml/tests/ValidationTest.java	19 Nov 2008 21:06:16 -0000
@@ -56,7 +56,7 @@
 			fail("Should not have successfully validated"); //$NON-NLS-1$
 		} catch (SemanticException e) {
 			// success
-			System.out.println("Got expected exception: " + e.getLocalizedMessage()); //$NON-NLS-1$
+			debugPrintln("Got expected exception: " + e.getLocalizedMessage()); //$NON-NLS-1$
 		}
 	}
 
Index: src/org/eclipse/ocl/uml/helper/tests/ParsingTest.java
===================================================================
RCS file: /cvsroot/modeling/org.eclipse.mdt/org.eclipse.ocl/tests/org.eclipse.ocl.uml.tests/src/org/eclipse/ocl/uml/helper/tests/ParsingTest.java,v
retrieving revision 1.2
diff -u -r1.2 ParsingTest.java
--- src/org/eclipse/ocl/uml/helper/tests/ParsingTest.java	14 Feb 2007 14:46:17 -0000	1.2
+++ src/org/eclipse/ocl/uml/helper/tests/ParsingTest.java	19 Nov 2008 21:06:08 -0000
@@ -89,7 +89,7 @@
 			fail("Parse should not have succeeded"); //$NON-NLS-1$
 		} catch (Exception e) {
 			// success case
-			System.out.println("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
+			debugPrintln("Got expected error: " + e.getLocalizedMessage()); //$NON-NLS-1$
 		}
 	}
 	
Index: src/org/eclipse/ocl/uml/helper/tests/SyntaxHelpTest.java
===================================================================
RCS file: /cvsroot/modeling/org.eclipse.mdt/org.eclipse.ocl/tests/org.eclipse.ocl.uml.tests/src/org/eclipse/ocl/uml/helper/tests/SyntaxHelpTest.java,v
retrieving revision 1.2
diff -u -r1.2 SyntaxHelpTest.java
--- src/org/eclipse/ocl/uml/helper/tests/SyntaxHelpTest.java	14 Feb 2007 14:46:17 -0000	1.2
+++ src/org/eclipse/ocl/uml/helper/tests/SyntaxHelpTest.java	19 Nov 2008 21:06:09 -0000
@@ -432,7 +432,7 @@
 					ConstraintKind.INVARIANT, "self.oclIsInState("); //$NON-NLS-1$
 			dumpChoices(choices);
 			
-			System.out.println("----"); //$NON-NLS-1$
+			debugPrintln("----"); //$NON-NLS-1$
 			
 			choices = helper.getSyntaxHelp(
 					ConstraintKind.INVARIANT, "self.oclIsInState(Bad::"); //$NON-NLS-1$
@@ -465,7 +465,7 @@
 		assertNotNull(choices);
 		
 		for (Choice next : choices) {
-			System.out.println("    " + next); //$NON-NLS-1$
+			debugPrintln("    " + next); //$NON-NLS-1$
 		}
 	}
 }
Index: launches/org.eclipse.ocl.uml.tests (Plugin).launch
===================================================================
RCS file: launches/org.eclipse.ocl.uml.tests (Plugin).launch
diff -N launches/org.eclipse.ocl.uml.tests (Plugin).launch
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ launches/org.eclipse.ocl.uml.tests (Plugin).launch	1 Jan 1970 00:00:00 -0000
@@ -0,0 +1,38 @@
+<?xml version="1.0" encoding="UTF-8" standalone="no"?>
+<launchConfiguration type="org.eclipse.pde.ui.JunitLaunchConfig">
+<booleanAttribute key="append.args" value="true"/>
+<stringAttribute key="application" value="org.eclipse.pde.junit.runtime.coretestapplication"/>
+<booleanAttribute key="askclear" value="false"/>
+<booleanAttribute key="automaticAdd" value="true"/>
+<booleanAttribute key="automaticValidate" value="false"/>
+<stringAttribute key="bootstrap" value=""/>
+<booleanAttribute key="clearConfig" value="true"/>
+<booleanAttribute key="clearws" value="true"/>
+<booleanAttribute key="clearwslog" value="false"/>
+<stringAttribute key="configLocation" value="${workspace_loc}/.metadata/.plugins/org.eclipse.pde.core/pde-junit"/>
+<booleanAttribute key="default" value="true"/>
+<booleanAttribute key="includeOptional" value="true"/>
+<stringAttribute key="location" value="${workspace_loc}/../junit-workspace"/>
+<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_PATHS">
+<listEntry value="/org.eclipse.ocl.uml.tests/src/org/eclipse/ocl/uml/tests/AllTests.java"/>
+</listAttribute>
+<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_TYPES">
+<listEntry value="1"/>
+</listAttribute>
+<stringAttribute key="org.eclipse.jdt.junit.CONTAINER" value=""/>
+<booleanAttribute key="org.eclipse.jdt.junit.KEEPRUNNING_ATTR" value="false"/>
+<stringAttribute key="org.eclipse.jdt.junit.TESTNAME" value=""/>
+<stringAttribute key="org.eclipse.jdt.junit.TEST_KIND" value="org.eclipse.jdt.junit.loader.junit3"/>
+<stringAttribute key="org.eclipse.jdt.launching.MAIN_TYPE" value="org.eclipse.ocl.uml.tests.AllTests"/>
+<stringAttribute key="org.eclipse.jdt.launching.PROGRAM_ARGUMENTS" value="-os ${target.os} -ws ${target.ws} -arch ${target.arch} -nl ${target.nl}"/>
+<stringAttribute key="org.eclipse.jdt.launching.PROJECT_ATTR" value="org.eclipse.ocl.uml.tests"/>
+<stringAttribute key="org.eclipse.jdt.launching.SOURCE_PATH_PROVIDER" value="org.eclipse.pde.ui.workbenchClasspathProvider"/>
+<stringAttribute key="org.eclipse.jdt.launching.VM_ARGUMENTS" value="-Dorg.eclipse.ocl.uml.tests.nodebug=true&#13;&#10;-ea"/>
+<stringAttribute key="pde.version" value="3.3"/>
+<stringAttribute key="product" value=""/>
+<booleanAttribute key="show_selected_only" value="false"/>
+<booleanAttribute key="tracing" value="false"/>
+<booleanAttribute key="useDefaultConfig" value="true"/>
+<booleanAttribute key="useDefaultConfigArea" value="false"/>
+<booleanAttribute key="useProduct" value="false"/>
+</launchConfiguration>
Index: launches/org.eclipse.ocl.uml.tests (Standalone).launch
===================================================================
RCS file: launches/org.eclipse.ocl.uml.tests (Standalone).launch
diff -N launches/org.eclipse.ocl.uml.tests (Standalone).launch
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ launches/org.eclipse.ocl.uml.tests (Standalone).launch	1 Jan 1970 00:00:00 -0000
@@ -0,0 +1,22 @@
+<?xml version="1.0" encoding="UTF-8" standalone="no"?>
+<launchConfiguration type="org.eclipse.jdt.junit.launchconfig">
+<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_PATHS">
+<listEntry value="/org.eclipse.ocl.uml.tests/src/org/eclipse/ocl/uml/tests/AllTests.java"/>
+</listAttribute>
+<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_TYPES">
+<listEntry value="1"/>
+</listAttribute>
+<stringAttribute key="org.eclipse.hyades.trace.ui.ATTR_DATA_COLLECTOR" value="org.eclipse.tptp.trace.jvmti.jvmtiMechanism:org.eclipse.tptp.analysisType.jvmti.heap"/>
+<stringAttribute key="org.eclipse.hyades.trace.ui.ATTR_DESTINATION_FILE" value="C:\Temp\uml.trcxml"/>
+<stringAttribute key="org.eclipse.hyades.trace.ui.ATTR_DESTINATION_MONITOR" value="DefaultMonitor"/>
+<stringAttribute key="org.eclipse.hyades.trace.ui.ATTR_DESTINATION_PROJECT" value="ProfileProject"/>
+<booleanAttribute key="org.eclipse.hyades.trace.ui.ATTR_PROFILE_TO_FILE" value="true"/>
+<stringAttribute key="org.eclipse.hyades.trace.ui.ATTR_PROFILING_SET" value="tptp-dummy-profiling-set-org.eclipse.ocl.uml.tests (Standalone)"/>
+<stringAttribute key="org.eclipse.jdt.junit.CONTAINER" value=""/>
+<booleanAttribute key="org.eclipse.jdt.junit.KEEPRUNNING_ATTR" value="false"/>
+<stringAttribute key="org.eclipse.jdt.junit.TESTNAME" value=""/>
+<stringAttribute key="org.eclipse.jdt.junit.TEST_KIND" value="org.eclipse.jdt.junit.loader.junit3"/>
+<stringAttribute key="org.eclipse.jdt.launching.MAIN_TYPE" value="org.eclipse.ocl.uml.tests.AllTests"/>
+<stringAttribute key="org.eclipse.jdt.launching.PROJECT_ATTR" value="org.eclipse.ocl.uml.tests"/>
+<stringAttribute key="org.eclipse.jdt.launching.VM_ARGUMENTS" value="-Dorg.eclipse.ocl.uml.tests=${resource_loc:/org.eclipse.ocl.uml.tests}&#13;&#10;-Dorg.eclipse.ocl.uml=${resource_loc:/org.eclipse.ocl.uml}&#13;&#10;-Dorg.eclipse.uml2.uml.resources=${resource_loc:/org.eclipse.uml2.uml.resources}&#13;&#10;-Dorg.eclipse.ocl.uml.tests.nodebug=true&#13;&#10;-ea"/>
+</launchConfiguration>
Index: launches/org.eclipse.ocl.uml.tests (Standalone with debug).launch
===================================================================
RCS file: launches/org.eclipse.ocl.uml.tests (Standalone with debug).launch
diff -N launches/org.eclipse.ocl.uml.tests (Standalone with debug).launch
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ launches/org.eclipse.ocl.uml.tests (Standalone with debug).launch	1 Jan 1970 00:00:00 -0000
@@ -0,0 +1,24 @@
+<?xml version="1.0" encoding="UTF-8" standalone="no"?>
+<launchConfiguration type="org.eclipse.jdt.junit.launchconfig">
+<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_PATHS">
+<listEntry value="/org.eclipse.ocl.uml.tests/src/org/eclipse/ocl/uml/tests/AllTests.java"/>
+</listAttribute>
+<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_TYPES">
+<listEntry value="1"/>
+</listAttribute>
+<stringAttribute key="org.eclipse.hyades.trace.ui.ATTR_DATA_COLLECTOR" value="org.eclipse.tptp.trace.jvmti.jvmtiMechanism:org.eclipse.tptp.analysisType.jvmti.heap"/>
+<stringAttribute key="org.eclipse.hyades.trace.ui.ATTR_DESTINATION_FILE" value="C:\Temp\uml2.trcxml"/>
+<stringAttribute key="org.eclipse.hyades.trace.ui.ATTR_DESTINATION_MONITOR" value="DefaultMonitor"/>
+<stringAttribute key="org.eclipse.hyades.trace.ui.ATTR_DESTINATION_PROJECT" value="ProfileProject"/>
+<booleanAttribute key="org.eclipse.hyades.trace.ui.ATTR_PROFILE_TO_FILE" value="true"/>
+<stringAttribute key="org.eclipse.hyades.trace.ui.ATTR_PROFILING_SET" value="tptp-dummy-profiling-set-org.eclipse.ocl.uml.tests (Standalone with debug)"/>
+<stringAttribute key="org.eclipse.jdt.junit.CONTAINER" value=""/>
+<booleanAttribute key="org.eclipse.jdt.junit.KEEPRUNNING_ATTR" value="false"/>
+<stringAttribute key="org.eclipse.jdt.junit.TESTNAME" value=""/>
+<stringAttribute key="org.eclipse.jdt.junit.TEST_KIND" value="org.eclipse.jdt.junit.loader.junit3"/>
+<stringAttribute key="org.eclipse.jdt.launching.MAIN_TYPE" value="org.eclipse.ocl.uml.tests.AllTests"/>
+<stringAttribute key="org.eclipse.jdt.launching.PROJECT_ATTR" value="org.eclipse.ocl.uml.tests"/>
+<stringAttribute key="org.eclipse.jdt.launching.VM_ARGUMENTS" value="-Dorg.eclipse.ocl.uml.tests=${resource_loc:/org.eclipse.ocl.uml.tests}&#13;&#10;-Dorg.eclipse.ocl.uml=${resource_loc:/org.eclipse.ocl.uml}&#13;&#10;-Dorg.eclipse.uml2.uml.resources=${resource_loc:/org.eclipse.uml2.uml.resources}&#13;&#10;-ea"/>
+<booleanAttribute key="org.eclipse.tptp.platform.jvmti.client.ATTR_EXEC_OBJ_ALLOC_SITE" value="false"/>
+<booleanAttribute key="org.eclipse.tptp.platform.jvmti.client.ATTR_HEAP_COLLECT_INSTANCE" value="true"/>
+</launchConfiguration>
Index: launches/org.eclipse.ocl.uml.tests (Plugin with debug).launch
===================================================================
RCS file: launches/org.eclipse.ocl.uml.tests (Plugin with debug).launch
diff -N launches/org.eclipse.ocl.uml.tests (Plugin with debug).launch
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ launches/org.eclipse.ocl.uml.tests (Plugin with debug).launch	1 Jan 1970 00:00:00 -0000
@@ -0,0 +1,38 @@
+<?xml version="1.0" encoding="UTF-8" standalone="no"?>
+<launchConfiguration type="org.eclipse.pde.ui.JunitLaunchConfig">
+<booleanAttribute key="append.args" value="true"/>
+<stringAttribute key="application" value="org.eclipse.pde.junit.runtime.coretestapplication"/>
+<booleanAttribute key="askclear" value="false"/>
+<booleanAttribute key="automaticAdd" value="true"/>
+<booleanAttribute key="automaticValidate" value="false"/>
+<stringAttribute key="bootstrap" value=""/>
+<booleanAttribute key="clearConfig" value="true"/>
+<booleanAttribute key="clearws" value="true"/>
+<booleanAttribute key="clearwslog" value="false"/>
+<stringAttribute key="configLocation" value="${workspace_loc}/.metadata/.plugins/org.eclipse.pde.core/pde-junit"/>
+<booleanAttribute key="default" value="true"/>
+<booleanAttribute key="includeOptional" value="true"/>
+<stringAttribute key="location" value="${workspace_loc}/../junit-workspace"/>
+<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_PATHS">
+<listEntry value="/org.eclipse.ocl.uml.tests/src/org/eclipse/ocl/uml/tests/AllTests.java"/>
+</listAttribute>
+<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_TYPES">
+<listEntry value="1"/>
+</listAttribute>
+<stringAttribute key="org.eclipse.jdt.junit.CONTAINER" value=""/>
+<booleanAttribute key="org.eclipse.jdt.junit.KEEPRUNNING_ATTR" value="false"/>
+<stringAttribute key="org.eclipse.jdt.junit.TESTNAME" value=""/>
+<stringAttribute key="org.eclipse.jdt.junit.TEST_KIND" value="org.eclipse.jdt.junit.loader.junit3"/>
+<stringAttribute key="org.eclipse.jdt.launching.MAIN_TYPE" value="org.eclipse.ocl.uml.tests.AllTests"/>
+<stringAttribute key="org.eclipse.jdt.launching.PROGRAM_ARGUMENTS" value="-os ${target.os} -ws ${target.ws} -arch ${target.arch} -nl ${target.nl}"/>
+<stringAttribute key="org.eclipse.jdt.launching.PROJECT_ATTR" value="org.eclipse.ocl.uml.tests"/>
+<stringAttribute key="org.eclipse.jdt.launching.SOURCE_PATH_PROVIDER" value="org.eclipse.pde.ui.workbenchClasspathProvider"/>
+<stringAttribute key="org.eclipse.jdt.launching.VM_ARGUMENTS" value="-ea"/>
+<stringAttribute key="pde.version" value="3.3"/>
+<stringAttribute key="product" value=""/>
+<booleanAttribute key="show_selected_only" value="false"/>
+<booleanAttribute key="tracing" value="false"/>
+<booleanAttribute key="useDefaultConfig" value="true"/>
+<booleanAttribute key="useDefaultConfigArea" value="false"/>
+<booleanAttribute key="useProduct" value="false"/>
+</launchConfiguration>
Index: launches/org.eclipse.ocl.uml.tests (Standalone Backtracking).launch
===================================================================
RCS file: launches/org.eclipse.ocl.uml.tests (Standalone Backtracking).launch
diff -N launches/org.eclipse.ocl.uml.tests (Standalone Backtracking).launch
--- /dev/null	1 Jan 1970 00:00:00 -0000
+++ launches/org.eclipse.ocl.uml.tests (Standalone Backtracking).launch	1 Jan 1970 00:00:00 -0000
@@ -0,0 +1,22 @@
+<?xml version="1.0" encoding="UTF-8" standalone="no"?>
+<launchConfiguration type="org.eclipse.jdt.junit.launchconfig">
+<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_PATHS">
+<listEntry value="/org.eclipse.ocl.uml.tests/src/org/eclipse/ocl/uml/tests/AllTests.java"/>
+</listAttribute>
+<listAttribute key="org.eclipse.debug.core.MAPPED_RESOURCE_TYPES">
+<listEntry value="1"/>
+</listAttribute>
+<stringAttribute key="org.eclipse.hyades.trace.ui.ATTR_DATA_COLLECTOR" value="org.eclipse.tptp.trace.jvmti.jvmtiMechanism:org.eclipse.tptp.analysisType.jvmti.heap"/>
+<stringAttribute key="org.eclipse.hyades.trace.ui.ATTR_DESTINATION_FILE" value="C:\Temp\uml.trcxml"/>
+<stringAttribute key="org.eclipse.hyades.trace.ui.ATTR_DESTINATION_MONITOR" value="DefaultMonitor"/>
+<stringAttribute key="org.eclipse.hyades.trace.ui.ATTR_DESTINATION_PROJECT" value="ProfileProject"/>
+<booleanAttribute key="org.eclipse.hyades.trace.ui.ATTR_PROFILE_TO_FILE" value="true"/>
+<stringAttribute key="org.eclipse.hyades.trace.ui.ATTR_PROFILING_SET" value="tptp-dummy-profiling-set-org.eclipse.ocl.uml.tests (Standalone)"/>
+<stringAttribute key="org.eclipse.jdt.junit.CONTAINER" value=""/>
+<booleanAttribute key="org.eclipse.jdt.junit.KEEPRUNNING_ATTR" value="false"/>
+<stringAttribute key="org.eclipse.jdt.junit.TESTNAME" value=""/>
+<stringAttribute key="org.eclipse.jdt.junit.TEST_KIND" value="org.eclipse.jdt.junit.loader.junit3"/>
+<stringAttribute key="org.eclipse.jdt.launching.MAIN_TYPE" value="org.eclipse.ocl.uml.tests.AllTests"/>
+<stringAttribute key="org.eclipse.jdt.launching.PROJECT_ATTR" value="org.eclipse.ocl.uml.tests"/>
+<stringAttribute key="org.eclipse.jdt.launching.VM_ARGUMENTS" value="-Dorg.eclipse.ocl.uml.tests=${resource_loc:/org.eclipse.ocl.uml.tests}&#13;&#10;-Dorg.eclipse.ocl.uml=${resource_loc:/org.eclipse.ocl.uml}&#13;&#10;-Dorg.eclipse.uml2.uml.resources=${resource_loc:/org.eclipse.uml2.uml.resources}&#13;&#10;-Dorg.eclipse.ocl.uml.tests.nodebug=true&#13;&#10;-Dorg.eclipse.ocl.uml.tests.repairs=100&#13;&#10;-ea"/>
+</launchConfiguration>
