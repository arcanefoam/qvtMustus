/**
* Essential OCL Grammar
* <copyright>
*
* Copyright (c) 2005, 2009 IBM Corporation and others.
* All rights reserved.   This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*   IBM - Initial API and implementation
*   E.D.Willink - Elimination of some shift-reduce conflicts
*   E.D.Willink - Remove unnecessary warning suppression
*   E.D.Willink - Bugs 184048, 225493, 243976, 259818, 282882, 287993, 288040, 292112
*   Borland - Bug 242880
*   E.D.Willink - Extended API and implementation for QVTc
*
* </copyright>
*
* $Id: QVTcParserprs.java,v 1.11 2009/11/10 06:12:07 ewillink Exp $
*/

package org.eclipse.qvt.declarative.parser.qvtcore;

public class QVTcParserprs implements lpg.lpgjavaruntime.ParseTable, QVTcParsersym {

    public interface IsKeyword {
        public final static byte isKeyword[] = {0,
            0,0,0,0,0,0,0,0,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,0,0,1,1,1,1,1,1,
            1,1,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,1,1,
            1,0,1,1,1,0,0,1,1,1,
            1,1,1,1,0,1,1,1,1,1,
            1,1,1,0,0,0
        };
    };
    public final static byte isKeyword[] = IsKeyword.isKeyword;
    public final boolean isKeyword(int index) { return isKeyword[index] != 0; }

    public interface BaseCheck {
        public final static short baseCheck[] = {0,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,1,1,3,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,1,1,1,4,4,0,1,1,
            3,1,3,3,5,1,1,1,1,1,
            1,1,1,1,1,1,1,4,4,0,
            1,1,3,1,1,3,1,1,1,1,
            1,1,1,4,1,3,1,1,1,2,
            1,1,1,1,1,1,1,1,1,1,
            1,1,8,10,10,8,10,1,1,1,
            5,6,8,8,7,7,5,6,9,1,
            4,6,4,7,5,0,0,1,1,3,
            1,1,1,1,1,1,1,1,1,3,
            1,3,1,1,1,3,1,3,1,1,
            1,3,1,3,1,1,1,3,1,3,
            1,1,1,3,3,1,3,3,1,1,
            1,3,3,3,3,1,3,3,3,3,
            1,1,1,3,3,1,3,3,1,1,
            1,3,3,1,3,3,1,1,1,2,
            2,1,2,2,1,1,1,1,1,1,
            3,7,4,1,3,1,1,1,1,4,
            2,1,4,7,5,3,3,3,0,2,
            2,2,3,3,2,1,2,2,2,1,
            1,2,2,2,1,1,1,2,1,3,
            1,3,3,2,2,3,4,2,2,6,
            2,1,2,1,2,1,1,1,1,1,
            1,3,2,2,3,1,1,0,1,3,
            1,3,2,2,1,3,2,1,1,0,
            1,3,3,3,4,1,1,1,3,1,
            2,1,1,1,1,1,1,1,1,3,
            2,2,4,2,4,3,3,2,1,1,
            1,1,1,1,1,1,1,1,1,1,
            1,1,-164,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-72,0,0,
            0,0,0,0,0,0,0,-3,0,0,
            0,0,-88,0,0,-5,-6,-26,0,0,
            0,-11,-14,-22,-23,-24,-27,-28,-87,0,
            0,0,-29,-1,0,0,-30,-33,-34,-35,
            -36,-10,0,0,0,-39,-15,0,0,0,
            -41,-40,0,0,-42,0,0,-43,-45,0,
            -46,0,-47,0,0,0,-38,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-108,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -20,-37,0,-48,0,-49,0,0,-188,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-52,-32,-53,-54,-55,-56,-57,-58,
            -59,-60,0,-61,-62,0,0,0,0,0,
            -63,-67,-68,-69,-70,-71,-84,0,0,-75,
            0,0,-171,0,0,-76,0,0,-178,0,
            0,0,-82,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -77,-78,0,0,0,0,0,-79,-44,0,
            0,0,-91,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-81,-83,-86,
            -94,-95,-96,-103,-104,-105,-114,-115,-116,-117,
            -119,-121,-124,-127,-129,-130,-131,0,0,-216,
            0,0,-132,-123,0,0,-92,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-133,-134,-135,-136,-137,-138,-139,-140,
            -142,-143,0,0,-144,-145,-146,-147,-148,-149,
            -150,0,0,-151,-155,-152,0,0,0,0,
            -174,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-156,-157,-158,-159,0,
            -160,0,-161,-162,-163,-168,-169,-170,-173,-181,
            -214,0,0,0,0,-218,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -182,-183,0,-185,-189,-190,0,-193,-195,-196,
            -197,-198,-199,-203,-204,-205,-126,-128,0,0,
            -125,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-206,0,-207,-167,
            -192,-200,0,-165,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-209,-211,-231,-210,0,-180,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-212,-220,-223,-224,-225,-226,-227,-228,
            -229,-230,-232,-233,-237,-238,-239,0,0,0,
            0,0,0,-191,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-194,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-222,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,-80,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-85,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-172,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-217,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-31,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-50,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-51,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-120,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-141,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-153,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-166,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-176,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-179,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-201,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-202,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-213,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-215,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-234,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-235,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-236,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-97,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-113,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -98,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-112,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-99,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -100,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-109,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-110,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-111,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-101,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            -102,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-64,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,-186,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,-25,0,0,-65,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,-106,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-187,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,-2,-9,0,-107,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,-73,0,0,
            0,0,0,0,0,0,-74,0,0,0,
            0,0,0,0,-13,0,0,0,0,0,
            0,0,0,0,0,0,0,0,-90,0,
            0,0,0,0,0,-93,0,0,0,0,
            0,0,0,0,-7,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,-89,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,-118,0,0,0,0,0,0,0,-8,
            0,0,0,-19,0,-175,0,0,0,0,
            0,0,-154,0,0,0,0,0,0,0,
            -177,0,0,0,0,0,0,0,-219,0,
            0,0,0,0,0,0,-221,0,0,0,
            0,0,0,0,0,-18,0,0,0,-21,
            0,0,0,0,0,0,-208,0,0,-66,
            0,0,-4,0,0,0,0,0,0,0,
            -12,0,-16,0,0,-17,0,-122,0,0,
            0,-184,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0
        };
    };
    public final static short baseCheck[] = BaseCheck.baseCheck;
    public final int baseCheck(int index) { return baseCheck[index]; }
    public final static short rhs[] = baseCheck;
    public final int rhs(int index) { return rhs[index]; };

    public interface BaseAction {
        public final static char baseAction[] = {
            105,106,106,106,106,106,106,106,106,106,
            106,106,106,106,106,106,107,140,140,140,
            140,140,140,140,140,140,140,140,80,141,
            81,81,81,8,1,82,82,3,3,5,
            5,5,5,5,5,5,5,4,4,4,
            4,4,66,66,66,66,6,7,108,108,
            109,109,83,71,90,69,91,91,84,84,
            142,142,142,142,9,9,9,9,10,10,
            92,92,93,93,85,85,86,12,12,12,
            12,12,12,12,11,110,110,14,15,16,
            16,17,17,18,19,20,13,13,13,21,
            21,23,23,24,24,24,25,25,22,22,
            22,27,27,27,27,27,27,27,27,27,
            29,28,28,30,30,30,68,72,72,67,
            67,59,59,32,31,60,60,63,63,61,
            61,62,62,57,57,56,56,58,58,54,
            54,53,53,55,55,51,51,50,50,52,
            52,48,48,47,47,47,49,49,49,45,
            45,44,44,44,44,44,46,46,46,46,
            46,42,42,41,41,41,43,43,43,39,
            39,38,38,38,40,40,40,75,75,35,
            35,35,36,36,36,26,26,33,33,33,
            33,33,34,37,111,111,112,143,2,1,
            6,11,110,30,34,34,34,34,26,105,
            105,105,105,115,115,113,117,118,118,119,
            121,121,122,122,123,116,116,96,96,97,
            97,98,98,98,99,99,100,100,100,94,
            88,89,101,101,124,124,125,126,144,127,
            145,130,130,131,131,131,128,128,128,132,
            132,132,132,133,133,133,133,133,129,129,
            129,104,103,103,76,102,77,77,78,74,
            79,79,70,70,87,87,120,134,95,73,
            135,135,136,138,114,114,137,137,137,146,
            146,146,146,146,146,146,146,146,146,140,
            65,64,64,1,789,229,468,606,106,604,
            108,143,219,74,75,76,77,87,88,471,
            90,91,92,93,217,109,110,111,112,469,
            118,119,120,130,679,218,465,220,201,204,
            212,673,692,196,676,691,186,675,693,176,
            678,685,169,677,694,163,681,684,157,680,
            695,151,858,141,696,146,682,319,662,37,
            229,869,868,52,54,55,706,310,668,289,
            1134,306,307,117,875,229,54,432,117,37,
            229,456,619,710,288,600,36,610,52,588,
            1148,229,874,252,47,291,295,872,719,529,
            875,760,117,37,229,447,876,117,37,229,
            447,701,633,35,229,214,30,31,878,224,
            1132,115,279,169,327,1135,609,126,789,229,
            468,606,106,604,108,143,219,74,75,76,
            77,87,88,471,90,91,92,93,217,109,
            110,111,112,469,118,119,120,130,679,218,
            465,220,201,204,212,673,692,196,676,691,
            186,675,693,176,678,685,169,677,694,163,
            681,684,157,680,695,151,858,141,696,146,
            682,319,32,36,38,16,1147,443,249,3657,
            706,310,260,281,781,306,307,490,789,229,
            468,606,106,604,108,143,219,74,75,76,
            77,87,88,471,90,91,92,93,217,109,
            110,111,112,469,118,119,120,130,975,218,
            465,220,201,204,212,673,692,196,191,1046,
            190,7,7,700,891,277,165,859,713,65,
            789,229,468,606,106,604,108,143,219,74,
            75,76,77,87,88,471,90,91,92,93,
            217,109,110,111,112,469,118,119,120,130,
            679,218,465,220,201,204,212,673,692,196,
            676,691,186,675,693,176,678,685,169,677,
            694,163,681,684,157,680,695,151,858,141,
            696,146,682,739,687,164,738,883,740,656,
            893,895,564,310,897,746,1219,306,307,271,
            267,804,798,168,900,901,711,633,35,229,
            903,30,31,633,35,229,902,30,31,117,
            954,229,297,172,789,229,468,606,106,604,
            108,143,219,74,75,76,77,87,88,471,
            90,91,92,93,217,109,110,111,112,469,
            118,119,120,130,679,218,465,220,201,204,
            212,673,692,196,676,691,186,675,693,176,
            678,685,169,677,694,163,681,684,157,680,
            695,151,858,141,696,146,682,32,36,884,
            61,659,904,32,36,1221,328,310,907,71,
            872,306,307,218,789,229,468,606,106,604,
            108,143,219,74,75,76,77,87,88,471,
            90,91,92,93,217,109,110,111,112,469,
            118,119,120,130,679,218,465,220,201,204,
            212,673,692,196,676,691,186,675,693,176,
            678,685,169,677,694,163,681,684,157,680,
            695,151,957,141,696,146,682,860,725,686,
            915,778,918,34,784,783,920,921,922,925,
            926,927,928,601,929,933,817,835,82,84,
            117,1369,229,840,839,956,958,255,789,229,
            468,606,106,604,108,143,219,74,75,76,
            77,87,88,471,90,91,92,93,217,109,
            110,111,112,469,118,119,120,130,679,218,
            465,220,201,204,212,673,692,196,676,691,
            186,675,693,176,678,685,169,677,694,163,
            681,684,157,680,695,151,957,141,696,146,
            682,69,131,934,930,942,943,937,948,946,
            845,708,953,68,1368,772,951,797,583,692,
            831,847,82,84,849,685,117,866,229,959,
            958,358,1222,229,468,606,106,604,108,143,
            219,74,75,76,77,87,88,471,90,91,
            92,93,217,109,110,111,112,469,118,119,
            120,130,679,218,465,220,201,204,212,673,
            692,196,676,691,186,675,693,176,678,685,
            169,677,694,163,681,684,157,680,695,151,
            1139,1143,696,146,682,225,855,856,857,863,
            1140,785,1142,858,726,955,959,958,960,968,
            864,117,866,229,68,1141,490,1294,229,468,
            606,106,604,108,143,219,74,75,76,77,
            87,88,471,90,91,92,93,217,109,110,
            111,112,469,118,119,120,130,679,218,465,
            220,201,204,212,673,692,196,676,691,186,
            675,693,176,678,685,169,677,694,163,681,
            684,157,680,695,151,139,141,696,146,682,
            1366,957,971,1372,961,873,969,69,842,978,
            977,866,980,981,985,986,869,48,810,68,
            1371,292,789,229,468,606,106,604,108,143,
            219,74,75,76,77,87,88,471,90,91,
            92,93,217,109,110,111,112,469,118,119,
            120,130,679,218,465,220,201,204,212,673,
            692,196,676,691,186,675,693,176,678,685,
            169,677,694,163,681,684,157,680,695,151,
            139,141,696,146,682,1058,1059,987,1057,990,
            48,972,754,1056,325,789,229,468,606,106,
            604,108,143,219,74,75,76,77,87,88,
            471,90,91,92,93,217,109,110,111,112,
            469,118,119,120,130,679,218,465,220,201,
            204,212,673,692,196,676,691,186,675,693,
            176,678,685,169,677,694,163,681,684,157,
            680,695,151,139,141,696,146,682,135,1295,
            860,1057,992,48,560,991,1136,490,789,229,
            468,606,106,604,108,143,219,74,75,76,
            77,87,88,471,90,91,92,93,217,109,
            110,111,112,469,118,119,120,130,679,218,
            465,220,201,204,212,673,692,196,676,691,
            186,675,693,176,678,685,169,677,694,163,
            681,684,157,680,695,151,957,141,696,146,
            682,134,860,995,669,1003,994,1008,996,999,
            879,1011,886,1012,1015,1016,1018,1020,4001,4001,
            4001,4001,83,84,391,789,229,468,606,106,
            604,108,143,219,74,75,76,77,87,88,
            471,90,91,92,93,217,109,110,111,112,
            469,118,119,120,130,679,218,465,220,201,
            204,212,673,692,196,676,691,186,675,693,
            176,678,685,169,677,694,163,681,684,157,
            680,695,151,139,141,696,146,682,4001,4001,
            4001,1057,4001,4001,4001,4001,1292,424,789,229,
            468,606,106,604,108,143,219,74,75,76,
            77,87,88,471,90,91,92,93,217,109,
            110,111,112,469,118,119,120,130,679,218,
            465,220,201,204,212,673,692,196,676,691,
            186,675,693,176,678,685,169,677,694,163,
            681,684,157,680,695,151,139,141,696,146,
            682,4001,4001,4001,1057,4001,4001,4001,4001,1363,
            457,789,229,468,606,106,604,108,143,219,
            74,75,76,77,87,88,471,90,91,92,
            93,217,109,110,111,112,469,118,119,120,
            130,679,218,465,220,201,204,212,673,692,
            196,676,691,186,675,693,176,678,685,169,
            677,694,163,681,684,157,680,695,151,139,
            141,696,146,682,4001,4001,4001,1057,4001,4001,
            4001,4001,1374,490,789,229,468,606,106,604,
            108,143,219,74,75,76,77,87,88,471,
            90,91,92,93,217,109,110,111,112,469,
            118,119,120,130,679,218,465,220,201,204,
            212,673,692,196,676,691,186,675,693,176,
            678,685,169,677,694,163,681,684,157,680,
            695,151,871,141,696,146,682,4001,4001,4001,
            4001,4001,4001,4001,4001,4001,4001,311,490,789,
            229,468,606,106,604,108,143,219,74,75,
            76,77,87,88,471,90,91,92,93,217,
            109,110,111,112,469,118,119,120,130,679,
            218,465,220,201,204,212,673,692,196,676,
            691,186,675,693,176,678,685,169,677,694,
            163,681,684,157,680,695,151,139,141,696,
            146,682,4001,4001,4001,873,490,789,229,468,
            606,106,604,108,143,219,74,75,76,77,
            87,88,471,90,91,92,93,217,109,110,
            111,112,469,118,119,120,130,679,218,465,
            220,201,204,212,673,692,196,676,691,186,
            675,693,176,678,685,169,677,694,163,681,
            684,157,680,695,151,139,141,696,146,682,
            4001,4001,4001,1138,490,789,229,468,606,106,
            604,108,143,219,74,75,76,77,87,88,
            471,90,91,92,93,217,109,110,111,112,
            469,118,119,120,130,679,218,465,220,201,
            204,212,673,692,196,676,691,186,675,693,
            176,678,685,169,677,694,163,681,684,157,
            680,695,151,139,141,696,146,682,4001,4001,
            4001,1370,490,789,229,468,606,106,604,108,
            143,219,74,75,76,77,87,88,471,90,
            91,92,93,217,109,110,111,112,469,118,
            119,120,130,679,218,465,220,201,204,212,
            673,692,196,676,691,186,675,693,176,678,
            685,169,677,694,163,681,684,157,680,695,
            151,461,141,696,146,682,523,789,229,468,
            606,106,604,108,143,219,74,75,76,77,
            87,88,471,90,91,92,93,217,109,110,
            111,112,469,118,119,120,130,679,218,465,
            220,201,204,212,673,692,196,676,691,186,
            675,693,176,678,685,169,677,694,163,681,
            684,157,680,695,151,861,141,696,146,682,
            490,789,229,468,606,106,604,108,143,219,
            74,75,76,77,87,88,471,90,91,92,
            93,217,109,110,111,112,469,118,119,120,
            130,679,218,465,220,201,204,212,673,692,
            196,676,691,186,675,693,176,678,685,169,
            677,694,163,681,684,157,680,695,151,863,
            141,696,146,682,490,789,229,468,606,106,
            604,108,143,219,74,75,76,77,87,88,
            471,90,91,92,93,217,109,110,111,112,
            469,118,119,120,130,679,218,465,220,201,
            204,212,673,692,196,676,691,186,675,693,
            176,678,685,169,677,694,163,681,684,157,
            680,695,151,309,141,696,146,682,490,789,
            229,468,606,106,604,108,143,219,74,75,
            76,77,87,88,471,90,91,92,93,217,
            109,110,111,112,469,118,119,120,130,679,
            218,465,220,201,204,212,673,692,196,676,
            691,186,675,693,176,678,685,169,677,694,
            163,681,684,157,680,695,151,1060,141,696,
            146,682,490,789,229,468,606,106,604,108,
            143,219,74,75,76,77,87,88,471,90,
            91,92,93,217,109,110,111,112,469,118,
            119,120,130,679,218,465,220,201,204,212,
            673,692,196,676,691,186,675,693,176,678,
            685,169,677,694,163,681,684,157,680,695,
            151,223,141,696,146,682,490,789,229,468,
            606,106,604,108,143,219,74,75,76,77,
            87,88,471,90,91,92,93,217,109,110,
            111,112,469,118,119,120,130,679,218,465,
            220,201,204,212,673,692,196,676,691,186,
            675,693,176,678,685,169,677,694,163,681,
            684,157,680,695,151,140,141,696,146,682,
            490,789,229,468,606,106,604,108,143,219,
            74,75,76,77,87,88,471,90,91,92,
            93,217,109,110,111,112,469,118,119,120,
            130,679,218,465,220,201,204,212,673,692,
            196,676,691,186,675,693,176,678,685,169,
            677,694,163,681,684,157,680,695,151,64,
            141,696,146,682,490,789,229,468,606,106,
            604,108,143,219,74,75,76,77,87,88,
            471,90,91,92,93,217,109,110,111,112,
            469,118,119,120,130,679,218,465,220,201,
            204,212,673,692,196,676,691,186,675,693,
            176,678,685,169,677,694,163,681,684,157,
            680,695,151,86,141,696,146,682,490,789,
            229,468,606,106,604,108,143,219,74,75,
            76,77,87,88,471,90,91,92,93,217,
            109,110,111,112,469,118,119,120,130,679,
            218,465,220,201,204,212,673,692,196,676,
            691,186,675,693,176,678,685,169,677,694,
            163,681,684,157,680,695,151,1364,141,696,
            146,682,490,789,229,468,606,106,604,108,
            143,219,74,75,76,77,87,88,471,90,
            91,92,93,217,109,110,111,112,469,118,
            119,120,130,679,218,465,220,201,204,212,
            673,692,196,676,691,186,675,693,176,678,
            685,169,677,694,163,681,684,157,680,695,
            151,65,141,696,146,682,490,789,229,468,
            606,106,604,108,143,219,74,75,76,77,
            87,88,471,90,91,92,93,217,109,110,
            111,112,469,118,119,120,130,679,218,465,
            220,201,204,212,673,692,196,676,691,186,
            675,693,176,678,685,169,677,694,163,681,
            684,157,680,695,151,1365,141,696,146,682,
            490,789,229,468,606,106,604,108,143,219,
            74,75,76,77,87,88,471,90,91,92,
            93,217,109,110,111,112,469,118,119,120,
            130,679,218,465,220,201,204,212,673,692,
            196,676,691,186,675,693,176,678,685,169,
            677,694,163,681,684,157,680,695,151,1367,
            141,696,146,682,490,789,229,468,606,106,
            604,108,143,219,74,75,76,77,87,88,
            471,90,91,92,93,217,109,110,111,112,
            469,118,119,120,130,679,218,465,220,201,
            204,212,673,692,196,676,691,186,675,693,
            176,678,685,169,677,694,163,681,684,157,
            680,695,151,1375,141,696,146,682,490,789,
            229,468,606,106,604,108,143,219,74,75,
            76,77,87,88,471,90,91,92,93,217,
            109,110,111,112,469,118,119,120,130,679,
            218,465,220,201,204,212,673,692,196,676,
            691,186,675,693,176,678,685,169,677,694,
            163,681,684,157,680,695,151,1376,141,696,
            146,682,490,789,229,468,606,106,604,108,
            143,219,74,75,76,77,87,88,471,90,
            91,92,93,217,109,110,111,112,469,118,
            119,120,130,679,218,465,220,201,204,212,
            673,692,196,676,691,186,675,693,176,678,
            685,169,677,694,163,681,684,157,680,695,
            151,1377,141,696,146,682,490,789,229,468,
            606,106,604,108,143,219,74,75,76,77,
            87,88,471,90,91,92,93,217,109,110,
            111,112,469,118,119,120,130,961,218,465,
            220,201,204,212,673,692,196,676,691,186,
            675,693,176,678,685,169,677,694,163,681,
            684,157,153,962,152,490,789,229,468,606,
            106,604,108,143,219,74,75,76,77,87,
            88,471,90,91,92,93,217,109,110,111,
            112,469,118,119,120,130,1054,218,465,220,
            201,204,212,673,692,196,676,691,186,675,
            693,176,678,685,169,677,694,163,159,1055,
            158,490,789,229,468,606,106,604,108,143,
            219,74,75,76,77,87,88,471,90,91,
            92,93,217,109,110,111,112,469,118,119,
            120,130,965,218,465,220,201,204,212,673,
            692,196,676,691,186,675,693,176,678,685,
            169,165,966,164,490,789,229,468,606,106,
            604,108,143,219,74,75,76,77,87,88,
            471,90,91,92,93,217,109,110,111,112,
            469,118,119,120,130,1051,218,465,220,201,
            204,212,673,692,196,676,691,186,675,693,
            176,171,1053,170,490,789,229,468,606,106,
            604,108,143,219,74,75,76,77,87,88,
            471,90,91,92,93,217,109,110,111,112,
            469,118,119,120,130,967,218,465,220,201,
            204,212,673,692,196,676,691,186,179,968,
            178,490,789,229,468,606,106,604,108,143,
            219,74,75,76,77,87,88,471,90,91,
            92,93,217,109,110,111,112,469,118,119,
            120,130,967,218,465,220,201,204,212,673,
            692,196,676,691,186,179,969,177,490,789,
            229,468,606,106,604,108,143,219,74,75,
            76,77,87,88,471,90,91,92,93,217,
            109,110,111,112,469,118,119,120,130,975,
            218,465,220,201,204,212,673,692,196,191,
            1047,189,490,789,229,468,606,106,604,108,
            143,219,74,75,76,77,87,88,471,90,
            91,92,93,217,109,110,111,112,469,118,
            119,120,130,975,218,465,220,201,204,212,
            673,692,196,191,1048,188,490,789,229,468,
            606,106,604,108,143,219,74,75,76,77,
            87,88,471,90,91,92,93,217,109,110,
            111,112,469,118,119,120,130,975,218,465,
            220,201,204,212,673,692,196,191,1049,187,
            490,789,229,468,606,106,604,108,143,219,
            74,75,76,77,87,88,471,90,91,92,
            93,217,109,110,111,112,469,118,119,120,
            130,970,218,465,220,201,204,212,199,971,
            198,490,789,229,468,606,106,604,108,143,
            219,74,75,76,77,87,88,471,90,91,
            92,93,217,109,110,111,112,469,118,119,
            120,130,970,218,465,220,201,204,212,199,
            974,197,490,789,229,468,606,106,604,108,
            143,219,74,75,76,77,87,88,471,90,
            91,92,93,217,109,110,111,112,469,118,
            119,120,130,864,218,465,220,207,214,212,
            556,789,229,468,606,106,604,108,143,219,
            74,75,76,77,87,88,471,90,91,92,
            93,217,109,110,111,112,1146,118,119,120,
            130,216,218,215,220,613,4001,211,490,789,
            229,468,606,106,604,108,143,219,74,75,
            76,77,87,88,471,90,91,92,93,217,
            109,110,111,112,469,118,119,120,130,864,
            218,465,220,207,213,212,4001,4001,4001,4001,
            4001,4001,4001,4001,4001,4001,4001,4001,4001,4001,
            4001,4001,4001,4001,4001,4001,4001,4001,4001,312,
            313,4001,4001,4001,1145,254,4001,4001,4001,4001,
            4001,4001,4001,210,490,789,229,468,606,106,
            604,108,143,219,74,75,76,77,87,88,
            471,90,91,92,93,217,109,110,111,112,
            469,118,119,120,130,864,218,465,220,207,
            206,212,556,789,229,468,606,106,604,108,
            143,219,74,75,76,77,87,88,471,90,
            91,92,93,217,109,110,111,112,1146,118,
            119,120,130,216,218,215,220,42,604,203,
            490,789,229,468,606,106,604,108,143,219,
            74,75,76,77,87,88,471,90,91,92,
            93,217,109,110,111,112,469,118,119,120,
            130,864,218,465,220,207,205,212,662,37,
            229,869,868,52,54,55,4001,662,37,229,
            869,868,52,54,55,117,37,229,450,4001,
            4001,4001,312,313,4001,4001,1217,4001,246,43,
            954,229,4001,4001,4001,202,662,37,229,869,
            868,52,54,55,4001,666,4001,4001,4001,4001,
            4001,240,4001,418,427,426,3790,3745,4001,4001,
            4001,4001,4001,4001,326,4001,714,883,229,4001,
            241,242,3658,323,434,438,428,437,4001,436,
            3505,435,662,37,229,869,868,52,54,55,
            38,4001,3861,433,596,432,117,883,229,4001,
            60,4001,960,662,37,229,869,868,52,54,
            55,662,37,229,869,868,52,54,55,662,
            37,229,869,868,52,54,55,662,37,229,
            869,868,52,54,55,67,159,953,955,276,
            613,418,427,426,3790,3745,4001,100,304,449,
            117,866,229,50,312,313,66,95,312,313,
            601,613,4001,613,601,67,613,4001,56,1131,
            268,4001,56,4001,4001,4001,876,63,4001,272,
            4001,4001,4001,272,4001,1373,66,96,4001,4001,
            4001,274,4001,305,4001,275,4001,4001,4001,4001,
            312,313,4001,4001,312,313,602,4001,4001,4001,
            601,319,4001,4001,265,4001,4001,314,315,224,
            706,4001,4001,290,266,674,448,314,315,273,
            314,315,319,4001,4001,4001,319,4001,4001,4001,
            258,706,4001,4001,282,1144,4001,4001,4001,292,
            263,4001,4001,262,4001,4001,4001,4001,4001,4001,
            4001,865,4001,4001,4001,4001,4001,4001,4001,4001,
            4001,4001,4001,4001,4001,4001,4001,4001,4001,4001,
            4001,4001,4001,4001,4001,4001,4001,4001,4001,4001,
            4001,4001,4001,4001,4001,4001,4001,4001,322,4001,
            0
        };
    };
    public final static char baseAction[] = BaseAction.baseAction;
    public final int baseAction(int index) { return baseAction[index]; }
    public final static char lhs[] = baseAction;
    public final int lhs(int index) { return lhs[index]; };

    public interface TermCheck {
        public final static byte termCheck[] = {0,
            0,1,2,3,4,5,0,7,2,9,
            10,11,12,13,14,15,16,17,18,19,
            20,21,22,23,24,25,26,27,28,29,
            30,31,32,0,1,0,36,0,1,6,
            3,0,0,1,7,3,0,0,6,0,
            1,0,3,0,54,0,7,8,3,59,
            60,8,7,63,0,1,2,3,4,5,
            0,7,2,9,10,11,12,13,14,15,
            16,17,18,19,20,21,22,23,24,25,
            26,27,28,29,30,31,32,48,61,0,
            36,48,3,62,55,68,7,72,38,0,
            73,70,71,64,0,74,0,1,54,3,
            69,7,52,59,60,0,1,2,3,4,
            5,6,7,0,9,10,11,12,13,14,
            15,16,17,18,19,20,21,22,23,24,
            25,26,27,28,29,30,31,32,0,1,
            2,3,63,0,0,7,2,0,0,1,
            2,0,1,2,3,4,5,6,7,54,
            9,10,11,12,13,14,15,16,17,18,
            19,20,21,22,23,24,25,26,27,28,
            29,30,31,32,41,42,43,44,41,42,
            43,44,48,0,0,0,48,0,1,2,
            3,4,5,0,7,54,9,10,11,12,
            13,14,15,16,17,18,19,20,21,22,
            23,24,25,26,27,28,29,30,31,32,
            37,0,39,36,0,1,2,3,4,5,
            37,7,39,9,10,11,12,13,14,15,
            16,17,18,19,20,21,22,23,24,25,
            26,27,28,29,30,31,32,0,0,0,
            36,0,1,2,3,4,5,6,7,48,
            9,10,11,12,13,14,15,16,17,18,
            19,20,21,22,23,24,25,26,27,28,
            29,30,31,32,0,1,2,3,4,5,
            6,7,45,9,10,11,12,13,14,15,
            16,17,18,19,20,21,22,23,24,25,
            26,27,28,29,30,31,32,0,1,2,
            3,4,5,6,7,0,9,10,11,12,
            13,14,15,16,17,18,19,20,21,22,
            23,24,25,26,27,28,29,30,31,32,
            0,1,2,3,4,5,6,7,0,9,
            10,11,12,13,14,15,16,17,18,19,
            20,21,22,23,24,25,26,27,28,29,
            30,31,32,0,1,2,3,4,5,6,
            7,0,9,10,11,12,13,14,15,16,
            17,18,19,20,21,22,23,24,25,26,
            27,28,29,30,31,32,0,1,2,3,
            4,5,6,7,0,9,10,11,12,13,
            14,15,16,17,18,19,20,21,22,23,
            24,25,26,27,28,29,30,31,32,0,
            1,2,3,4,5,64,7,0,9,10,
            11,12,13,14,15,16,17,18,19,20,
            21,22,23,24,25,26,27,28,29,30,
            31,32,0,1,2,3,4,5,0,7,
            2,9,10,11,12,13,14,15,16,17,
            18,19,20,21,22,23,24,25,26,27,
            28,29,30,31,32,0,1,2,3,0,
            5,2,7,0,9,10,11,12,13,14,
            15,16,17,18,19,20,21,22,23,24,
            25,26,0,28,29,30,31,0,1,0,
            3,4,5,34,0,0,1,38,3,0,
            0,1,7,0,1,46,3,8,8,0,
            7,52,0,1,27,3,53,8,0,7,
            33,0,35,41,42,43,44,40,41,42,
            43,44,0,1,47,3,49,50,51,36,
            53,9,10,11,12,13,14,15,16,17,
            18,19,20,21,22,0,61,57,0,4,
            5,0,1,45,3,0,48,0,0,1,
            9,10,11,12,13,14,15,16,17,18,
            19,20,21,22,0,0,0,1,33,5,
            35,0,37,8,39,40,41,42,43,44,
            0,36,47,45,49,50,51,0,53,0,
            0,4,5,0,1,6,3,8,0,35,
            34,37,55,39,0,0,58,62,0,4,
            5,46,41,42,43,44,36,0,0,0,
            33,4,35,5,37,0,39,40,41,42,
            43,44,34,0,47,2,49,50,33,0,
            35,8,37,53,39,40,41,42,43,44,
            33,0,47,35,49,4,5,0,1,40,
            56,0,0,0,0,40,47,34,4,5,
            8,38,47,34,0,0,0,0,45,46,
            4,5,5,0,33,52,35,4,37,0,
            39,40,41,42,43,44,0,33,47,35,
            37,37,39,39,8,41,42,43,44,33,
            0,35,35,37,0,39,33,55,0,0,
            2,0,8,66,0,1,0,38,0,8,
            6,5,36,5,0,0,0,0,4,4,
            4,52,0,0,1,0,4,37,0,39,
            36,0,0,34,0,0,38,0,0,40,
            8,35,0,35,6,0,8,33,33,33,
            0,6,0,8,0,33,0,40,57,0,
            0,0,0,0,47,37,0,39,6,38,
            45,46,38,38,0,38,2,0,46,0,
            0,0,2,2,0,0,0,0,0,0,
            67,49,0,0,2,34,0,34,48,6,
            34,0,0,51,50,0,50,0,49,8,
            0,51,0,34,0,8,0,0,0,0,
            0,2,38,34,6,8,38,0,0,2,
            0,0,45,48,6,58,0,0,36,0,
            0,36,56,6,0,0,0,8,8,0,
            0,0,2,0,0,0,40,6,0,49,
            6,65,0,51,50,45,36,0,6,38,
            0,0,0,6,0,0,0,0,34,0,
            6,6,46,6,0,6,0,0,0,0,
            45,45,34,0,45,0,0,0,0,46,
            0,46,0,0,0,0,0,0,0,0,
            0,40,0,0,0,0,46,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0,0,0,0,0,
            0,0,0,0,0,0
        };
    };
    public final static byte termCheck[] = TermCheck.termCheck;
    public final int termCheck(int index) { return termCheck[index]; }

    public interface TermAction {
        public final static char termAction[] = {0,
            4001,4229,2010,788,3508,4104,4001,782,477,4048,
            4049,4050,4051,4052,4043,4041,4044,4042,4040,473,
            4045,4047,4046,4098,4099,4034,1946,3432,4102,4103,
            4106,4105,3850,4001,4239,255,300,4001,4341,4222,
            4342,4001,4001,4229,4343,4035,239,136,58,4001,
            4341,250,4342,4001,1603,4001,4343,257,4342,3622,
            3470,3863,4343,3872,4001,4229,2010,4035,3508,4104,
            144,4100,136,4048,4049,4050,4051,4052,4043,4041,
            4044,4042,4040,473,4045,4047,4046,4098,4099,4034,
            1946,3432,4102,4103,4106,4105,3850,257,3840,4001,
            299,4265,4342,3853,257,3794,4343,4253,37,4001,
            3836,3715,452,257,89,4000,4001,4229,1603,4035,
            4248,4101,1678,3622,3470,4001,4229,2010,788,3508,
            4104,288,782,4001,4048,4049,4050,4051,4052,4043,
            4041,4044,4042,4040,473,4045,4047,4046,4098,4099,
            4034,1946,3432,4102,4103,4106,4105,3850,4001,4341,
            477,4342,3872,173,4001,4343,3736,4001,4001,4232,
            3729,4001,4229,2010,4035,3508,4104,287,4100,1603,
            4048,4049,4050,4051,4052,4043,4041,4044,4042,4040,
            473,4045,4047,4046,4098,4099,4034,1946,3432,4102,
            4103,4106,4105,3850,179,179,179,179,3306,3262,
            3218,557,887,209,4001,4001,3766,4001,4229,2010,
            4035,3508,4104,4001,4100,1603,4048,4049,4050,4051,
            4052,4043,4041,4044,4042,4040,473,4045,4047,4046,
            4098,4099,4034,1946,3432,4102,4103,4106,4105,3850,
            215,4001,215,80,4001,4229,2010,4035,3508,4104,
            423,4100,439,4048,4049,4050,4051,4052,4043,4041,
            4044,4042,4040,473,4045,4047,4046,4098,4099,4034,
            1946,3432,4102,4103,4106,4105,3850,4001,4001,4001,
            80,4001,4229,2010,4035,3508,4104,137,4100,4244,
            4048,4049,4050,4051,4052,4043,4041,4044,4042,4040,
            473,4045,4047,4046,4098,4099,4034,1946,3432,4102,
            4103,4106,4105,3850,4001,4229,2010,4035,3508,4104,
            137,4100,4245,4048,4049,4050,4051,4052,4043,4041,
            4044,4042,4040,473,4045,4047,4046,4098,4099,4034,
            1946,3432,4102,4103,4106,4105,3850,4001,4229,2010,
            4035,3508,4104,4122,4100,4001,4048,4049,4050,4051,
            4052,4043,4041,4044,4042,4040,473,4045,4047,4046,
            4098,4099,4034,1946,3432,4102,4103,4106,4105,3850,
            4001,4229,2010,4035,3508,4104,137,4100,4001,4048,
            4049,4050,4051,4052,4043,4041,4044,4042,4040,473,
            4045,4047,4046,4098,4099,4034,1946,3432,4102,4103,
            4106,4105,3850,4001,4229,2010,4035,3508,4104,137,
            4100,261,4048,4049,4050,4051,4052,4043,4041,4044,
            4042,4040,473,4045,4047,4046,4098,4099,4034,1946,
            3432,4102,4103,4106,4105,3850,4001,4229,2010,4035,
            3508,4104,137,4100,4001,4048,4049,4050,4051,4052,
            4043,4041,4044,4042,4040,473,4045,4047,4046,4098,
            4099,4034,1946,3432,4102,4103,4106,4105,3850,4001,
            4229,2010,4035,3508,4104,3866,4100,4001,4048,4049,
            4050,4051,4052,4043,4041,4044,4042,4040,473,4045,
            4047,4046,4098,4099,4034,1946,3432,4102,4103,4106,
            4105,3850,4001,862,2010,4035,3508,4104,4001,4100,
            4321,4048,4049,4050,4051,4052,4043,4041,4044,4042,
            4040,473,4045,4047,4046,4098,4099,4034,1946,3432,
            4102,4103,4106,4105,3850,4001,4229,2010,4035,144,
            4104,136,4100,4001,4048,4049,4050,4051,4052,4043,
            4041,4044,4042,4040,473,4045,4047,4046,4098,4099,
            4034,1946,175,4102,4103,4106,4105,4001,4229,4001,
            4035,4014,4015,3811,4001,4001,4341,37,4342,256,
            4001,4234,4343,4001,4341,62,4342,4254,2266,251,
            4343,1678,4001,4341,4004,4342,2906,4249,4001,4343,
            4013,4001,4016,3306,3262,3218,557,4011,4010,4007,
            4009,4008,4001,4229,4012,4035,4002,4005,4006,4246,
            4003,4048,4049,4050,4051,4052,4043,4041,4044,4042,
            4040,4029,4045,4047,4046,142,3840,1220,4001,192,
            200,4001,4229,4325,4035,4001,1882,259,4001,4235,
            4048,4049,4050,4051,4052,4043,4041,4044,4042,4040,
            867,4045,4047,4046,192,286,4001,4227,192,200,
            200,174,216,3868,216,172,180,180,180,180,
            4001,4270,172,4285,166,160,154,154,148,4001,
            145,192,200,4001,877,451,4035,4322,4001,200,
            408,216,457,216,308,160,4223,3853,4001,192,
            200,4284,3306,3262,3218,557,4326,181,193,167,
            192,191,200,199,216,4001,216,172,180,180,
            180,180,3698,144,172,136,166,160,192,4001,
            200,1066,216,147,216,172,180,180,180,180,
            191,166,172,199,166,192,200,4001,4237,171,
            2074,4001,4001,208,172,3171,171,3819,192,200,
            976,37,3124,3707,4001,4001,180,4001,62,62,
            192,200,3660,4001,192,1678,200,3350,216,136,
            216,172,180,180,180,180,4001,192,172,200,
            216,216,216,216,3796,180,180,180,180,192,
            200,200,3584,216,228,216,3391,2202,136,4001,
            1224,4001,232,2138,4001,4231,195,37,194,2266,
            4057,3660,4095,3660,185,184,183,168,3350,3350,
            3350,1746,182,4001,4236,4001,3350,216,301,216,
            232,318,298,3803,317,316,38,4001,4001,2330,
            3847,3584,161,3584,4124,4001,2266,3391,3391,3391,
            107,4125,149,2266,155,3391,4001,3171,1293,4001,
            4001,4001,4001,99,3124,423,34,439,870,462,
            1061,2650,462,462,4001,697,1151,228,4294,4001,
            4001,4001,3729,3736,53,4001,4001,4001,4001,4001,
            2458,165,4001,4001,981,3782,85,342,793,4058,
            341,59,4001,153,159,4001,3021,81,3074,709,
            162,2965,150,3803,156,1297,4001,138,4001,4001,
            4001,1384,462,3811,4128,2266,703,133,4001,1457,
            4001,136,4286,343,4129,4238,4001,4001,4080,69,
            141,4079,2074,4123,4001,4001,4001,880,1814,4001,
            132,4001,1530,4001,4001,4001,2522,4126,62,3074,
            4127,2394,4001,2965,3021,4295,4271,4001,4117,38,
            4001,63,4001,4114,4001,4001,4001,4001,3827,4001,
            4130,4118,2586,4116,4001,4115,4001,4001,4001,4001,
            4304,4303,3811,4001,4297,4001,4001,4001,4001,2714,
            4001,2778,4001,4001,4001,4001,4001,4001,4001,4001,
            4001,2522,4001,4001,4001,4001,2842
        };
    };
    public final static char termAction[] = TermAction.termAction;
    public final int termAction(int index) { return termAction[index]; }

    public interface Asb {
        public final static char asb[] = {0,
            62,62,385,382,387,386,368,371,359,34,
            37,144,34,353,34,144,144,143,373,113,
            144,177,176,77,144,34,76,40,388,67,
            6,179,322,113,72,322,113,115,75,20,
            313,243,70,240,237,80,111,148,112,6,
            6,245,249,247,255,253,243,257,256,182,
            184,186,189,6,6,34,59,106,192,194,
            258,20,20,20,354,322,177,196,217,6,
            273,115,352,20,6,113,44,34,34,364,
            5,5,20,276,279,365,6,6,6,6,
            6,6,243,302,322,6,6,6,6,6,
            6,6,6,113,113,305,388,20,274,6,
            177,145,241,315,116,113,70,240,113,312,
            319,214,354,322,353,313,324,312,313,365,
            6,243,257,243,255,243,249,249,243,245,
            245,34,6,20,243,247,247,247,247,243,
            253,243,256,1,116,6,243,354,353,113,
            20,6,242,116,34,6,20,34,6,6,
            328,215,313,145,177,9,9,2,311,354,
            116,241,316,116,354,271,270,269,353,331,
            6,6,322,177,236,177,177,378,354,242,
            243,354,6,34,6,34,6,6,20,299,
            20,116,354,271,354,271,356,353,271,353,
            332,174,354,6,6,6,354,354,354
        };
    };
    public final static char asb[] = Asb.asb;
    public final int asb(int index) { return asb[index]; }

    public interface Asr {
        public final static byte asr[] = {0,
            63,59,60,54,36,32,4,27,2,26,
            30,31,5,28,29,7,24,23,25,19,
            18,15,17,14,16,20,22,21,9,10,
            11,12,13,1,3,0,45,48,0,45,
            72,69,0,1,3,49,53,27,50,51,
            42,44,43,41,40,47,33,4,5,35,
            0,62,70,71,74,0,48,8,64,38,
            0,2,38,0,38,8,45,72,0,56,
            33,4,5,35,40,47,6,36,57,37,
            46,8,45,39,65,66,67,58,49,50,
            51,53,55,1,7,41,42,43,44,0,
            1,48,2,0,54,6,32,4,27,26,
            9,10,11,12,13,19,30,31,5,28,
            29,24,23,18,15,17,14,16,20,22,
            21,25,2,1,3,7,0,56,33,4,
            5,35,41,42,43,44,47,6,36,57,
            37,39,65,66,67,58,49,50,51,53,
            55,1,48,46,40,8,45,0,1,34,
            0,53,0,50,0,40,47,0,33,4,
            0,49,0,51,0,56,7,33,4,5,
            35,41,42,43,44,47,37,45,39,49,
            50,51,53,34,40,0,34,56,33,4,
            5,35,41,42,40,43,44,47,2,52,
            38,49,50,51,53,45,37,39,0,52,
            38,2,37,39,5,35,33,4,41,42,
            43,44,40,47,49,50,51,53,56,6,
            36,57,65,66,67,58,55,1,8,45,
            46,0,45,56,0,66,1,0,33,4,
            5,35,41,42,40,43,44,47,2,52,
            37,38,39,66,49,50,51,53,58,1,
            0,55,8,0,40,6,48,45,1,38,
            46,8,36,0,1,57,8,0,36,8,
            40,34,0,36,8,65,0,67,1,0,
            45,33,4,5,35,41,42,40,43,44,
            47,37,39,49,50,51,53,38,2,34,
            52,46,8,6,0,46,34,0,1,3,
            7,36,0,3,6,1,0,62,36,0,
            68,73,3,7,1,61,0,63,3,7,
            0,3,7,1,55,64,8,48,0
        };
    };
    public final static byte asr[] = Asr.asr;
    public final int asr(int index) { return asr[index]; }

    public interface Nasb {
        public final static char nasb[] = {0,
            15,101,111,151,111,111,121,129,112,10,
            111,153,10,111,10,151,151,138,132,139,
            141,111,111,111,142,10,111,111,111,111,
            4,39,111,111,111,111,139,19,111,17,
            111,111,111,41,111,111,111,111,111,4,
            4,111,111,111,111,111,111,111,111,111,
            111,111,111,95,95,148,111,111,111,111,
            111,9,9,9,111,111,111,111,111,53,
            111,4,111,17,4,111,12,7,126,118,
            4,4,9,111,111,111,59,71,83,83,
            89,89,111,111,111,95,95,27,27,27,
            27,77,65,111,111,111,111,9,111,4,
            111,145,41,111,4,41,111,41,111,111,
            111,111,111,111,111,111,111,111,111,111,
            4,111,111,111,111,111,111,111,111,111,
            111,43,4,9,111,111,111,111,111,111,
            111,111,111,1,4,4,41,111,111,111,
            17,4,111,46,135,4,9,50,4,4,
            111,111,111,25,111,4,4,33,111,111,
            4,41,111,4,111,111,111,111,111,41,
            4,4,111,111,111,111,111,144,111,111,
            41,111,4,43,4,7,4,4,9,111,
            9,4,111,111,111,111,111,111,111,111,
            41,111,111,4,4,4,111,111,111
        };
    };
    public final static char nasb[] = Nasb.nasb;
    public final int nasb(int index) { return nasb[index]; }

    public interface Nasr {
        public final static char nasr[] = {0,
            132,133,73,4,6,16,1,0,4,3,
            0,1,107,0,105,0,82,0,130,131,
            1,6,16,4,73,0,4,6,16,1,
            43,0,4,6,16,1,103,0,112,0,
            68,0,1,69,0,4,6,16,69,1,
            71,0,1,6,16,4,74,0,1,6,
            16,4,58,0,4,6,16,1,55,0,
            1,6,16,4,52,0,4,6,16,1,
            49,0,1,6,16,4,46,0,1,6,
            16,4,40,0,1,6,16,4,36,0,
            136,135,138,115,99,100,96,94,113,114,
            0,117,119,118,122,123,0,109,1,0,
            100,99,96,125,0,1,110,0,70,124,
            0,70,101,0,1,91,0,70,88,0,
            89,70,0,102,73,76,0,1,111,0,
            87,0,65,64,137,0
        };
    };
    public final static char nasr[] = Nasr.nasr;
    public final int nasr(int index) { return nasr[index]; }

    public interface TerminalIndex {
        public final static char terminalIndex[] = {0,
            77,12,74,3,4,13,29,20,46,47,
            48,49,50,51,52,53,54,55,56,57,
            58,59,27,28,30,31,38,42,43,44,
            45,40,2,21,5,15,18,22,24,8,
            6,7,9,10,23,19,11,14,35,36,
            37,16,39,62,41,1,17,34,61,63,
            64,66,68,69,25,32,33,60,65,67,
            70,71,72,73,75,76
        };
    };
    public final static char terminalIndex[] = TerminalIndex.terminalIndex;
    public final int terminalIndex(int index) { return terminalIndex[index]; }

    public interface NonterminalIndex {
        public final static char nonterminalIndex[] = {0,
            80,0,82,79,0,84,0,0,0,0,
            0,0,0,0,0,93,0,0,0,0,
            0,0,0,0,0,95,0,0,0,0,
            98,0,124,0,0,123,0,119,120,121,
            116,117,118,113,114,115,110,111,112,107,
            108,109,104,105,106,101,102,103,87,96,
            99,0,100,163,164,83,97,0,88,134,
            86,0,161,162,122,153,155,0,0,0,
            0,81,0,90,92,0,142,148,150,0,
            89,0,91,127,131,141,143,144,145,147,
            151,157,159,160,0,0,78,0,85,94,
            125,126,128,129,130,132,133,135,136,137,
            138,139,140,146,149,0,0,0,0,152,
            154,156,158,165,166,167,168,169,0,0,
            0,0,0,0,0,0
        };
    };
    public final static char nonterminalIndex[] = NonterminalIndex.nonterminalIndex;
    public final int nonterminalIndex(int index) { return nonterminalIndex[index]; }

    public interface ScopePrefix {
        public final static char scopePrefix[] = {
            200,236,246,134,168,176,222,256,210,22,
            22,154,161,143,194,128,184,230,13,149,
            13,13,39,43,264,268,272,276,43,39,
            5,10,5,47,10,10,10,1,67,67,
            75,75,83,83,83,83,97,97,105,110,
            115,120
        };
    };
    public final static char scopePrefix[] = ScopePrefix.scopePrefix;
    public final int scopePrefix(int index) { return scopePrefix[index]; }

    public interface ScopeSuffix {
        public final static char scopeSuffix[] = {
            65,65,65,65,65,65,65,65,218,8,
            53,65,65,65,65,125,190,218,8,65,
            29,55,8,8,3,3,3,65,65,125,
            8,8,65,50,18,33,59,3,69,72,
            77,80,85,88,91,94,99,102,107,112,
            117,122
        };
    };
    public final static char scopeSuffix[] = ScopeSuffix.scopeSuffix;
    public final int scopeSuffix(int index) { return scopeSuffix[index]; }

    public interface ScopeLhs {
        public final static char scopeLhs[] = {
            25,24,24,27,27,27,25,24,25,34,
            34,27,27,27,27,30,27,25,34,27,
            34,34,30,6,11,10,10,7,6,30,
            26,34,33,37,34,34,34,94,40,40,
            43,43,46,46,46,46,49,49,52,55,
            58,62
        };
    };
    public final static char scopeLhs[] = ScopeLhs.scopeLhs;
    public final int scopeLhs(int index) { return scopeLhs[index]; }

    public interface ScopeLa {
        public final static byte scopeLa[] = {
            6,6,6,6,6,6,6,6,46,1,
            58,6,6,6,6,57,8,46,1,6,
            67,67,1,1,36,36,36,6,6,57,
            1,1,6,55,66,66,66,36,35,5,
            4,33,44,43,42,41,47,40,49,50,
            51,53
        };
    };
    public final static byte scopeLa[] = ScopeLa.scopeLa;
    public final int scopeLa(int index) { return scopeLa[index]; }

    public interface ScopeStateSet {
        public final static byte scopeStateSet[] = {
            10,10,10,10,10,10,10,10,10,10,
            10,10,10,10,10,10,10,10,10,10,
            10,10,10,1,10,10,10,1,1,10,
            10,10,10,12,10,10,10,63,16,16,
            18,18,22,22,22,22,24,24,25,26,
            27,28
        };
    };
    public final static byte scopeStateSet[] = ScopeStateSet.scopeStateSet;
    public final int scopeStateSet(int index) { return scopeStateSet[index]; }

    public interface ScopeRhs {
        public final static char scopeRhs[] = {0,
            176,0,15,0,135,2,0,77,0,135,
            26,0,135,66,135,26,0,32,87,77,
            0,135,67,135,66,135,26,0,33,87,
            77,0,32,87,33,87,77,0,143,52,
            77,0,142,2,80,0,187,32,0,41,
            87,0,34,0,33,87,34,0,32,87,
            33,87,34,0,13,0,115,0,5,123,
            0,4,123,0,118,0,3,121,0,2,
            121,0,121,0,10,118,0,9,118,0,
            7,118,0,6,118,0,124,0,11,115,
            0,8,115,0,127,0,35,112,0,130,
            0,36,109,0,133,0,37,106,0,139,
            0,39,103,0,17,0,0,143,52,77,
            39,102,0,148,2,144,158,38,79,39,
            102,0,148,2,158,38,79,0,148,2,
            144,77,0,148,2,144,77,39,102,0,
            148,2,144,183,39,102,0,143,8,77,
            2,77,37,102,0,143,8,136,2,77,
            37,102,0,136,2,77,37,102,0,20,
            97,13,0,135,2,77,37,102,0,135,
            46,145,45,160,2,77,37,102,0,145,
            45,160,2,77,37,102,0,19,87,13,
            0,135,46,145,2,77,37,102,0,145,
            2,77,37,102,0,135,46,160,8,147,
            2,77,37,102,0,135,46,160,8,77,
            2,77,37,102,0,135,46,160,2,77,
            37,102,0,186,48,19,0,168,48,82,
            0,168,48,80,0,184,2,19,0
        };
    };
    public final static char scopeRhs[] = ScopeRhs.scopeRhs;
    public final int scopeRhs(int index) { return scopeRhs[index]; }

    public interface ScopeState {
        public final static char scopeState[] = {0,
            3827,3819,3811,3803,3782,3736,3707,3698,408,3622,
            3470,3660,3584,3508,3432,3391,3350,3306,3262,3218,
            557,3171,3124,3074,3021,2965,2906,2842,2778,2714,
            1530,1066,1814,2650,2586,2522,2458,1457,1384,609,
            1297,2394,2330,981,1746,2266,1224,343,2202,2138,
            1151,2074,887,793,1678,713,1603,2010,1946,477,
            1882,0,3745,3657,0
        };
    };
    public final static char scopeState[] = ScopeState.scopeState;
    public final int scopeState(int index) { return scopeState[index]; }

    public interface InSymb {
        public final static char inSymb[] = {0,
            0,181,172,62,174,173,176,175,191,71,
            214,211,70,212,55,8,64,73,68,146,
            61,192,199,197,198,194,195,193,171,79,
            48,140,141,210,79,6,146,2,79,38,
            135,109,79,77,102,92,19,82,80,26,
            2,114,120,117,126,123,107,132,129,139,
            130,124,118,27,4,32,115,121,127,133,
            137,34,34,34,202,149,153,7,3,54,
            135,207,206,38,52,144,39,37,48,2,
            48,48,2,135,1,135,53,50,47,40,
            4,33,107,187,77,35,5,44,43,42,
            41,49,51,19,80,79,6,34,135,56,
            153,8,158,143,2,183,79,77,77,186,
            1,77,184,77,185,168,135,169,168,142,
            66,107,133,107,127,107,121,121,107,115,
            115,8,55,34,107,118,118,118,118,107,
            124,107,130,48,2,8,57,148,143,144,
            38,52,144,2,8,40,34,8,65,8,
            135,142,203,63,153,60,59,209,208,148,
            2,158,143,2,135,145,160,147,136,77,
            67,40,149,180,102,180,153,8,148,144,
            57,148,46,45,46,8,8,8,34,135,
            34,2,135,145,135,160,77,143,160,143,
            77,142,148,46,46,46,135,135,135
        };
    };
    public final static char inSymb[] = InSymb.inSymb;
    public final int inSymb(int index) { return inSymb[index]; }

    public interface Name {
        public final static String name[] = {
            "",
            ":=",
            "+",
            "-",
            "*",
            "/",
            ">",
            "<",
            "=",
            ">=",
            "<=",
            "<>",
            "(",
            ")",
            "{",
            "}",
            "[",
            "]",
            "->",
            "|",
            ",",
            ":",
            "::",
            ";",
            ".",
            "..",
            "$empty",
            "INTEGER_LITERAL",
            "REAL_LITERAL",
            "STRING_LITERAL",
            "self",
            "if",
            "then",
            "else",
            "endif",
            "and",
            "or",
            "xor",
            "not",
            "implies",
            "let",
            "in",
            "true",
            "false",
            "null",
            "invalid",
            "Set",
            "Bag",
            "Sequence",
            "Collection",
            "OrderedSet",
            "String",
            "Integer",
            "UnlimitedNatural",
            "Real",
            "Boolean",
            "Tuple",
            "OclAny",
            "OclVoid",
            "OclInvalid",
            "check",
            "creation",
            "default",
            "deletion",
            "enforce",
            "imports",
            "map",
            "query",
            "realize",
            "refines",
            "transformation",
            "uses",
            "where",
            "EOF_TOKEN",
            "IDENTIFIER",
            "SINGLE_LINE_COMMENT",
            "MULTI_LINE_COMMENT",
            "ERROR_TOKEN",
            "conceptualOperationNameCS",
            "CollectionTypeIdentifierCS",
            "simpleNameCS",
            "unreservedSimpleNameCS",
            "pathNameCS",
            "typeCS",
            "collectionTypeCS",
            "tupleTypePartsCS",
            "typedUninitializedVariableCS",
            "OclExpressionCS",
            "typedInitializedVariableCS",
            "initializedVariableCS",
            "uninitializedVariableCS",
            "CollectionLiteralPartsCS",
            "CollectionLiteralPartCS",
            "StringLiteralExpCS",
            "TupleLiteralPartsCS",
            "primaryExpCS",
            "notNameExpressionCS",
            "argumentsCS",
            "SimpleNameExpCS",
            "impliesNotNameNotLetCS",
            "impliesNotLetCS",
            "xorNotNameNotLetCS",
            "xorNotLetCS",
            "xorWithLetCS",
            "orNotNameNotLetCS",
            "orNotLetCS",
            "orWithLetCS",
            "andNotNameNotLetCS",
            "andNotLetCS",
            "andWithLetCS",
            "equalityNotNameNotLetCS",
            "equalityNotLetCS",
            "equalityWithLetCS",
            "relationalNotNameNotLetCS",
            "relationalNotLetCS",
            "relationalWithLetCS",
            "additiveNotNameNotLetCS",
            "additiveNotLetCS",
            "additiveWithLetCS",
            "multiplicativeNotNameNotLetCS",
            "multiplicativeNotLetCS",
            "multiplicativeWithLetCS",
            "unaryNotLetCS",
            "unaryWithLetCS",
            "primaryNotNameCS",
            "letVariablesCS",
            "ERROR_Colon",
            "MappingCS",
            "TransformationCS",
            "QueryCS",
            "TransformationCS_0_",
            "TransformationNameCS",
            "DirectionCS",
            "DirectionCS_0_",
            "DirectionNameCS",
            "DirectionCS_1_",
            "DirectionCS_2_",
            "PackageNameCS",
            "DirectionCS_3_",
            "DirectionCS_4_",
            "DirectionCS_5_",
            "MappingCS_1_",
            "MappingNameCS",
            "MappingCS_2_",
            "MappingCS_3_",
            "MappingCS_4_",
            "DomainCS",
            "MappingCS_8",
            "DomainCS_0_",
            "ComposedMappingCS",
            "DomainCS_1_",
            "DomainCS_2_",
            "GuardPatternCS_1_",
            "UnrealizedVariableCS",
            "GuardPatternCS_2_",
            "ConstraintCS",
            "BottomPatternCS_1_",
            "RealizedVariableCS",
            "BottomPatternCS_2_",
            "EnforcementOperationCS",
            "EnforcementOperationCS_1_",
            "VariableNameCS",
            "AssignmentCS_0_",
            "identifierCS",
            "ERROR_identifierCS",
            "QueryNameCS",
            "QueryCS_preParamDeclaration",
            "QueryCS_postParamDeclaration",
            "paramDeclarationCS",
            "QueryCS_postType"
        };
    };
    public final static String name[] = Name.name;
    public final String name(int index) { return name[index]; }

    public final static int
           ERROR_SYMBOL      = 1,
           SCOPE_UBOUND      = 51,
           SCOPE_SIZE        = 52,
           MAX_NAME_LENGTH   = 29;

    public final int getErrorSymbol() { return ERROR_SYMBOL; }
    public final int getScopeUbound() { return SCOPE_UBOUND; }
    public final int getScopeSize() { return SCOPE_SIZE; }
    public final int getMaxNameLength() { return MAX_NAME_LENGTH; }

    public final static int
           NUM_STATES        = 239,
           NT_OFFSET         = 76,
           LA_STATE_OFFSET   = 4343,
           MAX_LA            = 1,
           NUM_RULES         = 342,
           NUM_NONTERMINALS  = 146,
           NUM_SYMBOLS       = 222,
           SEGMENT_SIZE      = 8192,
           START_STATE       = 444,
           IDENTIFIER_SYMBOL = 3,
           EOFT_SYMBOL       = 74,
           EOLT_SYMBOL       = 74,
           ACCEPT_ACTION     = 4000,
           ERROR_ACTION      = 4001;

    public final static boolean BACKTRACK = true;

    public final int getNumStates() { return NUM_STATES; }
    public final int getNtOffset() { return NT_OFFSET; }
    public final int getLaStateOffset() { return LA_STATE_OFFSET; }
    public final int getMaxLa() { return MAX_LA; }
    public final int getNumRules() { return NUM_RULES; }
    public final int getNumNonterminals() { return NUM_NONTERMINALS; }
    public final int getNumSymbols() { return NUM_SYMBOLS; }
    public final int getSegmentSize() { return SEGMENT_SIZE; }
    public final int getStartState() { return START_STATE; }
    public final int getStartSymbol() { return lhs[0]; }
    public final int getIdentifierSymbol() { return IDENTIFIER_SYMBOL; }
    public final int getEoftSymbol() { return EOFT_SYMBOL; }
    public final int getEoltSymbol() { return EOLT_SYMBOL; }
    public final int getAcceptAction() { return ACCEPT_ACTION; }
    public final int getErrorAction() { return ERROR_ACTION; }
    public final boolean isValidForParser() { return isValidForParser; }
    public final boolean getBacktrack() { return BACKTRACK; }

    public final int originalState(int state) {
        return -baseCheck[state];
    }
    public final int asi(int state) {
        return asb[originalState(state)];
    }
    public final int nasi(int state) {
        return nasb[originalState(state)];
    }
    public final int inSymbol(int state) {
        return inSymb[originalState(state)];
    }

    public final int ntAction(int state, int sym) {
        return baseAction[state + sym];
    }

    public final int tAction(int state, int sym) {
        int i = baseAction[state],
            k = i + sym;
        return termAction[termCheck[k] == sym ? k : i];
    }
    public final int lookAhead(int la_state, int sym) {
        int k = la_state + sym;
        return termAction[termCheck[k] == sym ? k : la_state];
    }
}
