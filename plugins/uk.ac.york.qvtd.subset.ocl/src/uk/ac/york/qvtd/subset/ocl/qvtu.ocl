/*******************************************************************************
 * Copyright (c) 2012 The University of York.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 * 
 * Contributors:
 *     hhoyos - initial API and implementation
 ******************************************************************************/

/**
 * Unidirectional Semantics
 * The selected direction is identified by the domain attributes.
 * An input only domain is neither isCheckable nor isEnforceable.
 *		a checked domain isCheckable. ?????
 * 		a created output domain isEnforceable.
 * 		an updated output domain is isCheckable and isEnforceable.
 * 
 * An input domain has no realized variables or assignments.
 * 
 * Middle domain input assignments are replaced by predicates.
 */
import qvtc : 'http://www.eclipse.org/qvt/0.9/QVTcore'

package qvtcore

context Mapping
	/* 
	 * Each Mapping must have one input domain (i.e. check and not enforce)
	 */
	inv: domain->select(isCheckable)->union(domain->select(isEnforceable))->size() >= 1

context CoreDomain
	/*
	 * Domains must either be check (input) or enforce(output) or check+enforce(update)
	 */
	inv: isCheckable or isEnforceable 
	
	/*
 	 * An input domain has no realized variables or assignments.
 	 */
	inv: not isCheckable and not isEnforceable implies bottomPattern.realizedVariable->isEmpty()
	inv: not isCheckable and not isEnforceable implies bottomPattern.assignment->isEmpty()
	

endpackage